using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace Z2Randomizer
{
    /*
     * 
    Change List:
        * Fixed a bug with random hidden palace/new kasuto
        * Fixed a bug that should hopefully speed up Seed generation a bit
        * Added an option to allow users to select their beam sprite
        * Added a whole bunch of new playable character sprites (thanks Knightcrawler, Lufia, and Plan!)
        * Added two forms of helpful hints
        * Items in the drop pool are now guaranteed to appear in the pool at least once
        * Added an option to standardize drops
        * Added an option to randomize which items are in the item pool
        * Added some additional community hints (too many people to thank for this one)
        * Various UI tweaks and fixes


    Menu to magic: location E15? Three NOPs?

    To remove wizard, upstab, riverman text change the following to 0xFF:
        0xE563 - shield (pointer a553, at 0xEFEC)
        0xE68A - jump (pointer a67a, at 0xEFFE)
        0xE7E9 - life (pointer a7d9, at 0xF014)
        0xE833 - You know bagu
        0xE989 - fairy (pointer a979, at 0xF02A)
        0xE9AE - when you jump ....
        0xEC23 - fire (pointer ac13, at 0xF05A)
        0xEDAA - reflect (pointer ad9a, at 0xf070)
        0xEF1F - spell (pointer af0f, at 0xf088)
        0xEF81 - thunder (pointer af71, at 0xf08e)

    Bug List:
        Palace 6 fallthrough bug
        Ceiling stalfos 
        Shorten remaining wizards and such

        funky grass encounter in east hyrule
        death mountain encounters

    Feature List:

        Text Changes
            More community hints
            Helpful hints
        Item shuffling
            More extreme item shuffling
        Move towns accross continents
        Shuffle palace entrance statues / columns
        boss shuffle
        Experience Slider
            random/gems only/low/normal/high
        Shorten Towns
        Random%
        More extreme enemy shuffle
            Slider? (easy, medium, crazy)
        Overworld Generation improvements
            Allow continent entraces to be swapped
            Continent sizes
        Remove few remaining extra rooms
        Swap rooms across dungeons
        Mirror Rooms
        Change pbag amounts
        Swap up/downstab
        Put in sprites
        Fix small item shuffle
        Add Seed #, hash to title/file select

    Spell swap notes:
        Shield exit: 0xC7BB, 0xC1; enter: 0xC7EC, 0x90 //change map 48 pointer to map 40 pointer
        Jump exit: 0xC7BF, 0xC5; enter: 0xC7F0, 0x94 //change map 49 pointer to map 41 pointer
        Life exit: 0xC7C3, 0xC9; enter 0xC7F4, 0x98 //change map 50 pointer to map 42 pointer
        Fairy exit: 0xC7C7, 0xCD; enter 0xC7F8, 0x9C //change map 51 pointer to map 43 pointer
        Fire exit: 0xC7Cb, 0xD1; enter 0xC7FC, 0xA0 //change map 52 pointer to map 44 pointer
        Reflect exit: 0xC7Cf, 0xD5; enter 0xC800, 0xA4 //change map 53 pointer to map 45 pointer
        Spell exit: 0xC7D3, 0x6A; enter 0xC795, 0xC796, 0x4D //new kasuto item?
        Thunder exit: 0xC7D7, 0xDD; enter 0xC808, 0xAC
        Downstab exit: 0xC7DB, 0xE1; enter 0xC80C, 0xB0
        Upstab exit: 0xC7DF, 0xE5; enter 0xC810, 0xB4
    */

    public enum Items { Candle = 0, Glove = 1, Raft = 2, Boots = 3, Horn = 4, Cross = 5, Hammer = 6, Magickey = 7, Key = 8, Donotuse = 9, Smallbag = 10, Hundobag = 11, Twohundobag = 12, Fivehundobag = 13, Magiccontainer = 14, Heartcontainer = 15, Bluejar = 16, Redjar = 17, Oneup = 18, Medicine = 21, Trophy = 20, Kid = 19 }
    public enum Spells { Shield = 0, Jump = 1, Life = 2, Fairy = 3, Fire = 4, Reflect = 5, Spell = 6, Thunder = 7, Downstab = 8, Upstab = 9 }

    public class Hyrule
    {

        private readonly string[] _wizardTexts =
        {
            "do you know$why we$stopped$the car?",
            "link...$i am your$father",
            "I like big$bots and i$cannot lie",
        "why am i$locked in$a basement",
        "thats just$like your$opinion$man",
        "the dude$abides",
        "i hope$this isnt$fire spell",
        "boy this$is really$expensive",
        "10th enemy$has the$bomb",
        "stay$awhile and$listen",
        "Dude eff$this game",
        "you teach$me a spell",
        "you know$nothing",
        "thats what$she said",
        "lets throw$a rave",
        "jump in$lava for$200 rupees",
        "you wont$be able$to cast$this",
        "big bucks$no whammys",
        "bagu owes$me 20$rupees",
        "you are$the$weakest$link",
        "link i$am your$father",
        "theres no$wifi here",
        "a wild$link$appears",
        "welcome$to walmart",
        "whats the$wifi$password",
        "dont send$me back to$the home",
        "pull my$finger",
        "id like$to buy a$vowel",
        "i only$know one$spell",
        "i went$to$college$for this",
        "larry is$still in$northern$palace",
        "this game$needs more$categories",
        "who$picked$these$Flags",
        "i found$this in$the$garbage",
        "have you$heard my$mixtape"
        };

        private readonly string[] _bridgetext = {
            "bagu said$what? that$jerk!",
            "try not$to drown",
            "who is$bagu? i$dont know$any bagu",
            "3 5 10 7$12 4 11 6$1 13 14 2$15 8 9",
            "why cant$you swim?",
            "what is$your$quest?",
            "what is$your$favorite$color?",
            "what is$the speed$of a laden$swallow?",
            "tickets$please",
            "you know$magoo? i$can help$you cross",
            "boom boom$boom",
            "WRAAAAAAFT"
            };

        private readonly string[] _bagutext =
        {
            "have you$seen error$around?",
            "tell the$riverman$i said hes$an idiot",
            "i am bagu.$husband$of$baguette",
            "wanna see$a corpse?",
            "aliens$are real",
            "rupees are$mind$control$devices",
            "would you$like a$cookie?",
            "anybody$want a$peanut?",
            "please dont$tell my$wife i am$here",
            "bam bam$bam",
            "ASL?",
        };

        private readonly string[] _downstabtext =
        {
            "stick them$with the$pointy end",
            "youll stab$your eye$out",
            "press down$you idiot",
            "have a$pogo stick",
            "yakhammer$acquired",
            "press down$to crouch",
            "press$dongward$to stab",
            "kick punch$chop block$duck jump",
            "jump crouch$its all in$the mind!",
            "you walked$past me&didnt you"
        };

        private readonly string[] _upstabtext =
        {
            "bet you$wish this$was$downstab",
            "you$probably$wont need$this",
            "press up$you idiot",
            "press up$to go in$doors",
            "are you$santa$claus?",
            "SHORYUKEN!",
            "you wasted$your time"
        };

        private int _trophyIndex = 13;
        private int _medIndex = 43;
        private int _kidIndex = 79;
        private int[] _rauruHints = { 32, 12, 30 }; //Three houses, first screen
        private int[] _rauruMoving = { 9, 10, };
        private int[] _rutoHints = { 18, 33, 25, 26 }; //error is 25 and 26, two houses, outside left
        private int[] _rutoMoving = { 19, 17 };
        private int[] _sariaHints = { 50, 28 };//moving middle screen, sleeping thing, stationary right
        private int[] _sariaMoving = { 27 };
        private int _kingsTomb = 51;
        private int[] _midoHints = { 45 };//moving old lady left, moving kid middle, inside house right
        private int[] _movingMido = { 40, 39 };
        private int[] _nabooruHints = { 67, 64, 97 };//inside house right, moving bagu middle, stationary left, moving left, persistent left
        private int[] _movingNabooru = { 61, 60 };
        private int[] _daruniaHints = { 77, 73 }; //wall first screen, outside last screen
        private int[] _daruniaMoving = { 72, 75, };
        private int[] _newkasutoHints = { 83, 68, 92 }; //outside first screen, wall first screen
        private int[] _newkasutoMoving = { 88, 89 };
        private int _oldkasutoHint = 74;

        private readonly int[] _fireLocs = { 0x20850, 0x22850, 0x24850, 0x26850, 0x28850, 0x2a850, 0x2c850, 0x2e850, 0x36850, 0x32850, 0x34850, 0x38850 };

        private readonly int[] _wizardindex = { 15, 24, 35, 46, 70, 81, 93, 96 };
        private readonly int[,] _brickgroup0 = {{ 0x00, 0x10, 0x30},    { 0x01, 0x21, 0x31},    { 0x02, 0x22, 0x32},    { 0x03, 0x23, 0x33},    { 0x04, 0x24, 0x34},    { 0x05, 0x25, 0x35},    { 0x06, 0x26, 0x36},    { 0x07, 0x27, 0x37},    { 0x08, 0x28, 0x38},    { 0x09, 0x29, 0x39},    { 0x0A, 0x2A, 0x3A},    { 0x0B, 0x2B, 0x3B},    { 0x0C, 0x2C, 0x3C },
{ 0x01, 0x11, 0x31},    { 0x02, 0x12, 0x32},    { 0x03, 0x13, 0x33},    { 0x04, 0x14, 0x34},    { 0x05, 0x15, 0x35},    { 0x06, 0x16, 0x36},    { 0x07, 0x17, 0x37},    { 0x08, 0x18, 0x38},    { 0x09, 0x19, 0x39},    { 0x0A, 0x1A, 0x3A},    { 0x0B, 0x1B, 0x3B},    { 0x0C, 0x1C, 0x3C },
{ 0x03, 0x22, 0x31},    { 0x04, 0x23, 0x32},    { 0x05, 0x24, 0x33},    { 0x06, 0x25, 0x34},    { 0x07, 0x26, 0x35},    { 0x08, 0x27, 0x36},    { 0x09, 0x28, 0x37},    { 0x0A, 0x29, 0x38},    { 0x0B, 0x2A, 0x39},    { 0x0C, 0x2B, 0x3A},    { 0x01, 0x2C, 0x3B},    { 0x02, 0x21, 0x3C},
{ 0x01, 0x22, 0x33},    { 0x02, 0x23, 0x34},    { 0x03, 0x24, 0x35},    { 0x04, 0x25, 0x36},    { 0x05, 0x26, 0x37},    { 0x06, 0x27, 0x38},    { 0x07, 0x28, 0x39},    { 0x08, 0x29, 0x3A},    { 0x09, 0x2A, 0x3B},    { 0x0A, 0x2B, 0x3C},    { 0x0B, 0x2C, 0x31},    { 0x0C, 0x21, 0x32},
{ 0x03, 0x12, 0x31},    { 0x04, 0x13, 0x32},    { 0x05, 0x14, 0x33},    { 0x06, 0x15, 0x34},    { 0x07, 0x16, 0x35},    { 0x08, 0x17, 0x36},    { 0x09, 0x18, 0x37},    { 0x0A, 0x19, 0x38},    { 0x0B, 0x1A, 0x39},    { 0x0C, 0x1B, 0x3A},    { 0x01, 0x1C, 0x3B},    { 0x02, 0x11, 0x3C},
{ 0x01, 0x12, 0x33},    { 0x02, 0x13, 0x34},    { 0x03, 0x14, 0x35},    { 0x04, 0x15, 0x36},    { 0x05, 0x16, 0x37},    { 0x06, 0x17, 0x38},    { 0x07, 0x18, 0x39},    { 0x08, 0x19, 0x3A},    { 0x09, 0x1A, 0x3B},    { 0x0A, 0x1B, 0x3C},    { 0x0B, 0x1C, 0x31},    { 0x0C, 0x11, 0x32},
{ 0x01, 0x17, 0x37},    { 0x02, 0x17, 0x37},    { 0x03, 0x17, 0x37},    { 0x04, 0x17, 0x37},    { 0x05, 0x17, 0x37},    { 0x06, 0x17, 0x37},    { 0x07, 0x17, 0x37},    { 0x08, 0x17, 0x37},    { 0x09, 0x17, 0x37},    { 0x0A, 0x17, 0x37},    { 0x0B, 0x17, 0x37},    { 0x0C, 0x17, 0x37},
{ 0x01, 0x1A, 0x37},    { 0x02, 0x1A, 0x37},    { 0x03, 0x1A, 0x37},    { 0x04, 0x1A, 0x37},    { 0x05, 0x1A, 0x37},    { 0x06, 0x1A, 0x37},    { 0x07, 0x1A, 0x37},    { 0x08, 0x1A, 0x37},    { 0x09, 0x1A, 0x37},    { 0x0A, 0x1A, 0x37},    { 0x0B, 0x1A, 0x37},    { 0x0C, 0x1A, 0x37},
{ 0x01, 0x00, 0x30},    { 0x02, 0x00, 0x30},    { 0x03, 0x00, 0x30},    { 0x04, 0x00, 0x30},    { 0x05, 0x00, 0x30},    { 0x06, 0x00, 0x30},    { 0x07, 0x00, 0x30},    { 0x08, 0x00, 0x30},    { 0x09, 0x00, 0x30},    { 0x0A, 0x00, 0x30},    { 0x0B, 0x00, 0x30},    { 0x0C, 0x00, 0x30}};

        private readonly int[,] _brickgroup1 = { { 0x01, 0x11, 0x21},    { 0x02, 0x12, 0x22},    { 0x03, 0x13, 0x23},    { 0x04, 0x14, 0x24},    { 0x05, 0x15, 0x25},    { 0x06, 0x16, 0x26},    { 0x07, 0x17, 0x27},    { 0x08, 0x18, 0x28},    { 0x09, 0x19, 0x29},    { 0x0A, 0x1A, 0x2A},    { 0x0B, 0x1B, 0x2B},    { 0x0C, 0x1C, 0x2C },
{ 0x01, 0x12, 0x23},    { 0x02, 0x13, 0x24},    { 0x03, 0x14, 0x25},    { 0x04, 0x15, 0x26},    { 0x05, 0x16, 0x27},    { 0x06, 0x17, 0x28},    { 0x07, 0x18, 0x29},    { 0x08, 0x19, 0x2A},    { 0x09, 0x1A, 0x2B},    { 0x0A, 0x1B, 0x2C},    { 0x0B, 0x1C, 0x21},    { 0x0C, 0x11, 0x22 },
{ 0x03, 0x12, 0x21},    { 0x04, 0x13, 0x22},    { 0x05, 0x14, 0x23},    { 0x06, 0x15, 0x24},    { 0x07, 0x16, 0x25},    { 0x08, 0x17, 0x26},    { 0x09, 0x18, 0x27},    { 0x0A, 0x19, 0x28},    { 0x0B, 0x1A, 0x29},    { 0x0C, 0x1B, 0x2A},    { 0x01, 0x1C, 0x2B},    { 0x02, 0x11, 0x2C },
{ 0x01, 0x13, 0x25},    { 0x02, 0x14, 0x26},    { 0x03, 0x15, 0x27},    { 0x04, 0x16, 0x28},    { 0x05, 0x17, 0x29},    { 0x06, 0x18, 0x2A},    { 0x07, 0x19, 0x2B},    { 0x08, 0x1A, 0x2C},    { 0x09, 0x1B, 0x21},    { 0x0A, 0x1C, 0x22},    { 0x0B, 0x11, 0x23},    { 0x0C, 0x12, 0x24 },
{ 0x05, 0x13, 0x21},    { 0x06, 0x14, 0x22},    { 0x07, 0x15, 0x23},    { 0x08, 0x16, 0x24},    { 0x09, 0x17, 0x25},    { 0x0A, 0x18, 0x26},    { 0x0B, 0x19, 0x27},    { 0x0C, 0x1A, 0x28},    { 0x01, 0x1B, 0x29},    { 0x02, 0x1C, 0x2A},    { 0x03, 0x11, 0x2B},    { 0x04, 0x12, 0x2C },
{ 0x01, 0x00, 0x10},    { 0x02, 0x00, 0x10},    { 0x03, 0x00, 0x10},    { 0x04, 0x00, 0x10},    { 0x05, 0x00, 0x10},    { 0x06, 0x00, 0x10},    { 0x07, 0x00, 0x10},    { 0x08, 0x00, 0x10},    { 0x09, 0x00, 0x10},    { 0x0A, 0x00, 0x10},    { 0x0B, 0x00, 0x10},    { 0x0C, 0x00, 0x10} };

        private readonly int[,] _brickgroup2 = { { 0x0F, 0x00, 0x10 },    { 0x0F , 0x01 , 0x11},    { 0x0F , 0x02 , 0x12},    { 0x0F , 0x03 , 0x13},    { 0x0F , 0x04 , 0x14},    { 0x0F , 0x05 , 0x15},    { 0x0F , 0x06 , 0x16},    { 0x0F , 0x07 , 0x17},    { 0x0F , 0x08 , 0x18},    { 0x0F , 0x09 , 0x19},    { 0x0F , 0x0A , 0x1A},    { 0x0F , 0x0B , 0x1B},    { 0x0F , 0x0C , 0x1C },
{ 0x0F , 0x01 , 0x12},    { 0x0F , 0x02 , 0x13},    { 0x0F , 0x03 , 0x14},    { 0x0F , 0x04 , 0x15},    { 0x0F , 0x05 , 0x16},    { 0x0F , 0x06 , 0x17},    { 0x0F , 0x07 , 0x18},    { 0x0F , 0x08 , 0x19},    { 0x0F , 0x09 , 0x1A},    { 0x0F , 0x0A , 0x1B},    { 0x0F , 0x0B , 0x1C},    { 0x0F , 0x0C , 0x11 },
{ 0x0F , 0x02 , 0x11},    { 0x0F , 0x03 , 0x12},    { 0x0F , 0x04 , 0x13},    { 0x0F , 0x05 , 0x14},    { 0x0F , 0x06 , 0x15},    { 0x0F , 0x07 , 0x16},    { 0x0F , 0x08 , 0x17},    { 0x0F , 0x09 , 0x18},    { 0x0F , 0x0A , 0x19},    { 0x0F , 0x0B , 0x1A},    { 0x0F , 0x0C , 0x1B},    { 0x0F , 0x01 , 0x1C},
{ 0x0F , 0x01 , 0x00},    { 0x0F , 0x02 , 0x00},    { 0x0F , 0x03 , 0x00},    { 0x0F , 0x04 , 0x00},    { 0x0F , 0x05 , 0x00},    { 0x0F , 0x06 , 0x00},    { 0x0F , 0x07 , 0x00},    { 0x0F , 0x08 , 0x00},    { 0x0F , 0x09 , 0x00},    { 0x0F , 0x0A , 0x00},    { 0x0F , 0x0B , 0x00},    { 0x0F , 0x0C , 0x00 }};

        private readonly int[,] _curtaingroup0 = { {0x30, 0x10, 0x00 },    { 0x31 , 0x11 , 0x01},    { 0x32 , 0x12 , 0x02},    { 0x33 , 0x13 , 0x03},    { 0x34 , 0x14 , 0x04},    { 0x35 , 0x15 , 0x05},    { 0x36 , 0x16 , 0x06},    { 0x37 , 0x17 , 0x07},    { 0x38 , 0x18 , 0x08},    { 0x39 , 0x19 , 0x09},    { 0x3A , 0x1A , 0x0A},    { 0x3B , 0x1B , 0x0B},    { 0x3C , 0x1C , 0x0C},
{ 0x30 , 0x21 , 0x11},    { 0x30 , 0x22 , 0x12},    { 0x30 , 0x23 , 0x13},    { 0x30 , 0x24 , 0x14},    { 0x30 , 0x25 , 0x15},    { 0x30 , 0x26 , 0x16},    { 0x30 , 0x27 , 0x17},    { 0x30 , 0x28 , 0x18},    { 0x30 , 0x29 , 0x19},    { 0x30 , 0x2A , 0x1A},    { 0x30 , 0x2B , 0x1B},    { 0x30 , 0x2C , 0x1C},
{ 0x31 , 0x22 , 0x13},    { 0x32 , 0x23 , 0x14},    { 0x33 , 0x24 , 0x15},    { 0x34 , 0x25 , 0x16},    { 0x35 , 0x26 , 0x17},    { 0x36 , 0x27 , 0x18},    { 0x37 , 0x28 , 0x19},    { 0x38 , 0x29 , 0x1A},    { 0x39 , 0x2A , 0x1B},    { 0x3A , 0x2B , 0x1C},    { 0x3B , 0x2C , 0x11},    { 0x3C , 0x21 , 0x12},
{ 0x33 , 0x22 , 0x11},    { 0x34 , 0x23 , 0x12},    { 0x35 , 0x24 , 0x13},    { 0x36 , 0x25 , 0x14},    { 0x37 , 0x26 , 0x15},    { 0x38 , 0x27 , 0x16},    { 0x39 , 0x28 , 0x17},    { 0x3A , 0x29 , 0x18},    { 0x3B , 0x2A , 0x19},    { 0x3C , 0x2B , 0x1A},    { 0x31 , 0x2C , 0x1B},    { 0x32 , 0x21 , 0x1C},
{ 0x33 , 0x22 , 0x01},    { 0x34 , 0x23 , 0x02},    { 0x35 , 0x24 , 0x03},    { 0x36 , 0x25 , 0x04},    { 0x37 , 0x26 , 0x05},    { 0x38 , 0x27 , 0x06},    { 0x39 , 0x28 , 0x07},    { 0x3A , 0x29 , 0x08},    { 0x3B , 0x2A , 0x09},    { 0x3C , 0x2B , 0x0A},    { 0x31 , 0x2C , 0x0B},    { 0x32 , 0x21 , 0x0C},
{ 0x37 , 0x18 , 0x04},    { 0x37 , 0x11 , 0x0C},    { 0x37 , 0x12 , 0x0C},    { 0x37 , 0x13 , 0x0C},    { 0x37 , 0x14 , 0x0C},    { 0x37 , 0x15 , 0x0C},    { 0x37 , 0x16 , 0x0C},    { 0x37 , 0x17 , 0x0C},    { 0x37 , 0x18 , 0x0C},    { 0x37 , 0x19 , 0x0C},    { 0x37 , 0x1A , 0x0C},    { 0x37 , 0x1B , 0x0C},    { 0x37 , 0x1C , 0x0C},
{ 0x30 , 0x00 , 0x01},    { 0x30 , 0x00 , 0x02},    { 0x30 , 0x00 , 0x03},    { 0x30 , 0x00 , 0x04},    { 0x30 , 0x00 , 0x05},    { 0x30 , 0x00 , 0x06},    { 0x30 , 0x00 , 0x07},    { 0x30 , 0x00 , 0x08},    { 0x30 , 0x00 , 0x09},    { 0x30 , 0x00 , 0x0A},    { 0x30 , 0x00 , 0x0B},    { 0x30 , 0x00 , 0x0C},
{ 0x37 , 0x1A , 0x01},    { 0x37 , 0x1A , 0x02},    { 0x37 , 0x1A , 0x03},    { 0x37 , 0x1A , 0x04},    { 0x37 , 0x1A , 0x05},    { 0x37 , 0x1A , 0x06},    { 0x37 , 0x1A , 0x07},    { 0x37 , 0x1A , 0x08},    { 0x37 , 0x1A , 0x09},    { 0x37 , 0x1A , 0x0A},    { 0x37 , 0x1A , 0x0B},
{ 0x37 , 0x17 , 0x01},    { 0x37 , 0x17 , 0x02},    { 0x37 , 0x17 , 0x03},    { 0x37 , 0x17 , 0x04},    { 0x37 , 0x17 , 0x05},    { 0x37 , 0x17 , 0x06},    { 0x37 , 0x17 , 0x08},    { 0x37 , 0x17 , 0x09},    { 0x37 , 0x17 , 0x0A},    { 0x37 , 0x17 , 0x0B } };

        private readonly int[,] _curtaingroup1 = { {  0x21 , 0x11 , 0x01},    { 0x22 , 0x12 , 0x02},    { 0x23 , 0x13 , 0x03},    { 0x24 , 0x14 , 0x04},    { 0x25 , 0x15 , 0x05},    { 0x26 , 0x16 , 0x06},    { 0x27 , 0x17 , 0x07},    { 0x28 , 0x18 , 0x08},    { 0x29 , 0x19 , 0x09},    { 0x2A , 0x1A , 0x0A},    { 0x2B , 0x1B , 0x0B},    { 0x2C , 0x1C , 0x0C },
{ 0x21 , 0x12 , 0x03},    { 0x22 , 0x13 , 0x04},    { 0x23 , 0x14 , 0x05},    { 0x24 , 0x15 , 0x06},    { 0x25 , 0x16 , 0x07},    { 0x26 , 0x17 , 0x08},    { 0x27 , 0x18 , 0x09},    { 0x28 , 0x19 , 0x0A},    { 0x29 , 0x1A , 0x0B},    { 0x2A , 0x1B , 0x0C},    { 0x2B , 0x1C , 0x01},    { 0x2C , 0x11 , 0x02 },
{ 0x23 , 0x12 , 0x01},    { 0x24 , 0x13 , 0x02},    { 0x25 , 0x14 , 0x03},    { 0x26 , 0x15 , 0x04},    { 0x27 , 0x16 , 0x05},    { 0x28 , 0x17 , 0x06},    { 0x29 , 0x18 , 0x07},    { 0x2A , 0x19 , 0x08},    { 0x2B , 0x1A , 0x09},    { 0x2C , 0x1B , 0x0A},    { 0x21 , 0x1C , 0x0B},    { 0x22 , 0x11 , 0x0C },
{ 0x21 , 0x13 , 0x05},    { 0x22 , 0x14 , 0x06},    { 0x23 , 0x15 , 0x07},    { 0x24 , 0x16 , 0x08},    { 0x25 , 0x17 , 0x09},    { 0x26 , 0x18 , 0x0A},    { 0x27 , 0x19 , 0x0B},    { 0x28 , 0x1A , 0x0C},    { 0x29 , 0x1B , 0x01},    { 0x2A , 0x1C , 0x02},    { 0x2B , 0x11 , 0x03},    { 0x2C , 0x12 , 0x04 },
{ 0x25 , 0x13 , 0x01},    { 0x26 , 0x14 , 0x02},    { 0x27 , 0x15 , 0x03},    { 0x28 , 0x16 , 0x04},    { 0x29 , 0x17 , 0x05},    { 0x2A , 0x18 , 0x06},    { 0x2B , 0x19 , 0x07},    { 0x2C , 0x1A , 0x08},    { 0x21 , 0x1B , 0x09},    { 0x22 , 0x1C , 0x0A},    { 0x23 , 0x11 , 0x0B},    { 0x24 , 0x12 , 0x0C },
{ 0x10 , 0x11 , 0x0F},    { 0x10 , 0x12 , 0x0F},    { 0x10 , 0x13 , 0x0F},    { 0x10 , 0x14 , 0x0F},    { 0x10 , 0x15 , 0x0F},    { 0x10 , 0x16 , 0x0F},    { 0x10 , 0x17 , 0x0F},    { 0x10 , 0x18 , 0x0F},    { 0x10 , 0x19 , 0x0F},    { 0x10 , 0x1A , 0x0F},    { 0x10 , 0x1B , 0x0F},    { 0x10 , 0x1C , 0x0F },
{ 0x10 , 0x00 , 0x01},    { 0x10 , 0x00 , 0x02},    { 0x10 , 0x00 , 0x03},    { 0x10 , 0x00 , 0x04},    { 0x10 , 0x00 , 0x05},    { 0x10 , 0x00 , 0x06},    { 0x10 , 0x00 , 0x07},    { 0x10 , 0x00 , 0x08},    { 0x10 , 0x00 , 0x09},    { 0x10 , 0x00 , 0x0A},    { 0x10 , 0x00 , 0x0B},    { 0x10 , 0x00 , 0x0C} };

        private readonly int[,] _curtaingroup2 = { { 0x10 , 0x00 , 0x0F},    { 0x11 , 0x01 , 0x0F},    { 0x12 , 0x02 , 0x0F},    { 0x13 , 0x03 , 0x0F},    { 0x14 , 0x04 , 0x0F},    { 0x15 , 0x05 , 0x0F},    { 0x16 , 0x06 , 0x0F},    { 0x17 , 0x07 , 0x0F},    { 0x18 , 0x08 , 0x0F},    { 0x19 , 0x09 , 0x0F},    { 0x1A , 0x0A , 0x0F},    { 0x1B , 0x0B , 0x0F},    { 0x1C , 0x0C , 0x0F },
{ 0x11 , 0x02 , 0x0F},    { 0x12 , 0x03 , 0x0F},    { 0x13 , 0x04 , 0x0F},    { 0x14 , 0x05 , 0x0F},    { 0x15 , 0x06 , 0x0F},    { 0x16 , 0x07 , 0x0F},    { 0x17 , 0x08 , 0x0F},    { 0x18 , 0x09 , 0x0F},    { 0x19 , 0x0A , 0x0F},    { 0x1A , 0x0B , 0x0F},    { 0x1B , 0x0C , 0x0F},    { 0x1C , 0x01 , 0x0F },
{ 0x12 , 0x01 , 0x0F},    { 0x13 , 0x02 , 0x0F},    { 0x14 , 0x03 , 0x0F},    { 0x15 , 0x04 , 0x0F},    { 0x16 , 0x05 , 0x0F},    { 0x17 , 0x06 , 0x0F},    { 0x18 , 0x07 , 0x0F},    { 0x19 , 0x08 , 0x0F},    { 0x1A , 0x09 , 0x0F},    { 0x1B , 0x0A , 0x0F},    { 0x1C , 0x0B , 0x0F},    { 0x11 , 0x0C , 0x0F },
{ 0x00 , 0x01 , 0x0F},    { 0x00 , 0x02 , 0x0F},    { 0x00 , 0x03 , 0x0F},    { 0x00 , 0x04 , 0x0F},    { 0x00 , 0x05 , 0x0F},    { 0x00 , 0x06 , 0x0F},    { 0x00 , 0x07 , 0x0F},    { 0x00 , 0x08 , 0x0F},    { 0x00 , 0x09 , 0x0F},    { 0x00 , 0x0A , 0x0F},    { 0x00 , 0x0B , 0x0F},    { 0x00 , 0x0C , 0x0F} };

        private readonly int[] _spellTextPointers = { 0xEFEC, 0xEFFE, 0xF014, 0xF02A, 0xF05A, 0xf070, 0xf088, 0xf08e };

        private readonly int[] _outBricks = { 0x10485, 0x10495, 0x104A5, 0x104B5, 0x104C5, 0x104D5, 0x14023 };
        private readonly int[] _inBricks = { 0x13F15, 0x13F25, 0x13F35, 0x13F45, 0x13F55, 0x13F65, 0x14033 };
        private readonly int[] _inWindows = { 0x13F19, 0x13F29, 0x13F39, 0x13F49, 0x13F59, 0x13F69, 0x14027 };
        private readonly int[] _inCurtains = { 0x13F1D, 0x13F2D, 0x13F3D, 0x13F4D, 0x13F5D, 0x13F6D, 0x1402B };

        private readonly int[] _brickSprites = { 0x29650, 0x2B650, 0x2D650, 0x33650, 0x35650, 0x37650, 0x39650 };
        private readonly int[] _inBrickSprites = { 0x29690, 0x2B690, 0x2D690, 0x33690, 0x35690, 0x37690, 0x39690 };

        private readonly int[] _palPalettes = { 0, 0x00, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60 };
        private readonly int[] _palGraphics = { 0, 0x04, 0x05, 0x09, 0x0A, 0x0B, 0x0C, 0x06 };

        private readonly int[] _zeldaSprite = { 0, 1, 5, 6, 99, 230, 164, 228, 0, 0, 2, 1, 0, 65, 67, 67, 228, 227, 177, 235, 171, 215, 175, 247, 67, 64, 64, 17, 81, 43, 83, 73, 0, 240, 248, 248, 216, 220, 156, 188, 0, 0, 0, 0, 116, 32, 96, 64, 124, 126, 254, 254, 254, 252, 228, 226, 128, 128, 192, 240, 248, 224, 152, 220, 123, 13, 2, 1, 3, 7, 15, 15, 4, 2, 1, 0, 0, 2, 7, 7, 31, 31, 31, 31, 31, 31, 15, 1, 15, 15, 15, 15, 7, 3, 1, 0, 242, 249, 242, 228, 136, 220, 252, 252, 236, 230, 44, 152, 112, 168, 8, 248, 254, 254, 254, 254, 255, 255, 255, 255, 252, 252, 252, 244, 252, 246, 250, 0, 0, 0, 3, 11, 13, 103, 237, 169, 0, 0, 0, 4, 2, 0, 66, 70, 233, 232, 230, 179, 239, 175, 223, 175, 70, 71, 65, 65, 19, 83, 39, 87, 0, 0, 224, 240, 240, 176, 184, 56, 0, 0, 0, 0, 0, 232, 64, 192, 120, 248, 252, 252, 252, 252, 248, 228, 128, 0, 0, 128, 224, 240, 224, 152, 247, 123, 13, 2, 3, 3, 7, 7, 75, 5, 2, 1, 0, 0, 3, 3, 15, 15, 15, 15, 15, 15, 15, 15, 7, 7, 7, 7, 7, 7, 7, 0, 226, 242, 233, 242, 228, 136, 216, 252, 220, 236, 198, 12, 152, 112, 160, 8, 252, 254, 255, 255, 254, 255, 255, 238, 248, 252, 238, 254, 244, 248, 224, 0, 123, 13, 2, 1, 3, 3, 3, 3, 4, 2, 1, 0, 0, 0, 1, 1, 7, 7, 7, 7, 7, 3, 3, 1, 3, 3, 3, 3, 3, 1, 1, 0, 242, 249, 242, 228, 136, 220, 252, 252, 236, 230, 44, 152, 112, 168, 8, 248, 252, 252, 252, 254, 254, 254, 252, 252, 248, 248, 248, 216, 252, 236, 232, 0, 0, 0, 0, 15, 31, 62, 62, 63, 0, 0, 0, 0, 0, 1, 1, 1, 63, 54, 28, 30, 21, 5, 9, 0, 0, 9, 3, 1, 0, 1, 0, 0, 0, 0, 24, 188, 252, 252, 124, 124, 0, 0, 0, 0, 128, 0, 128, 128, 56, 60, 126, 254, 250, 242, 242, 249, 192, 216, 188, 56, 116, 236, 236, 22, 0, 0, 0, 1, 3, 7, 7, 7, 0, 0, 0, 0, 0, 1, 1, 2, 6, 5, 11, 22, 47, 31, 0, 0, 1, 2, 4, 9, 16, 0, 0, 0, 121, 121, 249, 247, 231, 254, 190, 124, 54, 54, 70, 168, 154, 160, 76, 184, 248, 244, 252, 216, 128, 0, 0, 0, 112, 232, 192, 0, 0, 0, 0, 0, 16, 40, 40, 40, 40, 40, 40, 40, 0, 16, 16, 16, 16, 16, 16, 16, 40, 40, 57, 62, 101, 99, 57, 24, 16, 16, 0, 57, 56, 60, 22, 7, 0, 0, 0, 0, 0, 0, 0, 88, 0, 0, 0, 0, 0, 0, 0, 32, 222, 254, 127, 89, 19, 150, 254, 254, 32, 0, 128, 174, 238, 105, 0, 32, 5, 7, 3, 1, 1, 3, 31, 63, 2, 1, 0, 0, 0, 0, 3, 31, 127, 127, 127, 63, 47, 27, 25, 16, 63, 63, 62, 15, 19, 1, 0, 0, 255, 255, 255, 254, 255, 247, 247, 255, 240, 248, 240, 112, 230, 234, 74, 182, 254, 220, 224, 224, 248, 236, 220, 228, 156, 128, 192, 192, 64, 80, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 27, 31, 15, 31, 127, 63, 15, 17, 25, 28, 9, 1, 112, 54, 6, 123, 13, 2, 1, 3, 3, 3, 3, 4, 2, 1, 0, 0, 0, 1, 1, 3, 7, 7, 7, 7, 7, 7, 7, 1, 1, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 8, 20, 0, 0, 0, 0, 0, 0, 0, 8, 62, 127, 96, 127, 126, 123, 127, 127, 28, 32, 31, 32, 61, 60, 60, 60, 0, 0, 31, 95, 111, 61, 109, 73, 0, 0, 0, 32, 16, 7, 18, 54, 75, 71, 255, 6, 255, 255, 254, 255, 52, 56, 2, 251, 3, 52, 253, 244, 124, 40, 16, 0, 0, 1, 3, 3, 56, 16, 0, 0, 0, 0, 1, 1, 7, 7, 15, 31, 23, 63, 124, 56, 3, 3, 7, 7, 11, 0, 0, 0, 252, 252, 124, 124, 254, 255, 255, 255, 72, 120, 56, 0, 124, 254, 254, 254, 254, 254, 254, 255, 255, 254, 63, 30, 252, 244, 252, 246, 246, 56, 0, 0, 0, 0, 0, 128, 128, 128, 192, 192, 0, 0, 0, 0, 0, 64, 0, 0, 192, 192, 240, 28, 98, 194, 124, 128, 0, 0, 0, 224, 156, 188, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 128, 127, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 15, 15, 0, 0, 0, 0, 0, 0, 6, 7, 15, 255, 24, 253, 7, 3, 1, 0, 3, 8, 239, 14, 2, 1, 0, 0, 0, 0, 62, 191, 223, 123, 219, 147, 0, 0, 0, 64, 32, 14, 36, 108, 151, 255, 15, 135, 255, 255, 255, 255, 104, 0, 248, 120, 4, 158, 207, 39, 0, 0, 0, 0, 0, 0, 128, 128, 0, 0, 0, 0, 0, 128, 0, 0, 128, 192, 224, 224, 240, 240, 224, 192, 0, 0, 0, 0, 0, 0, 0, 128, 39, 3, 3, 7, 31, 63, 127, 127, 3, 0, 0, 3, 7, 31, 63, 63, 127, 127, 127, 79, 36, 60, 124, 124, 63, 63, 7, 48, 24, 0, 0, 0, 192, 224, 240, 248, 248, 248, 252, 252, 128, 0, 224, 240, 240, 240, 248, 216, 252, 252, 254, 255, 11, 7, 14, 14, 248, 216, 236, 0, 4, 0, 0, 0, 0, 7, 15, 15, 15, 15, 31, 31, 0, 0, 0, 0, 0, 0, 0, 0, 31, 31, 31, 30, 31, 60, 127, 255, 0, 8, 0, 19, 0, 11, 28, 81, 0, 224, 240, 240, 240, 240, 248, 248, 0, 0, 0, 0, 0, 0, 0, 0, 232, 232, 232, 240, 216, 60, 252, 204, 16, 48, 16, 128, 32, 216, 8, 176, 241, 243, 252, 124, 63, 63, 29, 13, 110, 94, 87, 23, 23, 24, 10, 2, 13, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 0, 136, 24, 56, 252, 252, 252, 248, 248, 112, 224, 208, 56, 120, 248, 240, 176, 176, 96, 192, 0, 0, 0, 0, 0, 64, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 47, 0, 0, 0, 0, 0, 0, 0, 16, 55, 30, 54, 36, 37, 35, 91, 165, 8, 3, 9, 27, 26, 28, 4, 66, 0, 0, 0, 0, 0, 0, 128, 192, 0, 0, 0, 0, 0, 0, 0, 0, 192, 192, 224, 224, 224, 240, 248, 252, 0, 160, 0, 0, 0, 0, 0, 192, 83, 239, 183, 235, 253, 226, 173, 243, 33, 83, 75, 69, 66, 93, 80, 64, 239, 255, 191, 255, 127, 15, 30, 62, 66, 79, 79, 79, 15, 0, 0, 0, 252, 228, 226, 242, 249, 242, 228, 140, 224, 152, 220, 236, 118, 44, 152, 112, 216, 248, 248, 254, 255, 255, 255, 30, 160, 0, 240, 248, 222, 242, 0, 0, 0, 32, 32, 114, 120, 122, 250, 248, 0, 36, 38, 84, 75, 71, 135, 135, 252, 252, 220, 138, 1, 1, 0, 0, 131, 131, 131, 129, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 10, 24, 0, 4, 6, 4, 3, 7, 15, 31, 28, 30, 30, 30, 31, 31, 12, 8, 27, 29, 29, 29, 24, 24, 8, 8, 8, 9, 88, 92, 116, 116, 102, 110, 0, 0, 0, 0, 8, 8, 24, 16, 203, 195, 137, 153, 219, 102, 60, 0, 52, 60, 126, 126, 60, 24, 0, 0, 0, 0, 0, 0, 0, 127, 128, 127, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 1, 3, 2, 2, 2, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 248, 0, 0, 0, 0, 0, 0, 0, 0, 252, 124, 236, 110, 78, 94, 62, 191, 0, 128, 58, 144, 176, 160, 192, 64, 12, 30, 31, 31, 14, 255, 24, 253, 0, 12, 14, 14, 1, 8, 239, 14, 7, 3, 3, 7, 5, 4, 15, 30, 2, 0, 1, 1, 2, 3, 0, 0, 95, 63, 127, 255, 119, 227, 7, 159, 32, 24, 60, 38, 168, 29, 251, 103, 255, 255, 255, 255, 255, 255, 7, 0, 8, 63, 255, 254, 255, 7, 0, 0, 128, 192, 192, 128, 0, 128, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 192, 240, 248, 252, 254, 251, 239, 6, 128, 192, 240, 248, 144, 228, 0, 0, 0, 0, 0, 0, 6, 14, 6, 6, 0, 0, 0, 0, 4, 12, 4, 4, 6, 6, 6, 6, 15, 0, 0, 0, 4, 4, 4, 4, 14, 0, 0, 0, 68, 68, 198, 198, 238, 238, 254, 254, 0, 0, 0, 0, 0, 0, 40, 124, 124, 124, 254, 254, 255, 127, 63, 127, 56, 16, 68, 124, 124, 50, 14, 62, 254, 254, 254, 126, 252, 254, 254, 126, 92, 96, 124, 28, 96, 124, 124, 48, 126, 127, 127, 255, 254, 254, 126, 60, 12, 62, 62, 14, 112, 124, 60, 0, 0, 60, 64, 132, 130, 130, 0, 16, 0, 60, 126, 231, 195, 195, 255, 24, 16, 16, 16, 22, 16, 16, 16, 0, 24, 24, 24, 30, 30, 30, 24, 0, 0, 84, 56, 124, 68, 68, 40, 198, 0, 84, 40, 0, 56, 56, 16, 254, 171, 147, 57, 16, 0, 0, 0, 0, 215, 215, 131, 40, 48, 48, 32, 32, 0, 84, 56, 125, 199, 199, 238, 0, 0, 84, 40, 1, 187, 187, 214, 56, 40, 16, 56, 16, 0, 0, 0, 0, 84, 84, 130, 40, 48, 48, 32, 32, 1, 2, 3, 4, 6, 255, 143, 251, 0, 1, 4, 3, 1, 2, 119, 5, 139, 251, 133, 255, 135, 255, 131, 255, 116, 7, 123, 0, 123, 1, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 84, 60, 56, 16, 28, 56, 120, 0, 84, 62, 62, 28, 0, 60, 126, 124, 248, 252, 248, 252, 248, 112, 0, 126, 199, 219, 199, 223, 223, 255, 126, 255, 129, 129, 255, 255, 129, 129, 255, 255, 254, 254, 0, 255, 254, 254, 0, 255, 129, 129, 255, 255, 129, 129, 255, 255, 254, 254, 0, 255, 254, 254, 0, 255, 129, 129, 129, 129, 129, 129, 129, 255, 254, 254, 254, 230, 194, 194, 230, 129, 129, 129, 129, 129, 129, 129, 255, 238, 238, 230, 238, 254, 254, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 56, 254, 56, 16, 16, 16, 16, 16, 56, 254, 56, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 130, 64, 0, 129, 0, 68, 145, 17, 130, 64, 0, 129, 0, 68, 145, 0, 0, 0, 0, 7, 24, 38, 31, 0, 0, 0, 0, 0, 7, 25, 4, 127, 159, 65, 60, 252, 25, 19, 15, 12, 96, 190, 227, 3, 14, 12, 0, 0, 0, 56, 72, 144, 16, 40, 108, 0, 0, 0, 48, 96, 224, 200, 140, 28, 62, 126, 62, 63, 127, 255, 191, 236, 222, 150, 210, 203, 137, 21, 69, 1, 1, 3, 62, 64, 47, 242, 49, 0, 0, 0, 1, 63, 80, 129, 32, 0, 1, 2, 2, 2, 7, 8, 15, 0, 0, 1, 1, 1, 0, 7, 4, 63, 31, 31, 63, 123, 249, 125, 28, 205, 229, 229, 197, 129, 1, 129, 224, 140, 24, 48, 232, 102, 96, 48, 152, 112, 224, 204, 4, 129, 135, 192, 96, 0, 0, 0, 0, 0, 113, 216, 174, 0, 0, 0, 0, 0, 0, 32, 112, 183, 204, 116, 126, 16, 0, 0, 0, 120, 48, 8, 0, 0, 0, 0, 0, 0, 0, 0, 4, 3, 6, 21, 11, 0, 0, 0, 0, 0, 1, 3, 7, 15, 9, 6, 3, 4, 0, 0, 0, 3, 7, 1, 0, 0, 0, 0, 0, 11, 5, 20, 74, 0, 216, 0, 20, 0, 3, 12, 58, 16, 56, 64, 52, 32, 8, 48, 76, 17, 36, 5, 9, 224, 72, 16, 60, 1, 12, 3, 0, 0, 36, 24, 8, 14, 8, 9, 6, 0, 56, 0, 22, 17, 17, 18, 120, 99, 67, 3, 131, 199, 126, 60, 0, 252, 252, 252, 124, 56, 0, 0, 0, 16, 56, 108, 68, 100, 56, 0, 56, 0, 0, 16, 56, 24, 0, 0, 56, 56, 56, 56, 56, 56, 0, 0, 0, 56, 56, 56, 56, 57, 255, 126, 0, 0, 20, 252, 212, 212, 252, 132, 133, 0, 40, 128, 40, 168, 128, 121, 248, 142, 152, 241, 26, 60, 64, 126, 66, 241, 231, 142, 100, 0, 124, 0, 124, 0, 0, 36, 255, 36, 36, 36, 36, 0, 219, 219, 219, 255, 219, 219, 219, 36, 36, 255, 36, 36, 255, 219, 0, 219, 219, 219, 255, 219, 219, 219, 0, 0, 0, 0, 8, 9, 15, 15, 15, 0, 0, 15, 7, 6, 1, 2, 1, 15, 15, 15, 31, 63, 127, 123, 0, 2, 0, 0, 0, 16, 32, 0, 0, 0, 24, 8, 8, 8, 8, 24, 8, 0, 24, 16, 16, 16, 16, 0, 16, 24, 8, 24, 8, 8, 44, 70, 0, 0, 16, 0, 16, 16, 48, 120, 0, 0, 0, 24, 24, 24, 239, 247, 24, 0, 0, 24, 24, 24, 247, 239, 255, 24, 24, 24, 24, 24, 0, 0, 0, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0, 16, 0, 252, 254, 254, 16, 0, 0, 24, 252, 2, 0, 0, 24, 16, 16, 16, 16, 16, 16, 16, 16, 24, 24, 24, 24, 24, 24, 24, 24, 24, 211, 132, 194, 152, 24, 0, 16, 24, 219, 255, 189, 247, 102, 60, 24, 16, 16, 16, 16, 16, 16, 16, 0, 24, 24, 24, 24, 28, 24, 28, 0, 0, 0, 0, 0, 0, 96, 176, 176, 0, 0, 0, 0, 0, 64, 160, 160, 176, 176, 176, 176, 96, 0, 0, 0, 160, 160, 160, 160, 64, 0, 0, 0, 0, 0, 0, 0, 0, 102, 187, 187, 0, 0, 0, 0, 0, 68, 170, 170, 187, 187, 187, 187, 102, 0, 0, 0, 170, 170, 170, 170, 68, 0, 0, 0, 0, 0, 0, 0, 96, 230, 107, 107, 0, 0, 0, 0, 64, 196, 74, 74, 107, 107, 107, 107, 246, 0, 0, 0, 74, 74, 74, 74, 228, 0, 0, 0, 0, 0, 0, 0, 96, 182, 187, 59, 0, 0, 0, 0, 64, 164, 170, 42, 107, 203, 203, 203, 246, 0, 0, 0, 74, 138, 138, 138, 228, 0, 0, 0, 0, 0, 0, 0, 6, 11, 11, 3, 0, 0, 0, 0, 4, 10, 10, 2, 6, 12, 12, 12, 15, 0, 0, 0, 4, 8, 8, 8, 14, 0, 0, 0, 0, 0, 0, 0, 15, 12, 14, 11, 0, 0, 0, 0, 14, 8, 12, 10, 3, 3, 11, 11, 6, 0, 0, 0, 2, 2, 10, 10, 4, 0, 0, 0, 0, 28, 42, 127, 34, 85, 99, 127, 0, 0, 28, 0, 93, 62, 28, 34, 127, 62, 62, 62, 127, 127, 127, 62, 127, 93, 65, 93, 62, 62, 28, 0, 0, 0, 0, 0, 4, 2, 49, 33, 0, 0, 0, 0, 56, 64, 176, 160, 1, 129, 66, 60, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 255, 0, 153, 0, 0, 153, 0, 255, 0, 255, 153, 153, 153, 153, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 60, 84, 112, 0, 0, 0, 24, 62, 127, 255, 255, 42, 80, 16, 0, 0, 0, 0, 0, 255, 255, 254, 126, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 15, 31, 31, 31, 31, 15, 0, 1, 8, 16, 1, 16, 22, 0, 0, 0, 0, 15, 24, 50, 39, 102, 0, 0, 0, 0, 7, 13, 26, 25, 64, 64, 64, 64, 96, 120, 63, 31, 63, 63, 63, 63, 31, 7, 0, 0, 0, 0, 0, 0, 7, 28, 48, 98, 0, 0, 0, 0, 0, 3, 15, 29, 71, 198, 128, 128, 192, 240, 127, 63, 58, 57, 127, 127, 63, 15, 0, 0, 0, 31, 32, 120, 124, 252, 254, 254, 0, 0, 31, 7, 51, 123, 93, 93, 255, 255, 126, 64, 32, 28, 3, 0, 124, 56, 1, 63, 31, 3, 0, 0, 0, 0, 128, 96, 31, 2, 39, 24, 0, 0, 0, 128, 224, 252, 216, 231, 9, 146, 33, 2, 12, 48, 192, 0, 246, 108, 222, 252, 240, 192, 0, 0, 0, 3, 12, 27, 22, 44, 174, 31, 7, 12, 19, 36, 41, 83, 209, 164, 15, 79, 135, 0, 2, 4, 4, 0, 150, 114, 232, 199, 142, 140, 196, 64, 0, 192, 48, 216, 104, 53, 116, 248, 224, 48, 200, 36, 148, 203, 139, 37, 242, 240, 224, 0, 64, 32, 32, 0, 110, 78, 18, 226, 114, 52, 32, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 3, 63, 127, 127, 255, 255, 95, 0, 0, 1, 62, 6, 99, 89, 21, 31, 7, 35, 127, 127, 63, 1, 0, 6, 4, 0, 42, 60, 0, 0, 0, 0, 240, 248, 252, 252, 255, 255, 254, 0, 0, 240, 24, 24, 24, 243, 226, 255, 255, 254, 252, 255, 255, 255, 14, 232, 203, 18, 32, 104, 19, 6, 0, 0, 240, 248, 252, 255, 255, 254, 255, 0, 0, 240, 24, 24, 27, 242, 224, 255, 254, 252, 252, 254, 255, 254, 28, 235, 202, 16, 40, 80, 14, 24, 0, 7, 8, 22, 40, 32, 0, 31, 63, 0, 7, 15, 31, 31, 63, 32, 10, 63, 71, 83, 38, 124, 204, 222, 123, 0, 56, 44, 25, 3, 51, 33, 0, 240, 12, 6, 2, 3, 1, 1, 131, 0, 240, 248, 252, 252, 254, 254, 124, 199, 255, 94, 83, 89, 202, 249, 183, 56, 0, 160, 172, 166, 52, 6, 0, 7, 8, 22, 60, 67, 153, 189, 190, 0, 7, 15, 3, 60, 102, 102, 65, 190, 190, 156, 65, 127, 145, 167, 89, 65, 99, 107, 62, 0, 110, 88, 0, 240, 12, 6, 2, 3, 129, 193, 195, 0, 240, 248, 252, 252, 126, 62, 60, 227, 255, 254, 148, 146, 18, 50, 36, 28, 0, 0, 104, 108, 236, 204, 216, 0, 0, 0, 0, 60, 102, 219, 189, 0, 0, 0, 0, 0, 24, 60, 126, 189, 219, 102, 60, 0, 0, 0, 0, 126, 60, 24, 0, 0, 0, 0, 0, 56, 84, 254, 70, 170, 199, 254, 252, 1, 57, 1, 185, 125, 56, 71, 255, 124, 124, 124, 124, 254, 254, 254, 124, 186, 184, 128, 184, 124, 124, 56, 0, 0, 0, 0, 0, 0, 16, 16, 56, 0, 0, 0, 0, 0, 16, 16, 56, 56, 124, 124, 254, 0, 0, 0, 0, 56, 124, 124, 254, 0, 0, 0, 0, 0, 60, 126, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 127, 127, 63, 31, 15, 7, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 3, 7, 7, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 31, 31, 63, 63, 127, 127, 255, 255, 0, 1, 15, 31, 31, 9, 58, 34, 0, 0, 1, 0, 0, 6, 5, 29, 16, 12, 8, 7, 7, 15, 7, 7, 15, 3, 7, 0, 2, 6, 3, 1, 0, 248, 252, 222, 223, 159, 156, 152, 0, 0, 216, 172, 42, 104, 96, 96, 60, 48, 120, 124, 252, 252, 254, 254, 192, 192, 128, 184, 112, 224, 192, 224, 231, 31, 191, 63, 7, 15, 15, 5, 1, 225, 64, 0, 2, 6, 0, 2, 4, 8, 9, 9, 15, 7, 7, 15, 3, 7, 6, 6, 0, 0, 0, 0, 255, 254, 140, 132, 132, 200, 252, 136, 144, 0, 112, 120, 120, 48, 0, 112, 136, 136, 88, 124, 124, 62, 30, 62, 112, 112, 32, 8, 0, 4, 0, 0, 8, 20, 19, 39, 47, 87, 95, 149, 0, 8, 12, 24, 16, 40, 40, 98, 151, 191, 127, 63, 31, 15, 15, 7, 96, 96, 48, 24, 8, 4, 7, 3, 3, 3, 7, 15, 15, 15, 31, 31, 1, 0, 3, 7, 7, 7, 15, 15, 31, 31, 31, 31, 31, 31, 31, 15, 15, 15, 15, 11, 15, 11, 11, 0, 0, 128, 160, 96, 192, 96, 32, 32, 0, 0, 64, 128, 0, 128, 192, 192, 32, 192, 128, 192, 192, 224, 224, 192, 192, 0, 0, 128, 128, 128, 64, 128, 162, 157, 192, 255, 0, 128, 128, 128, 64, 98, 63, 0, 0, 0, 0, 0, 192, 192, 192, 192, 192, 224, 224, 224, 0, 128, 128, 128, 128, 192, 192, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7, 7, 7, 3, 3, 3, 3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7, 7, 7, 96, 96, 96, 96, 96, 96, 96, 96, 192, 192, 192, 192, 192, 192, 192, 192, 96, 96, 96, 96, 96, 96, 96, 96, 192, 192, 192, 192, 192, 192, 192, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 119, 120, 30, 127, 127, 27, 255, 255, 191, 255, 255, 255, 255, 255, 135, 127, 63, 255, 159, 128, 97, 120, 255, 159, 255, 255, 255, 255, 255, 255, 15, 60, 195, 239, 241, 248, 248, 97, 255, 255, 253, 243, 255, 255, 255, 255, 0, 112, 32, 12, 6, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 3, 207, 15, 111, 67, 1, 15, 99, 253, 247, 247, 255, 255, 255, 247, 255, 134, 240, 252, 254, 252, 252, 240, 0, 255, 31, 255, 255, 255, 255, 255, 255, 3, 207, 15, 111, 67, 1, 15, 99, 253, 247, 247, 255, 255, 255, 247, 255, 63, 127, 255, 255, 63, 7, 113, 0, 222, 191, 191, 255, 255, 255, 255, 255, 15, 60, 195, 239, 241, 248, 248, 97, 255, 255, 253, 243, 255, 255, 255, 255, 3, 6, 5, 15, 15, 13, 14, 5, 3, 7, 6, 13, 12, 14, 15, 6, 4, 7, 6, 4, 4, 7, 6, 4, 7, 6, 5, 7, 7, 6, 5, 7, 0, 64, 128, 192, 192, 160, 64, 128, 192, 160, 96, 48, 48, 80, 176, 96, 32, 224, 32, 96, 224, 160, 32, 96, 192, 0, 192, 128, 0, 64, 192, 128, 4, 7, 6, 4, 4, 7, 6, 4, 7, 6, 5, 7, 7, 6, 5, 7, 15, 126, 175, 227, 131, 67, 3, 3, 0, 31, 112, 71, 71, 7, 7, 7, 224, 160, 32, 96, 224, 160, 32, 96, 0, 64, 192, 128, 0, 64, 192, 128, 240, 14, 241, 111, 97, 98, 96, 96, 0, 240, 14, 194, 194, 192, 192, 192 };
        private readonly int[] _zelda1Up = { 0, 28, 42, 127, 34, 85, 99, 127, 0, 0, 28, 0, 93, 62, 28, 34, 127, 62, 62, 62, 127, 127, 127, 62, 127, 93, 65, 93, 62, 62, 28, 0, };
        private readonly int[] _zeldaOw = { 0, 60, 94, 127, 171, 134, 78, 191, 0, 0, 96, 8, 116, 122, 48, 12, 251, 246, 172, 190, 63, 127, 127, 125, 60, 56, 16, 4, 30, 62, 60, 0, 60, 94, 127, 171, 134, 78, 191, 255, 0, 96, 8, 116, 122, 48, 8, 60, 250, 188, 156, 58, 62, 62, 62, 62, 54, 30, 6, 28, 28, 28, 28, 0, 28, 62, 127, 62, 62, 42, 62, 127, 0, 0, 0, 65, 99, 20, 0, 66, 62, 62, 62, 62, 127, 127, 126, 56, 99, 29, 1, 29, 62, 62, 56, 0, 28, 42, 127, 34, 85, 99, 127, 127, 0, 28, 0, 93, 62, 28, 34, 127, 62, 62, 62, 62, 127, 127, 126, 56, 93, 93, 64, 92, 62, 62, 24, 0, };
        private readonly int[] _zeldaSleeper = { 0, 0, 3, 4, 8, 17, 23, 23, 0, 0, 3, 7, 15, 31, 27, 26, 39, 47, 23, 31, 19, 45, 62, 62, 58, 60, 20, 30, 30, 63, 63, 63, 25, 63, 79, 143, 135, 131, 193, 112, 25, 62, 120, 252, 254, 254, 255, 127, 0, 128, 207, 215, 239, 239, 231, 193, 0, 128, 79, 95, 127, 63, 63, 255, 0, 0, 239, 56, 253, 255, 255, 255, 0, 0, 239, 255, 231, 227, 225, 255, 0, 0, 1, 227, 255, 255, 245, 255, 0, 0, 1, 227, 31, 31, 31, 255, };
        private readonly int[] _zeldaTitle = { 56, 84, 254, 70, 170, 199, 254, 252, 1, 57, 1, 185, 125, 56, 71, 255, 124, 124, 124, 124, 254, 254, 254, 124, 186, 184, 128, 184, 124, 124, 56, 0, };
        private readonly int[] _zeldaEnd1 = { 0, 1, 14, 31, 31, 15, 63, 63, 0, 0, 1, 0, 0, 6, 5, 29, 31, 15, 15, 7, 5, 9, 4, 6, 15, 3, 7, 0, 2, 6, 3, 1, 0, 248, 36, 114, 245, 247, 252, 248, 0, 0, 216, 172, 42, 104, 96, 96, 252, 240, 248, 196, 140, 28, 62, 30, 192, 192, 128, 184, 112, 224, 192, 224, 230, 254, 255, 63, 5, 9, 15, 7, 1, 225, 64, 0, 2, 6, 0, 2, 7, 15, 15, 15, 15, 7, 7, 15, 3, 7, 6, 6, 0, 0, 0, 0, 111, 254, 252, 252, 252, 248, 252, 248, 144, 0, 112, 120, 120, 48, 0, 112, 248, 248, 120, 116, 124, 58, 30, 62, 112, 112, 32, 8, 0, 4, 0, 0, 8, 20, 19, 39, 47, 87, 95, 149, 0, 8, 12, 24, 16, 40, 40, 98, 151, 191, 127, 63, 31, 15, 15, 7, 96, 96, 48, 24, 8, 4, 7, 3, 3, 3, 7, 15, 15, 15, 31, 31, 1, 0, 3, 7, 7, 7, 15, 15, 31, 31, 31, 31, 31, 31, 31, 15, 15, 15, 15, 11, 15, 11, 11, 0, 0, 128, 160, 96, 192, 96, 32, 32, 0, 0, 64, 128, 0, 128, 192, 192, 32, 192, 128, 192, 192, 224, 224, 192, 192, 0, 0, 128, 128, 128, 64, 128, 162, 157, 192, 255, 0, 128, 128, 128, 64, 98, 63, 0, 0, 0, 0, 0, 192, 192, 192, 192, 192, 224, 224, 224, 0, 128, 128, 128, 128, 192, 192, 0, };
        private readonly int[] _zeldaEnd2 = { 0, 0, 3, 4, 8, 17, 23, 23, 0, 0, 3, 7, 15, 31, 27, 26, 39, 47, 23, 31, 19, 45, 62, 62, 58, 60, 20, 30, 30, 63, 63, 63, 25, 63, 79, 143, 135, 131, 193, 112, 25, 62, 120, 252, 254, 254, 255, 127, 0, 128, 207, 215, 239, 239, 231, 193, 0, 128, 79, 95, 127, 63, 63, 255, 0, 0, 239, 56, 253, 255, 255, 255, 0, 0, 239, 255, 231, 227, 225, 255, 0, 0, 1, 227, 255, 255, 245, 255, 0, 0, 1, 227, 31, 31, 31, 255, 255, 129, 255, 255, 153, 153, 153, 153, 1, 127, 255, 17, 119, 119, 119, 119, 16, 16, 16, 16, 0, 0, 16, 0, 8, 8, 8, 8, 24, 0, 8, 24, 0, 0, 3, 4, 8, 17, 23, 23, 0, 0, 3, 7, 15, 31, 27, 26, 39, 47, 23, 31, 19, 45, 62, 62, 58, 60, 20, 30, 30, 63, 63, 63, 0, 0, 192, 32, 16, 240, 248, 248, 0, 0, 192, 224, 240, 240, 176, 24, 248, 248, 240, 224, 224, 208, 208, 80, 168, 8, 208, 32, 224, 112, 240, 240, 62, 30, 30, 30, 30, 62, 127, 127, 63, 31, 31, 31, 31, 39, 71, 3, 24, 28, 31, 20, 49, 195, 131, 3, 248, 252, 255, 255, 255, 254, 254, 255, };
        private readonly int[] _zeldaEnd3 = { 8, 23, 19, 39, 46, 90, 80, 155, 0, 8, 13, 24, 19, 37, 47, 100, 149, 190, 126, 63, 31, 15, 15, 7, 98, 97, 49, 26, 15, 7, 7, 3, 7, 3, 7, 15, 15, 15, 31, 31, 3, 1, 0, 7, 7, 7, 15, 15, 31, 31, 31, 31, 31, 31, 31, 15, 15, 15, 15, 11, 15, 7, 7, 0, };
        private readonly int[] _zeldaHead = { 0, 0, 32, 63, 84, 124, 56, 0, 0, 60, 126, 10, 43, 3, 7, 0, };
        private readonly int[] _zeldaRaft = { 3, 5, 7, 10, 8, 4, 11, 255, 0, 6, 0, 7, 7, 3, 0, 3, 143, 255, 134, 255, 143, 255, 135, 255, 115, 3, 121, 3, 119, 3, 120, 0, 128, 192, 224, 160, 96, 224, 224, 255, 0, 0, 128, 64, 160, 0, 128, 192, 161, 127, 225, 255, 241, 255, 225, 255, 222, 192, 30, 192, 238, 192, 30, 0, };
        private readonly int[] _zeldaBeam = { };

        private readonly int[] _dksprite = { 19, 63, 55, 34, 224, 176, 233, 230, 0, 19, 10, 29, 31, 79, 86, 89, 245, 164, 148, 175, 228, 248, 249, 252, 91, 91, 75, 80, 27, 103, 119, 59, 2, 247, 79, 7, 39, 98, 130, 12, 0, 2, 246, 254, 252, 156, 124, 248, 12, 56, 248, 132, 210, 126, 18, 146, 240, 224, 128, 120, 60, 128, 236, 236, 190, 127, 23, 29, 59, 100, 113, 42, 93, 6, 9, 10, 4, 31, 46, 20, 36, 36, 100, 132, 244, 28, 0, 0, 24, 24, 24, 120, 24, 0, 0, 0, 54, 202, 132, 140, 216, 248, 136, 152, 204, 52, 120, 120, 48, 0, 112, 112, 136, 216, 244, 68, 34, 53, 38, 120, 112, 32, 72, 56, 28, 14, 24, 0, 0, 19, 63, 55, 34, 224, 176, 233, 0, 0, 19, 10, 29, 31, 79, 86, 230, 245, 164, 148, 175, 228, 248, 249, 89, 91, 91, 75, 80, 27, 103, 119, 0, 2, 247, 79, 7, 39, 98, 130, 0, 0, 2, 246, 254, 252, 156, 124, 12, 12, 56, 248, 132, 210, 126, 18, 248, 240, 224, 128, 120, 60, 128, 236, 252, 190, 127, 23, 29, 38, 59, 21, 59, 93, 6, 9, 10, 25, 4, 14, 17, 50, 62, 34, 18, 18, 42, 126, 14, 12, 16, 28, 12, 12, 28, 0, 146, 54, 202, 132, 140, 216, 248, 136, 236, 204, 52, 120, 120, 48, 0, 112, 84, 76, 58, 49, 25, 11, 10, 12, 56, 48, 4, 30, 6, 6, 4, 0, 190, 127, 23, 25, 36, 63, 18, 22, 93, 6, 9, 14, 27, 0, 13, 13, 26, 31, 15, 14, 11, 15, 2, 3, 5, 8, 1, 1, 4, 0, 1, 0, 54, 202, 132, 140, 216, 240, 32, 96, 204, 52, 120, 120, 48, 0, 192, 192, 64, 192, 160, 32, 16, 80, 48, 224, 128, 0, 64, 192, 224, 224, 192, 0, 16, 59, 60, 56, 57, 17, 24, 36, 0, 16, 27, 31, 15, 14, 7, 27, 42, 42, 119, 127, 126, 126, 159, 191, 29, 29, 8, 48, 57, 29, 110, 99, 50, 255, 187, 17, 1, 131, 101, 25, 0, 50, 212, 238, 254, 124, 154, 230, 43, 9, 138, 254, 41, 31, 73, 139, 246, 246, 116, 0, 222, 224, 246, 118, 155, 168, 76, 11, 12, 16, 31, 10, 100, 71, 3, 4, 7, 15, 0, 7, 24, 29, 38, 68, 164, 168, 120, 0, 7, 10, 24, 56, 88, 112, 0, 0, 241, 146, 172, 140, 252, 36, 248, 200, 142, 108, 112, 112, 0, 248, 0, 48, 232, 120, 100, 34, 17, 11, 5, 3, 48, 0, 56, 28, 14, 6, 2, 0, 48, 112, 113, 115, 117, 116, 127, 254, 16, 48, 48, 49, 51, 51, 48, 49, 124, 156, 204, 142, 83, 184, 142, 135, 3, 99, 115, 113, 44, 71, 115, 120, 0, 0, 128, 192, 184, 6, 143, 71, 0, 0, 0, 0, 192, 248, 114, 254, 7, 6, 36, 248, 136, 164, 116, 152, 254, 252, 248, 128, 112, 120, 136, 224, 68, 37, 20, 12, 6, 11, 20, 19, 59, 27, 11, 3, 1, 6, 11, 12, 58, 54, 38, 68, 88, 112, 0, 0, 20, 24, 24, 56, 48, 0, 0, 0, 232, 8, 8, 8, 24, 136, 104, 56, 16, 240, 240, 240, 240, 112, 144, 224, 200, 168, 155, 205, 113, 115, 125, 0, 48, 80, 96, 50, 14, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 27, 31, 15, 31, 127, 63, 15, 17, 25, 28, 9, 1, 112, 54, 6, 190, 127, 23, 25, 36, 63, 17, 100, 93, 6, 9, 14, 27, 0, 14, 31, 97, 123, 46, 100, 68, 68, 148, 252, 30, 36, 16, 56, 56, 56, 120, 0, 1, 3, 3, 2, 2, 3, 14, 18, 0, 1, 0, 1, 1, 0, 1, 13, 23, 22, 43, 42, 47, 36, 70, 90, 13, 13, 28, 29, 24, 27, 57, 49, 48, 255, 116, 32, 2, 6, 152, 96, 0, 48, 175, 223, 255, 249, 103, 159, 80, 67, 79, 252, 66, 1, 16, 8, 191, 190, 184, 3, 189, 254, 255, 255, 74, 82, 35, 2, 7, 4, 7, 2, 49, 33, 0, 1, 1, 3, 0, 1, 5, 14, 15, 19, 33, 106, 100, 60, 3, 1, 6, 14, 30, 52, 24, 0, 1, 1, 131, 126, 2, 9, 255, 83, 254, 254, 124, 128, 252, 254, 0, 140, 77, 75, 143, 155, 18, 35, 41, 63, 134, 132, 2, 6, 12, 28, 30, 0, 224, 240, 248, 248, 124, 60, 60, 206, 0, 96, 112, 112, 184, 216, 200, 132, 207, 147, 201, 45, 154, 226, 140, 248, 0, 14, 6, 194, 228, 28, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 255, 127, 63, 0, 0, 0, 0, 0, 127, 63, 0, 0, 0, 0, 14, 15, 6, 8, 9, 62, 77, 0, 0, 6, 1, 7, 6, 1, 51, 76, 92, 255, 196, 214, 207, 61, 2, 51, 51, 0, 187, 185, 48, 2, 1, 0, 253, 39, 3, 131, 131, 1, 5, 0, 4, 249, 255, 255, 126, 254, 254, 18, 127, 225, 37, 147, 253, 1, 131, 252, 192, 30, 222, 236, 2, 254, 126, 0, 0, 128, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 193, 64, 48, 56, 47, 82, 207, 191, 63, 63, 31, 7, 24, 47, 48, 169, 204, 242, 201, 72, 68, 148, 252, 119, 51, 65, 112, 48, 56, 120, 0, 128, 128, 128, 64, 192, 192, 64, 192, 0, 0, 0, 128, 128, 0, 128, 0, 64, 48, 200, 196, 204, 36, 20, 56, 128, 192, 48, 248, 56, 24, 8, 0, 0, 0, 0, 0, 39, 125, 113, 116, 0, 0, 0, 0, 0, 35, 63, 63, 48, 32, 36, 39, 49, 77, 115, 85, 31, 31, 27, 28, 14, 50, 12, 46, 0, 0, 0, 0, 228, 158, 142, 14, 0, 0, 0, 0, 0, 228, 252, 252, 12, 68, 36, 228, 136, 148, 170, 250, 248, 248, 216, 56, 112, 104, 92, 4, 117, 43, 43, 34, 36, 68, 86, 111, 14, 28, 28, 29, 27, 59, 57, 16, 95, 143, 239, 127, 7, 7, 7, 2, 35, 115, 51, 3, 3, 3, 2, 0, 22, 84, 172, 76, 90, 162, 94, 246, 232, 232, 88, 176, 164, 220, 160, 24, 145, 139, 133, 133, 131, 128, 0, 0, 14, 6, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 127, 110, 0, 0, 0, 0, 0, 0, 38, 21, 68, 64, 96, 83, 76, 106, 72, 41, 59, 63, 31, 44, 51, 55, 55, 23, 0, 0, 0, 0, 0, 4, 238, 158, 0, 0, 0, 0, 0, 0, 4, 236, 14, 78, 196, 4, 24, 24, 112, 248, 252, 248, 56, 248, 240, 224, 192, 0, 255, 232, 224, 242, 249, 252, 191, 191, 0, 23, 223, 239, 119, 27, 76, 66, 183, 179, 191, 162, 98, 18, 37, 127, 72, 76, 80, 92, 28, 12, 30, 0, 12, 164, 124, 36, 44, 120, 136, 16, 240, 120, 128, 216, 216, 128, 112, 224, 48, 240, 232, 196, 226, 17, 37, 62, 224, 0, 80, 56, 28, 14, 30, 0, 0, 32, 32, 114, 120, 122, 250, 248, 0, 36, 38, 84, 75, 71, 135, 135, 252, 252, 220, 138, 1, 1, 0, 0, 131, 131, 131, 129, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 10, 24, 0, 4, 6, 4, 3, 7, 15, 31, 28, 30, 30, 30, 31, 31, 12, 8, 27, 29, 29, 29, 24, 24, 8, 8, 8, 9, 88, 92, 116, 116, 102, 110, 0, 0, 0, 0, 8, 8, 24, 16, 203, 195, 137, 153, 219, 102, 60, 0, 52, 60, 126, 126, 60, 24, 0, 0, 0, 0, 0, 0, 63, 127, 255, 127, 0, 0, 0, 0, 0, 63, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 30, 0, 0, 0, 0, 0, 0, 0, 13, 12, 17, 19, 28, 26, 24, 24, 8, 3, 15, 12, 3, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 250, 79, 0, 0, 0, 0, 0, 0, 8, 242, 7, 7, 6, 2, 10, 36, 252, 132, 254, 254, 252, 252, 252, 248, 128, 120, 31, 39, 158, 184, 201, 151, 142, 250, 0, 24, 1, 7, 55, 120, 113, 1, 129, 1, 3, 2, 2, 4, 9, 63, 0, 0, 1, 1, 1, 3, 7, 0, 210, 63, 9, 113, 65, 195, 225, 190, 60, 192, 246, 206, 190, 62, 30, 1, 114, 239, 140, 114, 33, 64, 64, 128, 143, 48, 115, 129, 192, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 192, 64, 96, 176, 46, 229, 97, 62, 0, 128, 128, 192, 208, 30, 62, 0, 0, 0, 0, 0, 6, 14, 6, 6, 0, 0, 0, 0, 4, 12, 4, 4, 6, 6, 6, 6, 15, 0, 0, 0, 4, 4, 4, 4, 14, 0, 0, 0, 68, 68, 198, 198, 238, 238, 254, 254, 0, 0, 0, 0, 0, 0, 40, 124, 124, 124, 254, 254, 255, 127, 63, 127, 56, 16, 68, 124, 124, 50, 14, 62, 254, 254, 254, 126, 252, 254, 254, 126, 92, 96, 124, 28, 96, 124, 124, 48, 126, 127, 127, 255, 254, 254, 126, 60, 12, 62, 62, 14, 112, 124, 60, 0, 0, 60, 64, 132, 130, 130, 0, 16, 0, 60, 126, 231, 195, 195, 255, 24, 16, 16, 16, 22, 16, 16, 16, 0, 24, 24, 24, 30, 30, 30, 24, 0, 0, 84, 56, 124, 68, 68, 40, 198, 0, 84, 40, 0, 56, 56, 16, 254, 171, 147, 57, 16, 0, 0, 0, 0, 215, 215, 131, 40, 48, 48, 32, 32, 0, 84, 56, 125, 199, 199, 238, 0, 0, 84, 40, 1, 187, 187, 214, 56, 40, 16, 56, 16, 0, 0, 0, 0, 84, 84, 130, 40, 48, 48, 32, 32, 3, 7, 3, 4, 6, 255, 143, 255, 0, 3, 4, 3, 1, 4, 119, 3, 159, 255, 151, 253, 139, 255, 142, 255, 100, 3, 104, 2, 116, 0, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 84, 60, 56, 16, 28, 56, 120, 0, 84, 62, 62, 28, 0, 60, 126, 124, 248, 252, 248, 252, 248, 112, 0, 126, 199, 219, 199, 223, 223, 255, 126, 255, 129, 129, 255, 255, 129, 129, 255, 255, 254, 254, 0, 255, 254, 254, 0, 255, 129, 129, 255, 255, 129, 129, 255, 255, 254, 254, 0, 255, 254, 254, 0, 255, 129, 129, 129, 129, 129, 129, 129, 255, 254, 254, 254, 230, 194, 194, 230, 129, 129, 129, 129, 129, 129, 129, 255, 238, 238, 230, 238, 254, 254, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 56, 254, 56, 16, 16, 16, 16, 16, 56, 254, 56, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 130, 64, 0, 129, 0, 68, 145, 17, 130, 64, 0, 129, 0, 68, 145, 0, 0, 0, 0, 7, 24, 38, 31, 0, 0, 0, 0, 0, 7, 25, 4, 127, 159, 65, 60, 252, 25, 19, 15, 12, 96, 190, 227, 3, 14, 12, 0, 0, 0, 56, 72, 144, 16, 40, 108, 0, 0, 0, 48, 96, 224, 200, 140, 28, 62, 126, 62, 63, 127, 255, 191, 236, 222, 150, 210, 203, 137, 21, 69, 1, 1, 3, 62, 64, 47, 242, 49, 0, 0, 0, 1, 63, 80, 129, 32, 0, 1, 2, 2, 2, 7, 8, 15, 0, 0, 1, 1, 1, 0, 7, 4, 63, 31, 31, 63, 123, 249, 125, 28, 205, 229, 229, 197, 129, 1, 129, 224, 140, 24, 48, 232, 102, 96, 48, 152, 112, 224, 204, 4, 129, 135, 192, 96, 0, 0, 0, 0, 0, 113, 216, 174, 0, 0, 0, 0, 0, 0, 32, 112, 183, 204, 116, 126, 16, 0, 0, 0, 120, 48, 8, 0, 0, 0, 0, 0, 0, 0, 0, 4, 3, 6, 21, 11, 0, 0, 0, 0, 0, 1, 3, 7, 15, 9, 6, 3, 4, 0, 0, 0, 3, 7, 1, 0, 0, 0, 0, 0, 11, 5, 20, 74, 0, 216, 0, 20, 0, 3, 12, 58, 16, 56, 64, 52, 32, 8, 48, 76, 17, 36, 5, 9, 224, 72, 16, 60, 1, 12, 3, 0, 0, 36, 24, 8, 14, 8, 9, 6, 0, 56, 0, 22, 17, 17, 18, 120, 99, 67, 3, 131, 199, 126, 60, 0, 252, 252, 252, 124, 56, 0, 0, 0, 16, 56, 108, 68, 100, 56, 0, 56, 0, 0, 16, 56, 24, 0, 0, 56, 56, 56, 56, 56, 56, 0, 0, 0, 56, 56, 56, 56, 57, 255, 126, 0, 0, 20, 252, 212, 212, 252, 132, 133, 0, 40, 128, 40, 168, 128, 121, 248, 142, 152, 241, 26, 60, 64, 126, 66, 241, 231, 142, 100, 0, 124, 0, 124, 0, 0, 36, 255, 36, 36, 36, 36, 0, 219, 219, 219, 255, 219, 219, 219, 36, 36, 255, 36, 36, 255, 219, 0, 219, 219, 219, 255, 219, 219, 219, 0, 0, 0, 0, 8, 9, 15, 15, 15, 0, 0, 15, 7, 6, 1, 2, 1, 15, 15, 15, 31, 63, 127, 123, 0, 2, 0, 0, 0, 16, 32, 0, 0, 0, 24, 8, 8, 8, 8, 24, 8, 0, 24, 16, 16, 16, 16, 0, 16, 24, 8, 24, 8, 8, 44, 70, 0, 0, 16, 0, 16, 16, 48, 120, 0, 0, 0, 24, 24, 24, 239, 247, 24, 0, 0, 24, 24, 24, 247, 239, 255, 24, 24, 24, 24, 24, 0, 0, 0, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0, 16, 0, 252, 254, 254, 16, 0, 0, 24, 252, 2, 0, 0, 24, 16, 16, 16, 16, 16, 16, 16, 16, 24, 24, 24, 24, 24, 24, 24, 24, 24, 211, 132, 194, 152, 24, 0, 16, 24, 219, 255, 189, 247, 102, 60, 24, 16, 16, 16, 16, 16, 16, 16, 0, 24, 24, 24, 24, 28, 24, 28, 0, 0, 0, 0, 0, 0, 96, 176, 176, 0, 0, 0, 0, 0, 64, 160, 160, 176, 176, 176, 176, 96, 0, 0, 0, 160, 160, 160, 160, 64, 0, 0, 0, 0, 0, 0, 0, 0, 102, 187, 187, 0, 0, 0, 0, 0, 68, 170, 170, 187, 187, 187, 187, 102, 0, 0, 0, 170, 170, 170, 170, 68, 0, 0, 0, 0, 0, 0, 0, 96, 230, 107, 107, 0, 0, 0, 0, 64, 196, 74, 74, 107, 107, 107, 107, 246, 0, 0, 0, 74, 74, 74, 74, 228, 0, 0, 0, 0, 0, 0, 0, 96, 182, 187, 59, 0, 0, 0, 0, 64, 164, 170, 42, 107, 203, 203, 203, 246, 0, 0, 0, 74, 138, 138, 138, 228, 0, 0, 0, 0, 0, 0, 0, 6, 11, 11, 3, 0, 0, 0, 0, 4, 10, 10, 2, 6, 12, 12, 12, 15, 0, 0, 0, 4, 8, 8, 8, 14, 0, 0, 0, 0, 0, 0, 0, 15, 12, 14, 11, 0, 0, 0, 0, 14, 8, 12, 10, 3, 3, 11, 11, 6, 0, 0, 0, 2, 2, 10, 10, 4, 0, 0, 0, 0, 65, 73, 34, 20, 73, 42, 93, 0, 65, 127, 93, 107, 54, 20, 34, 65, 99, 127, 34, 62, 8, 0, 54, 62, 28, 0, 93, 0, 54, 54, 0, 0, 0, 0, 0, 4, 2, 49, 33, 0, 0, 0, 0, 56, 64, 176, 160, 1, 129, 66, 60, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 255, 0, 153, 0, 0, 153, 0, 255, 0, 255, 153, 153, 153, 153, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 60, 84, 112, 0, 0, 0, 24, 62, 127, 255, 255, 42, 80, 16, 0, 0, 0, 0, 0, 255, 255, 254, 126, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 15, 31, 31, 31, 31, 15, 0, 1, 8, 16, 1, 16, 22, 0, 0, 0, 0, 15, 24, 50, 39, 102, 0, 0, 0, 0, 7, 13, 26, 25, 64, 64, 64, 64, 96, 120, 63, 31, 63, 63, 63, 63, 31, 7, 0, 0, 0, 0, 0, 0, 7, 28, 48, 98, 0, 0, 0, 0, 0, 3, 15, 29, 71, 198, 128, 128, 192, 240, 127, 63, 58, 57, 127, 127, 63, 15, 0, 0, 0, 31, 32, 120, 124, 252, 254, 254, 0, 0, 31, 7, 51, 123, 93, 93, 255, 255, 126, 64, 32, 28, 3, 0, 124, 56, 1, 63, 31, 3, 0, 0, 0, 0, 128, 96, 31, 2, 39, 24, 0, 0, 0, 128, 224, 252, 216, 231, 9, 146, 33, 2, 12, 48, 192, 0, 246, 108, 222, 252, 240, 192, 0, 0, 0, 3, 12, 27, 22, 44, 174, 31, 7, 12, 19, 36, 41, 83, 209, 164, 15, 79, 135, 0, 2, 4, 4, 0, 150, 114, 232, 199, 142, 140, 196, 64, 0, 192, 48, 216, 104, 53, 116, 248, 224, 48, 200, 36, 148, 203, 139, 37, 242, 240, 224, 0, 64, 32, 32, 0, 110, 78, 18, 226, 114, 52, 32, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 3, 63, 127, 127, 255, 255, 95, 0, 0, 1, 62, 6, 99, 89, 21, 31, 7, 35, 127, 127, 63, 1, 0, 6, 4, 0, 42, 60, 0, 0, 0, 0, 240, 248, 252, 252, 255, 255, 254, 0, 0, 240, 24, 24, 24, 243, 226, 255, 255, 254, 252, 255, 255, 255, 14, 232, 203, 18, 32, 104, 19, 6, 0, 0, 240, 248, 252, 255, 255, 254, 255, 0, 0, 240, 24, 24, 27, 242, 224, 255, 254, 252, 252, 254, 255, 254, 28, 235, 202, 16, 40, 80, 14, 24, 0, 7, 8, 22, 40, 32, 0, 31, 63, 0, 7, 15, 31, 31, 63, 32, 10, 63, 71, 83, 38, 124, 204, 222, 123, 0, 56, 44, 25, 3, 51, 33, 0, 240, 12, 6, 2, 3, 1, 1, 131, 0, 240, 248, 252, 252, 254, 254, 124, 199, 255, 94, 83, 89, 202, 249, 183, 56, 0, 160, 172, 166, 52, 6, 0, 7, 8, 22, 60, 67, 153, 189, 190, 0, 7, 15, 3, 60, 102, 102, 65, 190, 190, 156, 65, 127, 145, 167, 89, 65, 99, 107, 62, 0, 110, 88, 0, 240, 12, 6, 2, 3, 129, 193, 195, 0, 240, 248, 252, 252, 126, 62, 60, 227, 255, 254, 148, 146, 18, 50, 36, 28, 0, 0, 104, 108, 236, 204, 216, 0, 0, 0, 0, 60, 102, 219, 189, 0, 0, 0, 0, 0, 24, 60, 126, 189, 219, 102, 60, 0, 0, 0, 0, 126, 60, 24, 0, 0, 0, 0, 0, 131, 147, 69, 41, 147, 85, 186, 131, 131, 255, 187, 215, 109, 40, 69, 124, 198, 252, 128, 124, 16, 0, 108, 108, 56, 0, 124, 128, 108, 108, 0, 0, 0, 0, 0, 0, 0, 16, 16, 56, 0, 0, 0, 0, 0, 16, 16, 56, 56, 124, 124, 254, 0, 0, 0, 0, 56, 124, 124, 254, 0, 0, 0, 0, 0, 60, 126, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 127, 127, 63, 31, 15, 7, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 3, 7, 7, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 31, 31, 63, 63, 127, 127, 255, 255, 0, 15, 63, 63, 59, 31, 63, 63, 0, 0, 16, 8, 5, 9, 27, 26, 63, 31, 4, 8, 8, 31, 23, 79, 28, 4, 3, 7, 7, 0, 11, 3, 0, 128, 192, 192, 224, 224, 240, 240, 0, 0, 0, 0, 0, 0, 0, 0, 240, 240, 248, 120, 120, 248, 240, 208, 0, 0, 0, 128, 128, 0, 128, 32, 255, 255, 127, 0, 0, 1, 1, 1, 71, 254, 0, 0, 0, 0, 0, 0, 3, 2, 2, 2, 2, 4, 4, 15, 0, 1, 1, 1, 1, 3, 3, 0, 208, 144, 56, 200, 132, 4, 4, 2, 32, 96, 192, 48, 120, 248, 248, 252, 2, 2, 2, 3, 1, 1, 5, 212, 252, 252, 252, 252, 254, 254, 250, 43, 32, 19, 39, 207, 207, 239, 239, 247, 192, 224, 192, 3, 7, 23, 23, 11, 239, 119, 127, 63, 63, 31, 15, 15, 1, 0, 6, 15, 15, 15, 7, 7, 15, 7, 7, 15, 31, 31, 15, 17, 7, 3, 0, 7, 15, 15, 0, 14, 18, 38, 36, 124, 120, 248, 248, 240, 12, 24, 24, 0, 0, 0, 0, 0, 128, 240, 248, 248, 144, 92, 68, 8, 0, 128, 0, 0, 96, 160, 184, 240, 48, 16, 224, 224, 240, 224, 224, 231, 192, 224, 0, 64, 96, 192, 128, 128, 248, 253, 252, 224, 240, 240, 160, 32, 135, 2, 0, 64, 96, 0, 64, 192, 16, 144, 144, 240, 224, 224, 240, 248, 224, 96, 96, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7, 7, 7, 3, 3, 3, 3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7, 7, 7, 96, 96, 96, 96, 96, 96, 96, 96, 192, 192, 192, 192, 192, 192, 192, 192, 96, 96, 96, 96, 96, 96, 96, 96, 192, 192, 192, 192, 192, 192, 192, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 119, 120, 30, 127, 127, 27, 255, 255, 191, 255, 255, 255, 255, 255, 135, 127, 63, 255, 159, 128, 97, 120, 255, 159, 255, 255, 255, 255, 255, 255, 15, 60, 195, 239, 241, 248, 248, 97, 255, 255, 253, 243, 255, 255, 255, 255, 0, 112, 32, 12, 6, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 3, 207, 15, 111, 67, 1, 15, 99, 253, 247, 247, 255, 255, 255, 247, 255, 134, 240, 252, 254, 252, 252, 240, 0, 255, 31, 255, 255, 255, 255, 255, 255, 3, 207, 15, 111, 67, 1, 15, 99, 253, 247, 247, 255, 255, 255, 247, 255, 63, 127, 255, 255, 63, 7, 113, 0, 222, 191, 191, 255, 255, 255, 255, 255, 15, 60, 195, 239, 241, 248, 248, 97, 255, 255, 253, 243, 255, 255, 255, 255, 3, 6, 5, 15, 15, 13, 14, 5, 3, 7, 6, 13, 12, 14, 15, 6, 4, 7, 6, 4, 4, 7, 6, 4, 7, 6, 5, 7, 7, 6, 5, 7, 0, 64, 128, 192, 192, 160, 64, 128, 192, 160, 96, 48, 48, 80, 176, 96, 32, 224, 32, 96, 224, 160, 32, 96, 192, 0, 192, 128, 0, 64, 192, 128, 4, 7, 6, 4, 4, 7, 6, 4, 7, 6, 5, 7, 7, 6, 5, 7, 15, 126, 175, 227, 131, 67, 3, 3, 0, 31, 112, 71, 71, 7, 7, 7, 224, 160, 32, 96, 224, 160, 32, 96, 0, 64, 192, 128, 0, 64, 192, 128, 240, 14, 241, 111, 97, 98, 96, 96, 0, 240, 14, 194, 194, 192, 192, 192 };
        private readonly int[] _dk1Up = { 0, 65, 73, 34, 20, 73, 42, 93, 0, 65, 127, 93, 107, 54, 20, 34, 65, 99, 127, 34, 62, 8, 0, 54, 62, 28, 0, 93, 0, 54, 54, 0, };
        private readonly int[] _dkOw = { 0, 193, 131, 179, 226, 198, 76, 182, 0, 65, 127, 78, 28, 56, 48, 8, 198, 222, 188, 130, 22, 83, 103, 225, 56, 32, 0, 60, 40, 36, 0, 0, 193, 131, 179, 226, 198, 76, 182, 199, 65, 127, 78, 28, 56, 48, 8, 56, 195, 191, 130, 60, 8, 12, 28, 56, 60, 0, 60, 2, 16, 16, 0, 0, 93, 65, 65, 65, 73, 62, 67, 67, 65, 127, 62, 62, 54, 0, 60, 60, 31, 33, 66, 126, 8, 6, 48, 48, 32, 30, 61, 0, 54, 48, 0, 0, 65, 73, 34, 20, 73, 42, 125, 65, 65, 127, 93, 107, 54, 20, 2, 62, 35, 63, 66, 62, 8, 6, 48, 48, 28, 0, 61, 0, 54, 48, 0, 0, };
        private readonly int[] _dkSleeper = { 0, 0, 0, 0, 7, 15, 23, 27, 0, 0, 0, 0, 7, 7, 31, 29, 62, 63, 62, 63, 63, 31, 35, 34, 55, 52, 57, 60, 62, 31, 62, 63, 12, 31, 63, 63, 119, 127, 119, 127, 12, 31, 44, 54, 127, 118, 124, 119, 12, 158, 223, 239, 247, 227, 251, 252, 12, 146, 81, 44, 62, 28, 252, 255, 0, 0, 0, 129, 206, 240, 100, 232, 0, 0, 0, 129, 79, 127, 223, 255, 0, 0, 0, 224, 24, 4, 2, 53, 0, 0, 0, 224, 248, 252, 254, 255, };
        private readonly int[] _dkTitle = { 131, 147, 69, 41, 147, 85, 186, 131, 131, 255, 187, 215, 109, 40, 69, 124, 198, 252, 128, 124, 16, 0, 108, 108, 56, 0, 124, 128, 108, 108, 0, 0, };
        private readonly int[] _dkEnd1 = { 0, 15, 63, 63, 59, 31, 63, 63, 0, 0, 16, 8, 5, 9, 27, 26, 63, 31, 4, 8, 8, 31, 23, 79, 28, 4, 3, 7, 7, 0, 11, 3, 0, 128, 192, 192, 224, 224, 240, 240, 0, 0, 0, 0, 0, 0, 0, 0, 240, 240, 248, 120, 120, 248, 240, 208, 0, 0, 0, 128, 128, 0, 128, 32, 255, 255, 127, 0, 0, 1, 1, 1, 71, 254, 0, 0, 0, 0, 0, 0, 3, 2, 2, 2, 2, 4, 4, 15, 0, 1, 1, 1, 1, 3, 3, 0, 208, 144, 56, 200, 132, 4, 4, 2, 32, 96, 192, 48, 120, 248, 248, 252, 2, 2, 2, 3, 1, 1, 5, 212, 252, 252, 252, 252, 254, 254, 250, 43, 32, 19, 39, 207, 207, 239, 239, 247, 192, 224, 192, 3, 7, 23, 23, 11, 239, 119, 127, 63, 63, 31, 15, 15, 1, 0, 6, 15, 15, 15, 7, 7, 15, 7, 7, 15, 31, 31, 15, 17, 7, 3, 0, 7, 15, 15, 0, 14, 18, 38, 36, 124, 120, 248, 248, 240, 12, 24, 24, 0, 0, 0, 0, 0, 128, 240, 248, 248, 144, 92, 68, 8, 0, 128, 0, 0, 96, 160, 184, 240, 48, 16, 224, 224, 240, 224, 224, 231, 192, 224, 0, 64, 96, 192, 128, 128, 248, 253, 252, 224, 240, 240, 160, 32, 135, 2, 0, 64, 96, 0, 64, 192, 16, 144, 144, 240, 224, 224, 240, 248, 224, 96, 96, 0, 0, 0, 0, 0, };
        private readonly int[] _dkEnd2 = { 0, 0, 0, 0, 7, 15, 23, 27, 0, 0, 0, 0, 7, 7, 31, 29, 62, 63, 62, 63, 63, 31, 35, 34, 55, 52, 57, 60, 62, 31, 62, 63, 12, 31, 63, 63, 119, 127, 119, 127, 12, 31, 44, 54, 127, 118, 124, 119, 12, 158, 223, 239, 247, 227, 251, 252, 12, 146, 81, 44, 62, 28, 252, 255, 0, 0, 0, 129, 206, 240, 100, 232, 0, 0, 0, 129, 79, 127, 223, 255, 0, 0, 0, 224, 24, 4, 2, 53, 0, 0, 0, 224, 248, 252, 254, 255, 255, 129, 255, 255, 153, 153, 153, 153, 1, 127, 255, 17, 119, 119, 119, 119, 16, 16, 16, 16, 0, 0, 16, 0, 8, 8, 8, 8, 24, 0, 8, 24, 0, 0, 0, 0, 7, 15, 23, 27, 0, 0, 0, 0, 7, 7, 31, 29, 62, 63, 62, 63, 63, 31, 35, 34, 55, 52, 57, 60, 62, 31, 62, 63, 0, 0, 0, 0, 0, 192, 224, 96, 0, 0, 0, 0, 0, 192, 224, 160, 192, 224, 160, 224, 224, 192, 64, 160, 96, 32, 96, 32, 96, 192, 192, 96, 60, 60, 28, 56, 57, 61, 125, 255, 63, 39, 7, 15, 15, 14, 31, 31, 32, 48, 48, 224, 240, 128, 6, 15, 224, 240, 240, 231, 63, 127, 255, 255, };
        private readonly int[] _dkEnd3 = { 16, 19, 23, 47, 223, 206, 234, 240, 96, 224, 227, 198, 8, 17, 21, 15, 235, 121, 124, 63, 63, 31, 15, 15, 4, 6, 11, 28, 30, 15, 15, 7, 15, 7, 7, 15, 31, 31, 15, 17, 7, 6, 1, 6, 15, 15, 3, 14, 18, 38, 36, 124, 120, 248, 248, 240, 12, 24, 24, 0, 0, 0, 0, 0, };
        private readonly int[] _dkHead = { 0, 28, 14, 55, 212, 124, 56, 0, 0, 124, 254, 11, 42, 3, 4, 0, };
        private readonly int[] _drops = { 0x8a, 0x8b, 0x8c, 0x8d, 0x90, 0x91, 0x92, 0x88 };
        private readonly int[] _dkRaft = { 8, 8, 11, 14, 12, 4, 11, 252, 8, 15, 4, 1, 3, 3, 0, 3, 252, 255, 252, 255, 255, 255, 255, 255, 115, 0, 123, 0, 120, 0, 126, 0, 16, 16, 16, 32, 96, 192, 96, 127, 16, 240, 224, 192, 128, 0, 128, 128, 63, 255, 63, 63, 255, 255, 255, 255, 206, 0, 206, 192, 30, 0, 62, 0, };
        private readonly int[] _dkBeam = { };

        private readonly int[] _errorsprite = { 0, 15, 63, 127, 112, 38, 64, 56, 0, 0, 0, 0, 15, 25, 63, 7, 37, 39, 31, 31, 15, 29, 63, 59, 26, 24, 0, 0, 4, 15, 29, 31, 0, 128, 224, 208, 152, 152, 56, 248, 0, 0, 0, 32, 96, 96, 192, 0, 240, 248, 252, 248, 204, 132, 134, 194, 0, 0, 120, 128, 48, 120, 120, 60, 95, 119, 127, 127, 127, 60, 56, 124, 59, 47, 63, 60, 24, 3, 7, 3, 79, 70, 38, 34, 23, 127, 255, 0, 48, 56, 24, 28, 8, 0, 0, 0, 194, 194, 132, 196, 206, 254, 127, 127, 188, 188, 120, 120, 180, 12, 158, 190, 254, 140, 68, 67, 35, 31, 7, 31, 0, 112, 56, 60, 28, 0, 0, 0, 0, 15, 63, 127, 112, 38, 64, 56, 0, 0, 0, 0, 15, 25, 63, 7, 37, 39, 31, 31, 15, 29, 63, 59, 26, 24, 0, 0, 4, 15, 29, 31, 0, 128, 224, 208, 152, 152, 56, 248, 0, 0, 0, 32, 96, 96, 192, 0, 240, 248, 252, 248, 204, 132, 134, 194, 0, 0, 120, 128, 48, 120, 120, 60, 95, 119, 127, 127, 127, 60, 56, 60, 59, 47, 63, 60, 24, 3, 23, 3, 79, 79, 70, 38, 34, 23, 127, 255, 48, 48, 56, 24, 28, 8, 0, 0, 194, 194, 132, 196, 206, 254, 127, 127, 188, 188, 120, 120, 180, 12, 158, 140, 204, 196, 67, 35, 31, 7, 31, 0, 48, 56, 60, 28, 0, 0, 0, 0, 95, 119, 127, 127, 255, 127, 63, 191, 59, 47, 63, 63, 24, 129, 198, 92, 222, 12, 12, 4, 2, 2, 7, 15, 1, 3, 3, 3, 1, 1, 0, 0, 193, 225, 226, 194, 250, 254, 132, 132, 190, 158, 156, 188, 36, 32, 120, 120, 136, 112, 96, 32, 48, 48, 224, 224, 112, 128, 128, 192, 192, 192, 0, 0, 0, 0, 143, 127, 255, 255, 255, 84, 0, 0, 0, 0, 0, 0, 0, 43, 192, 129, 123, 79, 63, 63, 91, 127, 63, 126, 4, 48, 1, 1, 63, 33, 0, 0, 0, 192, 224, 176, 48, 112, 0, 0, 0, 0, 0, 64, 192, 128, 248, 252, 248, 204, 132, 134, 194, 194, 0, 24, 64, 48, 120, 120, 60, 188, 103, 99, 99, 115, 63, 127, 79, 79, 24, 31, 28, 44, 16, 0, 49, 48, 38, 34, 23, 127, 255, 0, 0, 0, 24, 28, 8, 0, 0, 0, 0, 0, 194, 36, 4, 14, 62, 255, 191, 142, 60, 216, 248, 244, 204, 62, 70, 112, 67, 35, 31, 7, 31, 0, 0, 0, 60, 28, 0, 0, 0, 0, 0, 0, 2, 14, 15, 29, 23, 12, 25, 62, 14, 15, 31, 31, 31, 14, 24, 16, 87, 68, 143, 156, 124, 63, 63, 47, 40, 57, 112, 107, 11, 0, 0, 20, 0, 128, 0, 128, 0, 0, 224, 254, 0, 128, 0, 128, 128, 0, 0, 0, 255, 159, 47, 151, 135, 129, 243, 255, 0, 96, 208, 104, 120, 126, 12, 0, 39, 46, 23, 29, 63, 51, 113, 113, 26, 23, 14, 11, 16, 12, 15, 14, 89, 95, 79, 38, 34, 23, 127, 255, 38, 32, 48, 25, 29, 8, 0, 0, 255, 230, 194, 227, 225, 225, 146, 130, 32, 152, 188, 220, 222, 30, 236, 124, 135, 159, 223, 255, 15, 7, 143, 125, 122, 102, 38, 14, 240, 248, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 27, 31, 15, 31, 127, 63, 15, 17, 25, 28, 9, 1, 112, 54, 6, 95, 119, 127, 127, 127, 60, 56, 60, 59, 47, 63, 60, 24, 3, 23, 3, 79, 79, 70, 38, 34, 23, 127, 255, 48, 48, 56, 24, 28, 8, 0, 0, 0, 15, 63, 127, 112, 38, 64, 56, 0, 0, 0, 0, 15, 25, 63, 7, 37, 39, 31, 31, 15, 29, 63, 59, 26, 24, 0, 0, 4, 15, 29, 31, 0, 128, 225, 214, 158, 155, 62, 251, 0, 0, 0, 33, 97, 102, 197, 4, 246, 252, 252, 252, 206, 134, 134, 194, 8, 0, 120, 128, 48, 120, 120, 60, 95, 119, 127, 127, 127, 60, 56, 124, 59, 47, 63, 60, 24, 3, 7, 3, 79, 70, 38, 34, 23, 127, 255, 0, 48, 56, 24, 28, 8, 0, 0, 0, 194, 194, 132, 196, 206, 254, 127, 127, 188, 188, 120, 120, 180, 12, 158, 190, 254, 140, 68, 67, 35, 31, 7, 31, 0, 112, 56, 60, 28, 0, 0, 0, 0, 0, 128, 64, 32, 32, 64, 224, 0, 0, 0, 128, 192, 192, 128, 96, 50, 14, 31, 27, 14, 4, 0, 0, 54, 31, 31, 31, 31, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 120, 108, 125, 59, 38, 0, 0, 48, 124, 252, 125, 127, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 206, 183, 139, 79, 51, 0, 0, 0, 183, 74, 116, 48, 0, 0, 15, 63, 127, 112, 38, 64, 120, 0, 0, 0, 0, 15, 25, 63, 7, 37, 39, 255, 63, 31, 29, 63, 187, 26, 24, 0, 192, 244, 239, 221, 95, 0, 128, 224, 208, 152, 152, 56, 248, 0, 0, 0, 32, 96, 96, 192, 0, 240, 248, 252, 248, 204, 132, 134, 194, 0, 0, 120, 128, 48, 120, 120, 60, 95, 119, 127, 127, 127, 127, 63, 63, 59, 47, 63, 63, 24, 1, 6, 28, 30, 12, 12, 4, 2, 2, 7, 15, 1, 3, 3, 3, 1, 1, 0, 0, 193, 225, 226, 194, 250, 254, 132, 132, 190, 158, 156, 188, 36, 32, 120, 120, 136, 112, 96, 32, 48, 48, 224, 224, 112, 128, 128, 192, 192, 192, 0, 0, 71, 63, 127, 127, 127, 42, 96, 64, 0, 0, 0, 0, 0, 21, 31, 63, 61, 39, 31, 31, 45, 59, 127, 95, 2, 24, 0, 0, 31, 23, 31, 44, 128, 224, 240, 216, 152, 56, 124, 254, 0, 0, 0, 32, 96, 192, 128, 12, 252, 230, 194, 195, 225, 240, 241, 253, 32, 24, 188, 188, 158, 207, 206, 18, 95, 79, 71, 103, 127, 127, 127, 162, 32, 51, 58, 24, 33, 48, 0, 93, 189, 204, 124, 5, 3, 3, 7, 1, 80, 56, 4, 7, 3, 7, 7, 3, 255, 194, 198, 255, 191, 142, 195, 35, 144, 60, 56, 6, 78, 112, 60, 220, 127, 255, 15, 129, 192, 96, 192, 192, 128, 0, 0, 192, 192, 224, 224, 192, 0, 0, 0, 0, 0, 31, 127, 255, 0, 0, 0, 0, 0, 0, 0, 0, 225, 77, 128, 113, 75, 79, 63, 63, 30, 50, 127, 14, 52, 48, 0, 1, 0, 0, 0, 0, 0, 0, 192, 160, 0, 0, 0, 0, 0, 0, 0, 64, 48, 48, 112, 248, 252, 248, 204, 132, 192, 192, 128, 0, 24, 64, 48, 120, 63, 91, 127, 103, 99, 99, 115, 63, 29, 63, 33, 24, 31, 28, 44, 16, 127, 79, 79, 38, 34, 23, 127, 255, 0, 49, 48, 24, 28, 8, 0, 0, 134, 194, 194, 194, 36, 4, 14, 62, 120, 60, 188, 60, 216, 248, 244, 204, 255, 191, 142, 67, 35, 31, 7, 31, 62, 70, 112, 60, 28, 0, 0, 0, 0, 32, 32, 114, 120, 122, 250, 248, 0, 36, 38, 84, 75, 71, 135, 135, 252, 252, 220, 138, 1, 1, 0, 0, 131, 131, 131, 129, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 10, 24, 0, 4, 6, 4, 3, 7, 15, 31, 28, 30, 30, 30, 31, 31, 12, 8, 27, 29, 29, 29, 24, 24, 8, 8, 8, 9, 88, 92, 116, 116, 102, 110, 0, 0, 0, 0, 8, 8, 24, 16, 203, 195, 137, 153, 219, 102, 60, 0, 52, 60, 126, 126, 60, 24, 0, 0, 16, 120, 108, 124, 56, 38, 3, 1, 48, 124, 252, 124, 124, 54, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 31, 63, 0, 0, 0, 0, 0, 0, 0, 0, 56, 19, 32, 28, 18, 19, 15, 31, 7, 12, 31, 3, 13, 12, 0, 0, 0, 0, 0, 0, 0, 192, 240, 232, 0, 0, 0, 0, 0, 0, 0, 16, 76, 76, 28, 126, 255, 255, 243, 224, 176, 176, 224, 128, 6, 16, 12, 95, 7, 6, 7, 11, 19, 51, 251, 251, 2, 1, 1, 4, 12, 28, 164, 4, 173, 148, 72, 48, 0, 0, 0, 0, 80, 104, 48, 0, 0, 0, 0, 0, 224, 208, 252, 62, 25, 24, 152, 249, 223, 239, 3, 193, 254, 231, 103, 134, 255, 143, 143, 102, 34, 23, 127, 255, 0, 112, 112, 24, 28, 8, 0, 0, 192, 64, 32, 32, 32, 32, 112, 248, 0, 128, 192, 192, 192, 192, 160, 96, 248, 56, 134, 195, 35, 31, 7, 31, 48, 192, 120, 60, 28, 0, 0, 0, 0, 0, 0, 0, 6, 14, 6, 6, 0, 0, 0, 0, 4, 12, 4, 4, 6, 6, 6, 6, 15, 0, 0, 0, 4, 4, 4, 4, 14, 0, 0, 0, 68, 68, 198, 198, 238, 238, 254, 254, 0, 0, 0, 0, 0, 0, 40, 124, 124, 124, 254, 254, 255, 127, 63, 127, 56, 16, 68, 124, 124, 50, 14, 62, 254, 254, 254, 126, 252, 254, 254, 126, 92, 96, 124, 28, 96, 124, 124, 48, 126, 127, 127, 255, 254, 254, 126, 60, 12, 62, 62, 14, 112, 124, 60, 0, 0, 60, 64, 132, 130, 130, 0, 16, 0, 60, 126, 231, 195, 195, 255, 24, 16, 16, 16, 22, 16, 16, 16, 0, 24, 24, 24, 30, 30, 30, 24, 0, 0, 84, 56, 124, 68, 68, 40, 198, 0, 84, 40, 0, 56, 56, 16, 254, 171, 147, 57, 16, 0, 0, 0, 0, 215, 215, 131, 40, 48, 48, 32, 32, 0, 84, 56, 125, 199, 199, 238, 0, 0, 84, 40, 1, 187, 187, 214, 56, 40, 16, 56, 16, 0, 0, 0, 0, 84, 84, 130, 40, 48, 48, 32, 32, 3, 7, 3, 4, 6, 255, 143, 255, 0, 3, 4, 3, 1, 4, 119, 3, 159, 255, 151, 253, 139, 255, 142, 255, 100, 3, 104, 2, 116, 0, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 84, 60, 56, 16, 28, 56, 120, 0, 84, 62, 62, 28, 0, 60, 126, 124, 248, 252, 248, 252, 248, 112, 0, 126, 199, 219, 199, 223, 223, 255, 126, 255, 129, 129, 255, 255, 129, 129, 255, 255, 254, 254, 0, 255, 254, 254, 0, 255, 129, 129, 255, 255, 129, 129, 255, 255, 254, 254, 0, 255, 254, 254, 0, 255, 129, 129, 129, 129, 129, 129, 129, 255, 254, 254, 254, 230, 194, 194, 230, 129, 129, 129, 129, 129, 129, 129, 255, 238, 238, 230, 238, 254, 254, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 56, 254, 56, 16, 16, 16, 16, 16, 56, 254, 56, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 130, 64, 0, 129, 0, 68, 145, 17, 130, 64, 0, 129, 0, 68, 145, 0, 0, 0, 0, 7, 24, 38, 31, 0, 0, 0, 0, 0, 7, 25, 4, 127, 159, 65, 60, 252, 25, 19, 15, 12, 96, 190, 227, 3, 14, 12, 0, 0, 0, 56, 72, 144, 16, 40, 108, 0, 0, 0, 48, 96, 224, 200, 140, 28, 62, 126, 62, 63, 127, 255, 191, 236, 222, 150, 210, 203, 137, 21, 69, 1, 1, 3, 62, 64, 47, 242, 49, 0, 0, 0, 1, 63, 80, 129, 32, 0, 1, 2, 2, 2, 7, 8, 15, 0, 0, 1, 1, 1, 0, 7, 4, 63, 31, 31, 63, 123, 249, 125, 28, 205, 229, 229, 197, 129, 1, 129, 224, 140, 24, 48, 232, 102, 96, 48, 152, 112, 224, 204, 4, 129, 135, 192, 96, 0, 0, 0, 0, 0, 113, 216, 174, 0, 0, 0, 0, 0, 0, 32, 112, 183, 204, 116, 126, 16, 0, 0, 0, 120, 48, 8, 0, 0, 0, 0, 0, 0, 0, 0, 4, 3, 6, 21, 11, 0, 0, 0, 0, 0, 1, 3, 7, 15, 9, 6, 3, 4, 0, 0, 0, 3, 7, 1, 0, 0, 0, 0, 0, 11, 5, 20, 74, 0, 216, 0, 20, 0, 3, 12, 58, 16, 56, 64, 52, 32, 8, 48, 76, 17, 36, 5, 9, 224, 72, 16, 60, 1, 12, 3, 0, 0, 36, 24, 8, 14, 8, 9, 6, 0, 56, 0, 22, 17, 17, 18, 120, 99, 67, 3, 131, 199, 126, 60, 0, 252, 252, 252, 124, 56, 0, 0, 0, 16, 56, 108, 68, 100, 56, 0, 56, 0, 0, 16, 56, 24, 0, 0, 56, 56, 56, 56, 56, 56, 0, 0, 0, 56, 56, 56, 56, 57, 255, 126, 0, 0, 20, 252, 212, 212, 252, 132, 133, 0, 40, 128, 40, 168, 128, 121, 248, 142, 152, 241, 26, 60, 64, 126, 66, 241, 231, 142, 100, 0, 124, 0, 124, 0, 0, 36, 255, 36, 36, 36, 36, 0, 219, 219, 219, 255, 219, 219, 219, 36, 36, 255, 36, 36, 255, 219, 0, 219, 219, 219, 255, 219, 219, 219, 0, 0, 0, 0, 8, 9, 15, 15, 15, 0, 0, 15, 7, 6, 1, 2, 1, 15, 15, 15, 31, 63, 127, 123, 0, 2, 0, 0, 0, 16, 32, 0, 0, 0, 24, 8, 8, 8, 8, 24, 8, 0, 24, 16, 16, 16, 16, 0, 16, 24, 8, 24, 8, 8, 44, 70, 0, 0, 16, 0, 16, 16, 48, 120, 0, 0, 0, 24, 24, 24, 239, 247, 24, 0, 0, 24, 24, 24, 247, 239, 255, 24, 24, 24, 24, 24, 0, 0, 0, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0, 16, 0, 252, 254, 254, 16, 0, 0, 24, 252, 2, 0, 0, 24, 16, 16, 16, 16, 16, 16, 16, 16, 24, 24, 24, 24, 24, 24, 24, 24, 24, 211, 132, 194, 152, 24, 0, 16, 24, 219, 255, 189, 247, 102, 60, 24, 16, 16, 16, 16, 16, 16, 16, 0, 24, 24, 24, 24, 28, 24, 28, 0, 0, 0, 0, 0, 0, 96, 176, 176, 0, 0, 0, 0, 0, 64, 160, 160, 176, 176, 176, 176, 96, 0, 0, 0, 160, 160, 160, 160, 64, 0, 0, 0, 0, 0, 0, 0, 0, 102, 187, 187, 0, 0, 0, 0, 0, 68, 170, 170, 187, 187, 187, 187, 102, 0, 0, 0, 170, 170, 170, 170, 68, 0, 0, 0, 0, 0, 0, 0, 96, 230, 107, 107, 0, 0, 0, 0, 64, 196, 74, 74, 107, 107, 107, 107, 246, 0, 0, 0, 74, 74, 74, 74, 228, 0, 0, 0, 0, 0, 0, 0, 96, 182, 187, 59, 0, 0, 0, 0, 64, 164, 170, 42, 107, 203, 203, 203, 246, 0, 0, 0, 74, 138, 138, 138, 228, 0, 0, 0, 0, 0, 0, 0, 6, 11, 11, 3, 0, 0, 0, 0, 4, 10, 10, 2, 6, 12, 12, 12, 15, 0, 0, 0, 4, 8, 8, 8, 14, 0, 0, 0, 0, 0, 0, 0, 15, 12, 14, 11, 0, 0, 0, 0, 14, 8, 12, 10, 3, 3, 11, 11, 6, 0, 0, 0, 2, 2, 10, 10, 4, 0, 0, 0, 28, 62, 127, 42, 54, 73, 119, 255, 0, 0, 0, 85, 73, 54, 8, 65, 230, 255, 255, 126, 127, 0, 54, 54, 61, 126, 102, 25, 32, 54, 0, 0, 0, 0, 0, 0, 4, 2, 49, 33, 0, 0, 0, 0, 56, 64, 176, 160, 1, 129, 66, 60, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 255, 0, 153, 0, 0, 153, 0, 255, 0, 255, 153, 153, 153, 153, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 60, 84, 112, 0, 0, 0, 24, 62, 127, 255, 255, 42, 80, 16, 0, 0, 0, 0, 0, 255, 255, 254, 126, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 15, 31, 31, 31, 31, 15, 0, 1, 8, 16, 1, 16, 22, 0, 0, 0, 0, 15, 24, 50, 39, 102, 0, 0, 0, 0, 7, 13, 26, 25, 64, 64, 64, 64, 96, 120, 63, 31, 63, 63, 63, 63, 31, 7, 0, 0, 0, 0, 0, 0, 7, 28, 48, 98, 0, 0, 0, 0, 0, 3, 15, 29, 71, 198, 128, 128, 192, 240, 127, 63, 58, 57, 127, 127, 63, 15, 0, 0, 0, 31, 32, 120, 124, 252, 254, 254, 0, 0, 31, 7, 51, 123, 93, 93, 255, 255, 126, 64, 32, 28, 3, 0, 124, 56, 1, 63, 31, 3, 0, 0, 0, 0, 128, 96, 31, 2, 39, 24, 0, 0, 0, 128, 224, 252, 216, 231, 9, 146, 33, 2, 12, 48, 192, 0, 246, 108, 222, 252, 240, 192, 0, 0, 0, 3, 12, 27, 22, 44, 174, 31, 7, 12, 19, 36, 41, 83, 209, 164, 15, 79, 135, 0, 2, 4, 4, 0, 150, 114, 232, 199, 142, 140, 196, 64, 0, 192, 48, 216, 104, 53, 116, 248, 224, 48, 200, 36, 148, 203, 139, 37, 242, 240, 224, 0, 64, 32, 32, 0, 110, 78, 18, 226, 114, 52, 32, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 3, 63, 127, 127, 255, 255, 95, 0, 0, 1, 62, 6, 99, 89, 21, 31, 7, 35, 127, 127, 63, 1, 0, 6, 4, 0, 42, 60, 0, 0, 0, 0, 240, 248, 252, 252, 255, 255, 254, 0, 0, 240, 24, 24, 24, 243, 226, 255, 255, 254, 252, 255, 255, 255, 14, 232, 203, 18, 32, 104, 19, 6, 0, 0, 240, 248, 252, 255, 255, 254, 255, 0, 0, 240, 24, 24, 27, 242, 224, 255, 254, 252, 252, 254, 255, 254, 28, 235, 202, 16, 40, 80, 14, 24, 0, 7, 8, 22, 40, 32, 0, 31, 63, 0, 7, 15, 31, 31, 63, 32, 10, 63, 71, 83, 38, 124, 204, 222, 123, 0, 56, 44, 25, 3, 51, 33, 0, 240, 12, 6, 2, 3, 1, 1, 131, 0, 240, 248, 252, 252, 254, 254, 124, 199, 255, 94, 83, 89, 202, 249, 183, 56, 0, 160, 172, 166, 52, 6, 0, 7, 8, 22, 60, 67, 153, 189, 190, 0, 7, 15, 3, 60, 102, 102, 65, 190, 190, 156, 65, 127, 145, 167, 89, 65, 99, 107, 62, 0, 110, 88, 0, 240, 12, 6, 2, 3, 129, 193, 195, 0, 240, 248, 252, 252, 126, 62, 60, 227, 255, 254, 148, 146, 18, 50, 36, 28, 0, 0, 104, 108, 236, 204, 216, 0, 0, 0, 0, 60, 102, 219, 189, 0, 0, 0, 0, 0, 24, 60, 126, 189, 219, 102, 60, 0, 0, 0, 0, 126, 60, 24, 0, 0, 0, 0, 0, 28, 62, 127, 42, 54, 73, 119, 255, 0, 0, 0, 85, 73, 54, 8, 65, 230, 255, 255, 126, 127, 0, 54, 54, 61, 126, 102, 25, 32, 54, 0, 0, 0, 0, 0, 0, 0, 16, 16, 56, 0, 0, 0, 0, 0, 16, 16, 56, 56, 124, 124, 254, 0, 0, 0, 0, 56, 124, 124, 254, 0, 0, 0, 0, 0, 60, 126, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 127, 127, 63, 31, 15, 7, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 3, 7, 7, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 31, 31, 63, 63, 127, 127, 255, 255, 0, 15, 63, 63, 59, 31, 63, 63, 0, 0, 16, 8, 5, 9, 27, 26, 63, 31, 4, 8, 8, 31, 23, 79, 28, 4, 3, 7, 7, 0, 11, 3, 0, 128, 192, 192, 224, 224, 240, 240, 0, 0, 0, 0, 0, 0, 0, 0, 240, 240, 248, 120, 120, 248, 240, 208, 0, 0, 0, 128, 128, 0, 128, 32, 255, 255, 127, 0, 0, 1, 1, 1, 71, 254, 0, 0, 0, 0, 0, 0, 3, 2, 2, 2, 2, 4, 4, 15, 0, 1, 1, 1, 1, 3, 3, 0, 208, 144, 56, 200, 132, 4, 4, 2, 32, 96, 192, 48, 120, 248, 248, 252, 2, 2, 2, 3, 1, 1, 5, 212, 252, 252, 252, 252, 254, 254, 250, 43, 136, 8, 215, 239, 111, 47, 39, 63, 112, 240, 96, 128, 144, 208, 216, 192, 31, 31, 63, 255, 255, 127, 127, 127, 224, 224, 208, 42, 95, 63, 63, 63, 127, 63, 63, 127, 127, 127, 127, 35, 63, 31, 7, 56, 63, 63, 3, 28, 35, 70, 68, 124, 120, 248, 248, 240, 28, 56, 56, 0, 0, 0, 0, 0, 0, 240, 252, 254, 14, 100, 2, 28, 0, 0, 0, 0, 240, 152, 252, 224, 164, 228, 248, 248, 240, 187, 252, 222, 88, 24, 0, 0, 32, 240, 187, 249, 250, 239, 254, 254, 254, 60, 28, 60, 221, 244, 252, 60, 24, 192, 232, 192, 242, 242, 98, 100, 68, 232, 254, 255, 12, 12, 28, 24, 56, 16, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7, 7, 7, 3, 3, 3, 3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7, 7, 7, 96, 96, 96, 96, 96, 96, 96, 96, 192, 192, 192, 192, 192, 192, 192, 192, 96, 96, 96, 96, 96, 96, 96, 96, 192, 192, 192, 192, 192, 192, 192, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 119, 120, 30, 127, 127, 27, 255, 255, 191, 255, 255, 255, 255, 255, 135, 127, 63, 255, 159, 128, 97, 120, 255, 159, 255, 255, 255, 255, 255, 255, 15, 60, 195, 239, 241, 248, 248, 97, 255, 255, 253, 243, 255, 255, 255, 255, 0, 112, 32, 12, 6, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 3, 207, 15, 111, 67, 1, 15, 99, 253, 247, 247, 255, 255, 255, 247, 255, 134, 240, 252, 254, 252, 252, 240, 0, 255, 31, 255, 255, 255, 255, 255, 255, 3, 207, 15, 111, 67, 1, 15, 99, 253, 247, 247, 255, 255, 255, 247, 255, 63, 127, 255, 255, 63, 7, 113, 0, 222, 191, 191, 255, 255, 255, 255, 255, 15, 60, 195, 239, 241, 248, 248, 97, 255, 255, 253, 243, 255, 255, 255, 255, 3, 6, 5, 15, 15, 13, 14, 5, 3, 7, 6, 13, 12, 14, 15, 6, 4, 7, 6, 4, 4, 7, 6, 4, 7, 6, 5, 7, 7, 6, 5, 7, 0, 64, 128, 192, 192, 160, 64, 128, 192, 160, 96, 48, 48, 80, 176, 96, 32, 224, 32, 96, 224, 160, 32, 96, 192, 0, 192, 128, 0, 64, 192, 128, 4, 7, 6, 4, 4, 7, 6, 4, 7, 6, 5, 7, 7, 6, 5, 7, 15, 126, 175, 227, 131, 67, 3, 3, 0, 31, 112, 71, 71, 7, 7, 7, 224, 160, 32, 96, 224, 160, 32, 96, 0, 64, 192, 128, 0, 64, 192, 128, 240, 14, 241, 111, 97, 98, 96, 96, 0, 240, 14, 194, 194, 192, 192, 192, };
        private readonly int[] _error1Up = { 28, 62, 127, 42, 54, 73, 119, 255, 0, 0, 0, 85, 73, 54, 8, 65, 230, 255, 255, 126, 127, 0, 54, 54, 61, 126, 102, 25, 32, 54, 0, 0, };
        private readonly int[] _errorOw = { 124, 254, 219, 179, 207, 190, 126, 210, 0, 0, 36, 76, 48, 76, 0, 108, 185, 254, 231, 127, 190, 170, 123, 247, 86, 96, 90, 38, 64, 68, 4, 0, 124, 254, 219, 179, 207, 190, 126, 210, 0, 0, 36, 76, 48, 76, 0, 108, 185, 249, 255, 114, 236, 40, 28, 60, 86, 118, 64, 172, 16, 16, 0, 0, 28, 62, 127, 62, 62, 127, 127, 255, 0, 0, 0, 65, 65, 0, 0, 93, 255, 255, 255, 126, 127, 0, 54, 48, 62, 126, 126, 29, 32, 54, 0, 0, 28, 62, 127, 42, 54, 73, 119, 255, 0, 0, 0, 85, 73, 54, 8, 65, 230, 254, 255, 126, 127, 0, 54, 48, 61, 125, 102, 25, 32, 54, 0, 0, };
        private readonly int[] _errorSleeper = { 0, 0, 0, 0, 7, 15, 23, 27, 0, 0, 0, 0, 7, 7, 31, 29, 62, 63, 62, 63, 63, 31, 35, 34, 55, 52, 57, 60, 62, 31, 62, 63, 12, 31, 63, 63, 119, 127, 119, 127, 12, 31, 44, 54, 127, 118, 124, 119, 12, 158, 223, 239, 247, 227, 251, 252, 12, 146, 81, 44, 62, 28, 252, 255, 0, 0, 0, 129, 206, 240, 100, 232, 0, 0, 0, 129, 79, 127, 223, 255, 0, 0, 0, 224, 24, 4, 2, 53, 0, 0, 0, 224, 248, 252, 254, 255, };
        private readonly int[] _errorTitle = { 28, 62, 127, 42, 54, 73, 119, 255, 0, 0, 0, 85, 73, 54, 8, 65, 230, 255, 255, 126, 127, 0, 54, 54, 61, 126, 102, 25, 32, 54, 0, 0, };
        private readonly int[] _errorEnd1 = { 0, 15, 63, 63, 59, 31, 63, 63, 0, 0, 16, 8, 5, 9, 27, 26, 63, 31, 4, 8, 8, 31, 23, 79, 28, 4, 3, 7, 7, 0, 11, 3, 0, 128, 192, 192, 224, 224, 240, 240, 0, 0, 0, 0, 0, 0, 0, 0, 240, 240, 248, 120, 120, 248, 240, 208, 0, 0, 0, 128, 128, 0, 128, 32, 255, 255, 127, 0, 0, 1, 1, 1, 71, 254, 0, 0, 0, 0, 0, 0, 3, 2, 2, 2, 2, 4, 4, 15, 0, 1, 1, 1, 1, 3, 3, 0, 208, 144, 56, 200, 132, 4, 4, 2, 32, 96, 192, 48, 120, 248, 248, 252, 2, 2, 2, 3, 1, 1, 5, 212, 252, 252, 252, 252, 254, 254, 250, 43, 136, 8, 215, 239, 111, 47, 39, 63, 112, 240, 96, 128, 144, 208, 216, 192, 31, 31, 63, 255, 255, 127, 127, 127, 224, 224, 208, 42, 95, 63, 63, 63, 127, 63, 63, 127, 127, 127, 127, 35, 63, 31, 7, 56, 63, 63, 3, 28, 35, 70, 68, 124, 120, 248, 248, 240, 28, 56, 56, 0, 0, 0, 0, 0, 0, 240, 252, 254, 14, 100, 2, 28, 0, 0, 0, 0, 240, 152, 252, 224, 164, 228, 248, 248, 240, 187, 252, 222, 88, 24, 0, 0, 32, 240, 187, 249, 250, 239, 254, 254, 254, 60, 28, 60, 221, 244, 252, 60, 24, 192, 232, 192, 242, 242, 98, 100, 68, 232, 254, 255, 12, 12, 28, 24, 56, 16, 0, 0, };
        private readonly int[] _errorEnd2 = { 0, 0, 0, 0, 7, 15, 23, 27, 0, 0, 0, 0, 7, 7, 31, 29, 62, 63, 62, 63, 63, 31, 35, 34, 55, 52, 57, 60, 62, 31, 62, 63, 12, 31, 63, 63, 119, 127, 119, 127, 12, 31, 44, 54, 127, 118, 124, 119, 12, 158, 223, 239, 247, 227, 251, 252, 12, 146, 81, 44, 62, 28, 252, 255, 0, 0, 0, 129, 206, 240, 100, 232, 0, 0, 0, 129, 79, 127, 223, 255, 0, 0, 0, 224, 24, 4, 2, 53, 0, 0, 0, 224, 248, 252, 254, 255, 255, 129, 255, 255, 153, 153, 153, 153, 1, 127, 255, 17, 119, 119, 119, 119, 16, 16, 16, 16, 0, 0, 16, 0, 8, 8, 8, 8, 24, 0, 8, 24, 0, 0, 0, 0, 7, 15, 23, 27, 0, 0, 0, 0, 7, 7, 31, 29, 62, 63, 62, 63, 63, 31, 35, 34, 55, 52, 57, 60, 62, 31, 62, 63, 0, 0, 0, 0, 0, 192, 224, 96, 0, 0, 0, 0, 0, 192, 224, 160, 192, 224, 160, 224, 224, 192, 64, 160, 96, 32, 96, 32, 96, 192, 192, 96, 60, 60, 28, 56, 57, 61, 125, 255, 63, 39, 7, 15, 15, 14, 31, 31, 32, 48, 48, 224, 240, 128, 6, 15, 224, 240, 240, 231, 63, 127, 255, 255, };
        private readonly int[] _errorEnd3 = { 136, 8, 215, 239, 127, 41, 38, 16, 112, 240, 96, 128, 128, 214, 217, 239, 27, 30, 62, 239, 255, 111, 127, 123, 228, 225, 209, 56, 108, 63, 55, 63, 126, 63, 63, 127, 127, 127, 63, 35, 61, 31, 7, 48, 60, 63, 1, 28, 35, 70, 68, 124, 120, 120, 248, 240, 28, 56, 56, 0, 0, 0, 0, 0, };
        private readonly int[] _errorHead = { 0, 0, 30, 50, 127, 14, 52, 48, 127, 255, 225, 77, 128, 113, 75, 79, };
        private readonly int[] _errorRaft = { 7, 15, 11, 12, 11, 7, 13, 251, 0, 0, 4, 3, 4, 0, 6, 5, 143, 254, 135, 251, 139, 255, 143, 255, 118, 5, 122, 4, 116, 0, 112, 0, 224, 176, 48, 240, 224, 224, 32, 159, 0, 64, 192, 0, 192, 0, 192, 96, 225, 127, 241, 255, 161, 191, 113, 255, 30, 160, 110, 0, 94, 64, 142, 0, };
        private readonly int[] _errorBeam = { 0, 0, 0, 0, 0, 113, 216, 174, 0, 0, 0, 0, 0, 0, 32, 112, 183, 204, 116, 126, 16, 0, 0, 0, 120, 48, 8, 0, 0, 0, 0, 0, };

        private readonly int[] _samussprite = { 3, 15, 31, 22, 37, 6, 13, 58, 0, 0, 0, 25, 50, 49, 33, 3, 58, 21, 13, 29, 11, 11, 19, 1, 7, 11, 3, 50, 84, 84, 58, 1, 128, 224, 240, 248, 248, 248, 240, 240, 0, 0, 32, 16, 0, 0, 224, 240, 224, 240, 56, 248, 248, 224, 192, 224, 224, 240, 248, 96, 48, 48, 32, 224, 63, 127, 119, 56, 30, 31, 3, 29, 31, 111, 119, 56, 12, 0, 12, 2, 61, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 240, 240, 224, 224, 224, 224, 224, 240, 240, 240, 224, 224, 224, 224, 96, 240, 248, 62, 31, 15, 3, 28, 60, 48, 120, 60, 4, 0, 12, 2, 0, 0, 7, 31, 63, 45, 75, 13, 31, 0, 0, 0, 0, 50, 100, 98, 64, 125, 63, 17, 103, 239, 254, 253, 123, 1, 7, 11, 7, 47, 126, 109, 67, 0, 0, 192, 224, 240, 240, 240, 224, 0, 0, 0, 64, 32, 0, 0, 0, 224, 248, 238, 246, 252, 248, 240, 224, 224, 248, 236, 240, 252, 248, 240, 224, 51, 1, 3, 7, 7, 14, 14, 28, 3, 1, 3, 7, 7, 14, 14, 0, 28, 14, 7, 7, 7, 9, 30, 62, 12, 14, 7, 3, 0, 6, 1, 0, 224, 240, 242, 231, 238, 253, 123, 119, 224, 240, 240, 224, 233, 218, 92, 112, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 240, 240, 240, 224, 224, 224, 248, 224, 240, 240, 240, 224, 224, 224, 64, 254, 123, 63, 62, 31, 15, 55, 122, 240, 124, 60, 14, 6, 16, 8, 4, 0, 0, 0, 0, 0, 7, 31, 63, 0, 0, 0, 0, 0, 0, 8, 16, 63, 119, 116, 95, 31, 63, 126, 124, 0, 11, 15, 39, 111, 127, 126, 61, 0, 0, 0, 0, 0, 0, 192, 192, 0, 0, 0, 0, 0, 0, 0, 0, 224, 224, 240, 120, 120, 252, 124, 252, 0, 224, 240, 248, 248, 252, 124, 252, 120, 31, 63, 61, 63, 31, 7, 1, 27, 7, 11, 31, 63, 31, 7, 1, 1, 0, 3, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 126, 222, 254, 126, 190, 220, 248, 254, 254, 254, 254, 254, 254, 252, 216, 240, 120, 184, 208, 0, 0, 0, 0, 0, 128, 64, 32, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 1, 7, 0, 3, 7, 7, 7, 7, 7, 7, 7, 7, 15, 15, 15, 15, 5, 2, 7, 1, 0, 5, 3, 3, 3, 2, 0, 0, 0, 128, 0, 0, 128, 224, 0, 0, 128, 128, 128, 128, 128, 128, 248, 252, 188, 158, 222, 222, 220, 248, 128, 0, 192, 228, 244, 240, 248, 248, 7, 6, 6, 5, 1, 63, 127, 119, 1, 1, 1, 3, 0, 31, 111, 119, 56, 30, 31, 3, 29, 60, 120, 0, 56, 12, 0, 12, 2, 0, 0, 0, 248, 248, 240, 240, 240, 224, 224, 242, 248, 248, 240, 240, 240, 224, 224, 240, 231, 238, 253, 123, 119, 51, 0, 0, 224, 233, 218, 92, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 6, 30, 15, 9, 9, 17, 25, 28, 9, 1, 112, 54, 6, 1, 3, 7, 15, 14, 28, 28, 15, 1, 3, 7, 15, 14, 4, 12, 14, 7, 7, 7, 7, 11, 29, 61, 0, 6, 7, 3, 1, 4, 2, 2, 0, 3, 15, 31, 22, 37, 6, 15, 62, 0, 0, 0, 25, 50, 49, 32, 0, 29, 11, 6, 14, 29, 51, 3, 1, 97, 148, 241, 241, 115, 55, 3, 0, 128, 224, 240, 248, 248, 248, 112, 208, 0, 0, 32, 16, 0, 0, 112, 248, 190, 251, 255, 255, 254, 248, 224, 224, 254, 252, 199, 195, 194, 224, 224, 224, 63, 127, 119, 56, 30, 31, 3, 29, 31, 111, 119, 56, 12, 0, 12, 2, 61, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 240, 240, 224, 224, 224, 224, 224, 240, 240, 240, 224, 224, 224, 224, 96, 240, 248, 62, 31, 15, 3, 28, 60, 48, 120, 60, 4, 0, 12, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 60, 56, 60, 8, 0, 0, 0, 16, 40, 4, 40, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 7, 15, 15, 7, 0, 0, 0, 0, 3, 15, 31, 22, 37, 6, 15, 62, 0, 0, 0, 25, 50, 49, 32, 0, 125, 122, 54, 62, 14, 13, 5, 3, 131, 197, 233, 241, 1, 2, 2, 3, 128, 224, 240, 248, 248, 248, 112, 208, 0, 0, 32, 16, 0, 0, 112, 248, 240, 252, 238, 222, 252, 248, 240, 224, 240, 252, 240, 220, 60, 24, 0, 0, 1, 3, 7, 15, 14, 28, 28, 15, 1, 3, 7, 15, 14, 4, 12, 14, 7, 7, 7, 7, 11, 29, 61, 0, 6, 7, 3, 1, 4, 2, 2, 0, 240, 240, 240, 224, 224, 224, 224, 224, 240, 240, 240, 224, 224, 224, 224, 96, 240, 248, 62, 159, 143, 131, 28, 60, 48, 120, 60, 4, 0, 12, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 15, 31, 27, 51, 0, 0, 0, 3, 1, 3, 7, 15, 55, 63, 63, 63, 31, 31, 15, 3, 15, 30, 54, 35, 7, 31, 11, 0, 0, 0, 0, 192, 240, 248, 248, 252, 0, 0, 0, 192, 240, 248, 56, 188, 252, 252, 252, 252, 248, 248, 112, 192, 252, 124, 252, 252, 248, 120, 144, 0, 0, 0, 0, 0, 0, 0, 7, 31, 0, 0, 0, 0, 0, 0, 0, 0, 63, 45, 75, 13, 29, 123, 58, 21, 0, 50, 100, 98, 65, 3, 7, 11, 0, 0, 0, 0, 0, 0, 0, 192, 0, 0, 0, 0, 0, 0, 0, 0, 224, 240, 240, 48, 224, 64, 224, 240, 64, 32, 0, 0, 192, 224, 224, 240, 6, 15, 3, 1, 7, 1, 63, 127, 6, 17, 60, 32, 25, 0, 31, 111, 119, 56, 30, 31, 3, 29, 60, 120, 119, 56, 12, 0, 12, 2, 0, 0, 56, 248, 248, 240, 224, 224, 224, 240, 56, 224, 240, 240, 224, 224, 224, 240, 242, 231, 238, 253, 123, 119, 51, 0, 240, 224, 233, 218, 92, 112, 0, 0, 0, 32, 32, 114, 120, 122, 250, 248, 0, 36, 38, 84, 75, 71, 135, 135, 252, 252, 220, 138, 1, 1, 0, 0, 131, 131, 131, 129, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 10, 24, 0, 4, 6, 4, 3, 7, 15, 31, 28, 30, 30, 30, 31, 31, 12, 8, 27, 29, 29, 29, 24, 24, 8, 8, 8, 9, 88, 92, 116, 116, 102, 110, 0, 0, 0, 0, 8, 8, 24, 16, 203, 195, 137, 153, 219, 102, 60, 0, 52, 60, 126, 126, 60, 24, 0, 0, 33, 240, 224, 241, 32, 0, 0, 0, 67, 167, 23, 163, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 15, 0, 0, 0, 0, 0, 0, 0, 0, 11, 18, 3, 7, 31, 30, 13, 3, 12, 25, 24, 16, 0, 1, 2, 4, 0, 0, 0, 0, 0, 192, 240, 248, 0, 0, 0, 0, 0, 0, 0, 16, 124, 252, 124, 184, 104, 248, 126, 119, 136, 0, 128, 56, 124, 248, 254, 248, 63, 63, 30, 30, 1, 0, 31, 63, 200, 232, 249, 253, 1, 0, 15, 55, 59, 28, 15, 15, 1, 14, 30, 60, 59, 28, 6, 0, 6, 1, 0, 0, 111, 126, 252, 248, 240, 240, 240, 248, 238, 158, 12, 0, 128, 112, 240, 248, 249, 115, 119, 254, 189, 187, 25, 0, 248, 112, 116, 109, 46, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 128, 128, 128, 128, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 11, 3, 3, 0, 0, 0, 0, 4, 10, 2, 2, 6, 3, 3, 11, 6, 0, 0, 0, 4, 2, 2, 10, 4, 0, 0, 0, 68, 68, 198, 198, 238, 238, 254, 254, 0, 0, 0, 0, 0, 0, 40, 124, 124, 124, 254, 254, 255, 127, 63, 127, 56, 16, 68, 124, 124, 50, 14, 62, 254, 254, 254, 126, 252, 254, 254, 126, 92, 96, 124, 28, 96, 124, 124, 48, 126, 127, 127, 255, 254, 254, 126, 60, 12, 62, 62, 14, 112, 124, 60, 0, 0, 60, 64, 132, 130, 130, 0, 16, 0, 60, 126, 231, 195, 195, 255, 24, 16, 16, 16, 22, 16, 16, 16, 0, 24, 24, 24, 30, 30, 30, 24, 0, 0, 84, 56, 124, 68, 68, 40, 198, 0, 84, 40, 0, 56, 56, 16, 254, 171, 147, 57, 16, 0, 0, 0, 0, 215, 215, 131, 40, 48, 48, 32, 32, 0, 84, 56, 125, 199, 199, 238, 0, 0, 84, 40, 1, 187, 187, 214, 56, 40, 16, 56, 16, 0, 0, 0, 0, 84, 84, 130, 40, 48, 48, 32, 32, 0, 0, 0, 0, 111, 236, 108, 110, 0, 0, 0, 0, 78, 200, 72, 76, 107, 99, 99, 107, 246, 0, 0, 0, 74, 66, 66, 74, 228, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 84, 60, 56, 16, 28, 56, 120, 0, 84, 62, 62, 28, 0, 60, 126, 124, 248, 252, 248, 252, 248, 112, 0, 126, 199, 219, 199, 223, 223, 255, 126, 255, 129, 129, 255, 255, 129, 129, 255, 255, 254, 254, 0, 255, 254, 254, 0, 255, 129, 129, 255, 255, 129, 129, 255, 255, 254, 254, 0, 255, 254, 254, 0, 255, 129, 129, 129, 129, 129, 129, 129, 255, 254, 254, 254, 230, 194, 194, 230, 129, 129, 129, 129, 129, 129, 129, 255, 238, 238, 230, 238, 254, 254, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 56, 254, 56, 16, 16, 16, 16, 16, 56, 254, 56, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 130, 64, 0, 129, 0, 68, 145, 17, 130, 64, 0, 129, 0, 68, 145, 0, 0, 0, 0, 7, 24, 38, 31, 0, 0, 0, 0, 0, 7, 25, 4, 127, 159, 65, 60, 252, 25, 19, 15, 12, 96, 190, 227, 3, 14, 12, 0, 0, 0, 56, 72, 144, 16, 40, 108, 0, 0, 0, 48, 96, 224, 200, 140, 28, 62, 126, 62, 63, 127, 255, 191, 236, 222, 150, 210, 203, 137, 21, 69, 1, 1, 3, 62, 64, 47, 242, 49, 0, 0, 0, 1, 63, 80, 129, 32, 0, 1, 2, 2, 2, 7, 8, 15, 0, 0, 1, 1, 1, 0, 7, 4, 63, 31, 31, 63, 123, 249, 125, 28, 205, 229, 229, 197, 129, 1, 129, 224, 140, 24, 48, 232, 102, 96, 48, 152, 112, 224, 204, 4, 129, 135, 192, 96, 0, 0, 0, 0, 0, 113, 216, 174, 0, 0, 0, 0, 0, 0, 32, 112, 183, 204, 116, 126, 16, 0, 0, 0, 120, 48, 8, 0, 0, 0, 0, 0, 0, 0, 0, 4, 3, 6, 21, 11, 0, 0, 0, 0, 0, 1, 3, 7, 15, 9, 6, 3, 4, 0, 0, 0, 3, 7, 1, 0, 0, 0, 0, 0, 11, 5, 20, 74, 0, 216, 0, 20, 0, 3, 12, 58, 16, 56, 64, 52, 32, 8, 48, 76, 17, 36, 5, 9, 224, 72, 16, 60, 1, 12, 3, 0, 0, 24, 0, 36, 0, 24, 0, 0, 0, 24, 24, 60, 0, 24, 24, 24, 145, 181, 247, 145, 16, 0, 0, 0, 189, 153, 255, 189, 24, 0, 0, 0, 16, 56, 108, 68, 100, 56, 0, 56, 0, 0, 16, 56, 24, 0, 0, 56, 56, 56, 56, 56, 56, 0, 0, 0, 56, 56, 56, 56, 57, 255, 126, 0, 0, 20, 252, 212, 212, 252, 132, 133, 0, 40, 128, 40, 168, 128, 121, 248, 142, 152, 241, 26, 60, 64, 126, 66, 241, 231, 142, 100, 0, 124, 0, 124, 0, 0, 36, 255, 36, 36, 36, 36, 0, 219, 219, 219, 255, 219, 219, 219, 36, 36, 255, 36, 36, 255, 219, 0, 219, 219, 219, 255, 219, 219, 219, 0, 0, 0, 0, 8, 9, 15, 15, 15, 0, 0, 15, 7, 6, 1, 2, 1, 15, 15, 15, 31, 63, 127, 123, 0, 2, 0, 0, 0, 16, 32, 0, 0, 0, 24, 8, 8, 8, 8, 24, 8, 0, 24, 16, 16, 16, 16, 0, 16, 24, 8, 24, 8, 8, 44, 70, 0, 0, 16, 0, 16, 16, 48, 120, 0, 0, 0, 24, 24, 24, 239, 247, 24, 0, 0, 24, 24, 24, 247, 239, 255, 24, 24, 24, 24, 24, 0, 0, 0, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0, 16, 0, 252, 254, 254, 16, 0, 0, 24, 252, 2, 0, 0, 24, 16, 16, 16, 16, 16, 16, 16, 16, 24, 24, 24, 24, 24, 24, 24, 24, 24, 211, 132, 194, 152, 24, 0, 16, 24, 219, 255, 189, 247, 102, 60, 24, 16, 16, 16, 16, 16, 16, 16, 0, 24, 24, 24, 24, 28, 24, 28, 0, 0, 0, 0, 0, 0, 96, 176, 176, 0, 0, 0, 0, 0, 64, 160, 160, 176, 176, 176, 176, 96, 0, 0, 0, 160, 160, 160, 160, 64, 0, 0, 0, 0, 0, 0, 0, 0, 102, 187, 187, 0, 0, 0, 0, 0, 68, 170, 170, 187, 187, 187, 187, 102, 0, 0, 0, 170, 170, 170, 170, 68, 0, 0, 0, 0, 0, 0, 0, 96, 230, 107, 107, 0, 0, 0, 0, 64, 196, 74, 74, 107, 107, 107, 107, 246, 0, 0, 0, 74, 74, 74, 74, 228, 0, 0, 0, 0, 0, 0, 0, 15, 12, 12, 14, 0, 0, 0, 0, 14, 8, 8, 12, 11, 3, 3, 11, 6, 0, 0, 0, 10, 2, 2, 10, 4, 0, 0, 0, 0, 0, 0, 0, 6, 11, 11, 3, 0, 0, 0, 0, 4, 10, 10, 2, 6, 12, 12, 12, 15, 0, 0, 0, 4, 8, 8, 8, 14, 0, 0, 0, 0, 0, 0, 0, 15, 11, 3, 3, 0, 0, 0, 0, 14, 10, 2, 2, 6, 6, 6, 6, 6, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 28, 62, 93, 73, 99, 54, 107, 127, 0, 0, 54, 62, 28, 8, 119, 99, 197, 3, 2, 62, 54, 52, 16, 48, 186, 117, 62, 62, 20, 34, 32, 0, 0, 0, 0, 0, 4, 2, 49, 33, 0, 0, 0, 0, 56, 64, 176, 160, 1, 129, 66, 60, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 255, 0, 153, 0, 0, 153, 0, 255, 0, 255, 153, 153, 153, 153, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 60, 84, 112, 0, 0, 0, 24, 62, 127, 255, 255, 42, 80, 16, 0, 0, 0, 0, 0, 255, 255, 254, 126, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 15, 31, 31, 31, 31, 15, 0, 1, 8, 16, 1, 16, 22, 0, 0, 0, 0, 15, 24, 50, 39, 102, 0, 0, 0, 0, 7, 13, 26, 25, 64, 64, 64, 64, 96, 120, 63, 31, 63, 63, 63, 63, 31, 7, 0, 0, 0, 0, 0, 0, 7, 28, 48, 98, 0, 0, 0, 0, 0, 3, 15, 29, 71, 198, 128, 128, 192, 240, 127, 63, 58, 57, 127, 127, 63, 15, 0, 0, 0, 31, 32, 120, 124, 252, 254, 254, 0, 0, 31, 7, 51, 123, 93, 93, 255, 255, 126, 64, 32, 28, 3, 0, 124, 56, 1, 63, 31, 3, 0, 0, 0, 0, 128, 96, 31, 2, 39, 24, 0, 0, 0, 128, 224, 252, 216, 231, 9, 146, 33, 2, 12, 48, 192, 0, 246, 108, 222, 252, 240, 192, 0, 0, 0, 3, 12, 27, 22, 44, 174, 31, 7, 12, 19, 36, 41, 83, 209, 164, 15, 79, 135, 0, 2, 4, 4, 0, 150, 114, 232, 199, 142, 140, 196, 64, 0, 192, 48, 216, 104, 53, 116, 248, 224, 48, 200, 36, 148, 203, 139, 37, 242, 240, 224, 0, 64, 32, 32, 0, 110, 78, 18, 226, 114, 52, 32, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 3, 63, 127, 127, 255, 255, 95, 0, 0, 1, 62, 6, 99, 89, 21, 31, 7, 35, 127, 127, 63, 1, 0, 6, 4, 0, 42, 60, 0, 0, 0, 0, 240, 248, 252, 252, 255, 255, 254, 0, 0, 240, 24, 24, 24, 243, 226, 255, 255, 254, 252, 255, 255, 255, 14, 232, 203, 18, 32, 104, 19, 6, 0, 0, 240, 248, 252, 255, 255, 254, 255, 0, 0, 240, 24, 24, 27, 242, 224, 255, 254, 252, 252, 254, 255, 254, 28, 235, 202, 16, 40, 80, 14, 24, 0, 7, 8, 22, 40, 32, 0, 31, 63, 0, 7, 15, 31, 31, 63, 32, 10, 63, 71, 83, 38, 124, 204, 222, 123, 0, 56, 44, 25, 3, 51, 33, 0, 240, 12, 6, 2, 3, 1, 1, 131, 0, 240, 248, 252, 252, 254, 254, 124, 199, 255, 94, 83, 89, 202, 249, 183, 56, 0, 160, 172, 166, 52, 6, 0, 7, 8, 22, 60, 67, 153, 189, 190, 0, 7, 15, 3, 60, 102, 102, 65, 190, 190, 156, 65, 127, 145, 167, 89, 65, 99, 107, 62, 0, 110, 88, 0, 240, 12, 6, 2, 3, 129, 193, 195, 0, 240, 248, 252, 252, 126, 62, 60, 227, 255, 254, 148, 146, 18, 50, 36, 28, 0, 0, 104, 108, 236, 204, 216, 0, 0, 0, 0, 60, 102, 219, 189, 0, 0, 0, 0, 0, 24, 60, 126, 189, 219, 102, 60, 0, 0, 0, 0, 126, 60, 24, 0, 0, 0, 0, 0, 0, 0, 0, 7, 24, 35, 30, 252, 0, 0, 0, 0, 7, 28, 9, 3, 255, 255, 255, 143, 1, 1, 0, 0, 252, 255, 142, 0, 0, 0, 0, 0, 3, 13, 18, 254, 57, 54, 60, 124, 0, 2, 12, 0, 198, 200, 192, 128, 59, 141, 2, 12, 4, 143, 119, 2, 196, 114, 252, 240, 248, 112, 0, 2, 0, 0, 0, 240, 32, 48, 12, 99, 0, 0, 0, 0, 192, 192, 240, 156, 249, 253, 110, 50, 44, 147, 111, 2, 6, 2, 144, 204, 208, 108, 0, 2, 36, 37, 110, 127, 127, 255, 255, 255, 0, 0, 1, 0, 0, 17, 3, 86, 255, 127, 124, 120, 62, 57, 16, 16, 126, 60, 59, 55, 17, 16, 0, 0, 0, 248, 220, 246, 190, 250, 218, 218, 0, 0, 32, 8, 64, 4, 36, 36, 155, 55, 103, 7, 31, 247, 239, 238, 100, 200, 152, 248, 224, 0, 74, 0, 36, 36, 109, 126, 127, 255, 255, 255, 0, 0, 0, 1, 0, 17, 3, 86, 255, 127, 127, 120, 60, 59, 17, 23, 126, 60, 56, 55, 19, 16, 0, 2, 0, 0, 240, 216, 252, 180, 254, 218, 0, 0, 0, 32, 0, 72, 0, 36, 219, 155, 51, 102, 12, 120, 252, 254, 36, 100, 204, 152, 240, 128, 0, 128, 0, 0, 0, 0, 3, 15, 31, 63, 0, 0, 0, 0, 0, 0, 4, 0, 63, 127, 127, 127, 135, 89, 54, 205, 1, 16, 0, 2, 248, 94, 55, 205, 0, 0, 0, 0, 224, 248, 252, 222, 0, 0, 0, 0, 32, 168, 40, 42, 214, 215, 149, 171, 170, 170, 74, 0, 42, 42, 106, 84, 85, 85, 181, 254, 0, 0, 0, 0, 3, 15, 31, 63, 0, 0, 0, 0, 0, 0, 4, 0, 63, 127, 127, 127, 7, 105, 202, 26, 1, 16, 0, 2, 120, 110, 203, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 2, 5, 107, 111, 240, 131, 0, 0, 1, 2, 68, 67, 15, 124, 14, 241, 135, 127, 15, 31, 31, 31, 251, 46, 120, 0, 2, 8, 0, 7, 240, 248, 28, 236, 238, 196, 4, 62, 0, 0, 224, 16, 144, 184, 248, 210, 127, 255, 255, 241, 225, 224, 240, 224, 128, 65, 64, 206, 158, 159, 143, 31, 15, 7, 6, 2, 7, 15, 31, 11, 0, 0, 3, 3, 0, 0, 0, 4, 10, 6, 2, 1, 1, 1, 6, 12, 5, 1, 1, 0, 0, 0, 1, 7, 249, 198, 194, 194, 228, 248, 252, 252, 30, 60, 60, 252, 24, 0, 0, 0, 16, 48, 40, 40, 48, 224, 16, 16, 224, 192, 208, 208, 192, 224, 224, 224, 0, 3, 1, 2, 5, 107, 111, 240, 0, 0, 0, 1, 2, 68, 67, 15, 131, 14, 249, 183, 67, 66, 68, 56, 124, 251, 38, 72, 60, 63, 63, 7, 0, 240, 248, 28, 236, 238, 196, 4, 0, 0, 0, 224, 16, 144, 184, 248, 60, 126, 254, 206, 134, 6, 4, 28, 224, 132, 0, 50, 120, 248, 248, 224, 15, 15, 7, 5, 5, 15, 31, 31, 0, 0, 0, 6, 7, 0, 0, 0, 9, 16, 17, 17, 18, 252, 130, 66, 6, 15, 14, 14, 12, 28, 252, 60, 248, 248, 248, 240, 248, 252, 254, 254, 0, 0, 0, 16, 224, 0, 0, 0, 252, 132, 132, 71, 40, 24, 17, 50, 0, 120, 120, 60, 31, 7, 14, 28, 0, 0, 0, 4, 252, 132, 130, 130, 0, 0, 0, 0, 128, 248, 252, 252, 206, 114, 51, 1, 1, 1, 0, 0, 240, 96, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 4, 120, 160, 144, 11, 140, 112, 0, 3, 7, 95, 111, 252, 112, 0, 0, 0, 1, 1, 3, 6, 12, 24, 16, 0, 0, 0, 0, 0, 0, 0, 32, 136, 7, 129, 67, 38, 44, 24, 0, 112, 249, 127, 63, 30, 28, 24, 0, 94, 70, 187, 241, 240, 97, 1, 3, 33, 49, 64, 0, 1, 0, 0, 0, 1, 3, 1, 0, 6, 14, 0, 3, 2, 0, 0, 1, 1, 0, 1, 0, 254, 127, 247, 227, 243, 250, 254, 240, 56, 128, 8, 28, 12, 68, 240, 224, 144, 240, 248, 248, 248, 252, 124, 248, 96, 224, 240, 112, 96, 0, 128, 0, };
        private readonly int[] _samus1Up = { 28, 62, 93, 73, 99, 54, 107, 127, 0, 0, 54, 62, 28, 8, 119, 99, 197, 3, 2, 62, 54, 52, 16, 48, 186, 117, 62, 62, 20, 34, 32, 0, };
        private readonly int[] _samusOw = { 0, 60, 126, 111, 79, 31, 54, 58, 0, 0, 0, 48, 112, 96, 78, 158, 30, 30, 60, 62, 62, 118, 37, 193, 238, 252, 112, 28, 54, 55, 66, 32, 60, 126, 111, 79, 31, 58, 61, 31, 0, 0, 48, 112, 96, 78, 31, 239, 30, 62, 62, 28, 24, 28, 12, 48, 252, 114, 62, 12, 16, 16, 16, 8, 28, 62, 127, 127, 127, 62, 107, 119, 0, 0, 0, 0, 0, 20, 119, 107, 221, 43, 62, 62, 54, 52, 16, 48, 162, 117, 62, 62, 20, 34, 32, 0, 28, 62, 93, 73, 99, 54, 107, 127, 0, 0, 54, 62, 28, 8, 119, 99, 197, 3, 2, 62, 54, 52, 16, 48, 186, 117, 62, 62, 20, 34, 32, 0, };
        private readonly int[] _samusSleeper = { 0, 0, 0, 0, 7, 15, 23, 27, 0, 0, 0, 0, 7, 7, 31, 29, 62, 63, 62, 63, 63, 31, 35, 34, 55, 52, 57, 60, 62, 31, 62, 63, 12, 31, 63, 63, 119, 127, 119, 127, 12, 31, 44, 54, 127, 118, 124, 119, 12, 158, 223, 239, 247, 227, 251, 252, 12, 146, 81, 44, 62, 28, 252, 255, 0, 0, 0, 129, 206, 240, 100, 232, 0, 0, 0, 129, 79, 127, 223, 255, 0, 0, 0, 224, 24, 4, 2, 53, 0, 0, 0, 224, 248, 252, 254, 255, };
        private readonly int[] _samusTitle = { 28, 62, 93, 73, 99, 54, 107, 127, 0, 0, 54, 62, 28, 8, 119, 99, 197, 3, 2, 62, 54, 52, 16, 48, 186, 117, 62, 62, 20, 34, 32, 0, };
        private readonly int[] _samusEnd1 = { 0, 15, 63, 63, 59, 31, 63, 63, 0, 0, 16, 8, 5, 9, 27, 26, 63, 31, 4, 8, 8, 31, 23, 79, 28, 4, 3, 7, 7, 0, 11, 3, 0, 128, 192, 192, 224, 224, 240, 240, 0, 0, 0, 0, 0, 0, 0, 0, 240, 240, 248, 120, 120, 248, 240, 208, 0, 0, 0, 128, 128, 0, 128, 32, 255, 255, 127, 0, 0, 1, 1, 1, 71, 254, 0, 0, 0, 0, 0, 0, 3, 2, 2, 2, 2, 4, 4, 15, 0, 1, 1, 1, 1, 3, 3, 0, 208, 144, 56, 200, 132, 4, 4, 2, 32, 96, 192, 48, 120, 248, 248, 252, 2, 2, 2, 3, 1, 1, 5, 212, 252, 252, 252, 252, 254, 254, 250, 43, 192, 224, 0, 64, 96, 96, 96, 32, 195, 231, 7, 15, 15, 15, 15, 15, 0, 8, 8, 0, 0, 2, 7, 7, 23, 23, 7, 7, 5, 1, 0, 0, 3, 5, 14, 14, 12, 12, 4, 4, 0, 4, 14, 14, 12, 12, 4, 4, 12, 0, 28, 24, 24, 8, 40, 48, 12, 0, 0, 0, 0, 0, 16, 0, 0, 0, 64, 64, 160, 224, 192, 0, 224, 144, 88, 80, 160, 224, 192, 0, 128, 128, 192, 224, 224, 208, 63, 30, 128, 128, 192, 64, 0, 0, 7, 6, 128, 128, 64, 96, 96, 48, 16, 16, 0, 0, 64, 96, 96, 48, 16, 16, 0, 56, 48, 48, 16, 48, 40, 28, 0, 0, 0, 0, 0, 0, 16, 0, };
        private readonly int[] _samusEnd2 = { 0, 0, 0, 0, 7, 15, 23, 27, 0, 0, 0, 0, 7, 7, 31, 29, 62, 63, 62, 63, 63, 31, 35, 34, 55, 52, 57, 60, 62, 31, 62, 63, 12, 31, 63, 63, 119, 127, 119, 127, 12, 31, 44, 54, 127, 118, 124, 119, 12, 158, 223, 239, 247, 227, 251, 252, 12, 146, 81, 44, 62, 28, 252, 255, 0, 0, 0, 129, 206, 240, 100, 232, 0, 0, 0, 129, 79, 127, 223, 255, 0, 0, 0, 224, 24, 4, 2, 53, 0, 0, 0, 224, 248, 252, 254, 255, 255, 129, 255, 255, 153, 153, 153, 153, 1, 127, 255, 17, 119, 119, 119, 119, 16, 16, 16, 16, 0, 0, 16, 0, 8, 8, 8, 8, 24, 0, 8, 24, 0, 0, 0, 0, 7, 15, 23, 27, 0, 0, 0, 0, 7, 7, 31, 29, 62, 63, 62, 63, 63, 31, 35, 34, 55, 52, 57, 60, 62, 31, 62, 63, 0, 0, 0, 0, 0, 192, 224, 96, 0, 0, 0, 0, 0, 192, 224, 160, 192, 224, 160, 224, 224, 192, 64, 160, 96, 32, 96, 32, 96, 192, 192, 96, 60, 60, 28, 56, 57, 61, 125, 255, 63, 39, 7, 15, 15, 14, 31, 31, 32, 48, 48, 224, 240, 128, 6, 15, 224, 240, 240, 231, 63, 127, 255, 255, };
        private readonly int[] _samusEnd3 = { 97, 231, 203, 229, 210, 208, 220, 54, 0, 0, 4, 14, 143, 203, 65, 176, 58, 125, 127, 63, 15, 6, 9, 7, 252, 250, 114, 33, 16, 9, 15, 7, 7, 7, 6, 14, 12, 12, 28, 24, 7, 7, 6, 14, 12, 12, 12, 16, 56, 56, 56, 120, 8, 240, 248, 112, 56, 56, 56, 16, 112, 8, 0, 0, };
        private readonly int[] _samusHead = { 1, 6, 56, 60, 60, 28, 96, 128, 1, 24, 36, 110, 118, 36, 24, 128, };
        private readonly int[] _samusRaft = { 3, 7, 6, 4, 1, 3, 3, 241, 0, 0, 3, 7, 6, 4, 1, 14, 241, 251, 255, 255, 255, 255, 254, 255, 127, 7, 127, 0, 127, 1, 127, 0, 192, 224, 240, 240, 240, 160, 208, 255, 0, 0, 0, 0, 0, 224, 240, 240, 255, 255, 255, 255, 255, 255, 255, 127, 222, 32, 254, 192, 126, 0, 62, 128, };
        private readonly int[] _samusBeam = { 0, 0, 0, 0, 0, 113, 216, 174, 0, 0, 0, 0, 0, 0, 32, 112, 183, 204, 116, 126, 16, 0, 0, 0, 120, 48, 8, 0, 0, 0, 0, 0, };

        private readonly int[] _simonsprite = { 0, 15, 31, 19, 251, 147, 215, 221, 0, 0, 0, 12, 14, 110, 108, 99, 211, 223, 217, 217, 221, 223, 223, 211, 103, 32, 102, 102, 106, 44, 96, 97, 0, 0, 128, 192, 192, 248, 252, 252, 0, 0, 0, 0, 0, 0, 120, 240, 254, 249, 253, 255, 252, 252, 248, 248, 240, 102, 2, 0, 0, 64, 8, 80, 211, 167, 175, 81, 34, 44, 60, 60, 96, 68, 72, 14, 28, 16, 0, 24, 60, 60, 120, 124, 252, 248, 0, 0, 24, 24, 48, 56, 120, 0, 0, 0, 252, 252, 252, 136, 136, 200, 88, 124, 64, 64, 0, 112, 112, 48, 32, 8, 62, 31, 15, 15, 15, 31, 31, 0, 24, 12, 6, 6, 6, 14, 0, 0, 15, 31, 19, 251, 147, 215, 221, 211, 0, 0, 12, 14, 110, 108, 99, 103, 223, 217, 217, 221, 223, 223, 211, 211, 32, 102, 102, 106, 44, 96, 97, 96, 0, 128, 192, 192, 248, 252, 252, 254, 0, 0, 0, 0, 0, 120, 240, 240, 249, 253, 255, 252, 252, 248, 248, 252, 102, 2, 0, 0, 64, 8, 80, 64, 166, 164, 72, 49, 99, 124, 120, 120, 65, 67, 7, 14, 28, 0, 0, 48, 124, 124, 120, 120, 248, 248, 248, 0, 56, 56, 56, 48, 112, 240, 0, 0, 124, 60, 124, 240, 144, 144, 240, 248, 184, 192, 128, 0, 96, 96, 0, 16, 124, 62, 30, 14, 30, 30, 126, 0, 56, 24, 12, 6, 12, 60, 0, 0, 215, 167, 167, 67, 5, 9, 9, 13, 100, 68, 64, 0, 2, 6, 6, 2, 7, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 248, 248, 56, 32, 32, 32, 32, 224, 32, 0, 192, 192, 192, 192, 192, 0, 240, 252, 252, 252, 248, 248, 240, 0, 192, 192, 104, 104, 112, 240, 0, 0, 0, 0, 0, 44, 124, 255, 255, 255, 0, 0, 0, 0, 0, 0, 3, 7, 255, 239, 29, 8, 56, 121, 127, 63, 3, 21, 6, 7, 7, 54, 48, 0, 0, 0, 0, 0, 0, 0, 128, 248, 0, 0, 0, 0, 0, 0, 0, 128, 252, 252, 252, 252, 250, 250, 252, 252, 248, 248, 0, 0, 4, 4, 8, 240, 7, 9, 17, 16, 33, 34, 37, 56, 0, 6, 14, 15, 30, 29, 24, 0, 124, 124, 124, 60, 60, 62, 126, 248, 56, 56, 56, 24, 24, 28, 56, 112, 252, 252, 254, 127, 63, 255, 255, 223, 0, 0, 0, 134, 206, 58, 66, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 81, 83, 83, 82, 82, 82, 83, 32, 32, 48, 49, 49, 49, 49, 48, 81, 115, 223, 127, 223, 159, 79, 59, 48, 33, 97, 6, 46, 109, 51, 2, 0, 224, 240, 248, 124, 124, 220, 204, 0, 0, 0, 128, 128, 224, 224, 112, 196, 196, 196, 236, 248, 248, 248, 248, 120, 184, 60, 16, 0, 208, 208, 0, 127, 129, 252, 127, 60, 30, 47, 95, 0, 126, 3, 56, 24, 12, 30, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252, 252, 252, 252, 200, 136, 136, 248, 0, 0, 0, 0, 48, 112, 112, 96, 124, 124, 124, 60, 60, 62, 94, 184, 16, 56, 24, 24, 24, 28, 56, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 27, 31, 15, 31, 127, 63, 15, 17, 25, 28, 9, 1, 112, 54, 6, 209, 163, 167, 73, 17, 50, 44, 60, 96, 66, 68, 6, 14, 12, 16, 0, 60, 60, 60, 56, 252, 252, 252, 0, 24, 24, 24, 16, 56, 120, 0, 0, 3, 4, 11, 20, 248, 136, 232, 233, 0, 3, 4, 8, 0, 112, 112, 112, 233, 232, 235, 239, 239, 239, 239, 205, 112, 17, 112, 114, 118, 22, 113, 113, 255, 60, 255, 111, 71, 79, 254, 255, 0, 195, 0, 48, 56, 56, 56, 128, 255, 255, 254, 252, 255, 254, 254, 254, 7, 124, 121, 3, 0, 4, 228, 240, 209, 147, 167, 201, 17, 50, 44, 60, 96, 98, 68, 6, 14, 12, 16, 0, 60, 60, 60, 56, 252, 252, 252, 0, 24, 24, 24, 16, 56, 120, 0, 0, 252, 252, 252, 136, 136, 200, 88, 124, 64, 64, 0, 112, 112, 48, 32, 8, 62, 31, 15, 15, 15, 31, 31, 0, 24, 12, 6, 6, 6, 14, 0, 0, 224, 16, 232, 20, 20, 20, 20, 12, 0, 224, 16, 8, 8, 8, 8, 0, 146, 208, 122, 124, 124, 248, 0, 0, 12, 142, 132, 152, 184, 0, 0, 0, 0, 0, 0, 0, 0, 16, 32, 80, 0, 0, 0, 0, 0, 0, 16, 32, 160, 160, 160, 95, 32, 31, 0, 0, 64, 64, 64, 32, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 224, 31, 224, 0, 0, 0, 0, 0, 31, 224, 0, 0, 0, 0, 124, 254, 158, 223, 159, 190, 253, 0, 0, 0, 96, 112, 120, 121, 19, 63, 95, 255, 127, 139, 112, 49, 31, 6, 44, 24, 128, 116, 15, 15, 4, 0, 0, 0, 0, 0, 128, 192, 224, 0, 0, 0, 0, 0, 0, 128, 192, 224, 16, 184, 248, 56, 248, 252, 252, 0, 224, 64, 16, 192, 224, 136, 72, 15, 7, 15, 9, 17, 50, 44, 60, 0, 2, 4, 6, 14, 12, 16, 0, 60, 60, 60, 56, 252, 252, 252, 0, 24, 24, 24, 16, 56, 120, 0, 0, 252, 252, 252, 136, 136, 200, 88, 124, 64, 64, 0, 112, 112, 48, 32, 8, 62, 31, 15, 15, 15, 31, 31, 0, 24, 12, 6, 6, 6, 14, 0, 0, 0, 0, 44, 124, 255, 255, 255, 255, 0, 0, 0, 0, 0, 3, 7, 3, 239, 29, 8, 56, 121, 127, 63, 127, 21, 6, 7, 7, 54, 48, 0, 0, 0, 0, 0, 0, 0, 128, 248, 252, 0, 0, 0, 0, 0, 0, 128, 248, 252, 252, 252, 250, 250, 252, 252, 252, 248, 0, 0, 4, 4, 8, 240, 0, 243, 243, 254, 124, 61, 124, 255, 63, 124, 124, 113, 51, 26, 59, 124, 4, 10, 10, 10, 10, 10, 10, 10, 10, 12, 12, 12, 12, 12, 12, 4, 4, 252, 254, 127, 63, 255, 255, 223, 128, 0, 0, 134, 206, 58, 66, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 31, 19, 251, 147, 215, 221, 0, 0, 0, 12, 14, 110, 108, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 192, 192, 248, 252, 252, 0, 0, 0, 0, 0, 0, 120, 240, 211, 223, 217, 217, 221, 223, 223, 211, 103, 32, 102, 102, 106, 44, 96, 97, 223, 179, 179, 254, 124, 61, 124, 255, 96, 92, 92, 49, 51, 26, 59, 124, 254, 249, 253, 255, 252, 252, 248, 248, 240, 102, 2, 0, 0, 64, 8, 80, 252, 252, 254, 127, 63, 255, 255, 223, 0, 0, 0, 134, 206, 58, 66, 6, 0, 32, 32, 114, 120, 122, 250, 248, 0, 36, 38, 84, 75, 71, 135, 135, 252, 252, 220, 138, 1, 1, 0, 0, 131, 131, 131, 129, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 10, 24, 0, 4, 6, 4, 3, 7, 15, 31, 28, 30, 30, 30, 31, 31, 12, 8, 27, 29, 29, 29, 24, 24, 8, 8, 8, 9, 88, 92, 116, 116, 102, 110, 0, 0, 0, 0, 8, 8, 24, 16, 203, 195, 137, 153, 219, 102, 60, 0, 52, 60, 126, 126, 60, 24, 0, 0, 32, 80, 160, 160, 176, 79, 48, 15, 16, 32, 64, 64, 64, 48, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 254, 158, 223, 159, 190, 252, 0, 0, 0, 96, 112, 120, 121, 19, 0, 0, 0, 0, 3, 252, 3, 252, 0, 0, 0, 0, 0, 3, 252, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 95, 63, 63, 251, 16, 241, 63, 6, 44, 24, 16, 4, 239, 15, 12, 127, 243, 243, 254, 124, 61, 124, 255, 0, 124, 124, 113, 51, 26, 59, 124, 224, 16, 184, 248, 56, 248, 252, 252, 0, 224, 64, 16, 192, 224, 136, 72, 252, 252, 254, 127, 63, 255, 255, 223, 0, 0, 0, 134, 206, 58, 66, 6, 0, 0, 0, 0, 6, 11, 3, 3, 0, 0, 0, 0, 4, 10, 2, 2, 6, 3, 3, 11, 6, 0, 0, 0, 4, 2, 2, 10, 4, 0, 0, 0, 68, 68, 198, 198, 238, 238, 254, 254, 0, 0, 0, 0, 0, 0, 40, 124, 124, 124, 254, 254, 255, 127, 63, 127, 56, 16, 68, 124, 124, 50, 14, 62, 254, 254, 254, 126, 252, 254, 254, 126, 92, 96, 124, 28, 96, 124, 124, 48, 126, 127, 127, 255, 254, 254, 126, 60, 12, 62, 62, 14, 112, 124, 60, 0, 0, 60, 64, 132, 130, 130, 0, 16, 0, 60, 126, 231, 195, 195, 255, 24, 16, 16, 16, 22, 16, 16, 16, 0, 24, 24, 24, 30, 30, 30, 24, 0, 0, 84, 56, 124, 68, 68, 40, 198, 0, 84, 40, 0, 56, 56, 16, 254, 171, 147, 57, 16, 0, 0, 0, 0, 215, 215, 131, 40, 48, 48, 32, 32, 0, 84, 56, 125, 199, 199, 238, 0, 0, 84, 40, 1, 187, 187, 214, 56, 40, 16, 56, 16, 0, 0, 0, 0, 84, 84, 130, 40, 48, 48, 32, 32, 0, 0, 0, 0, 111, 236, 108, 110, 0, 0, 0, 0, 78, 200, 72, 76, 107, 99, 99, 107, 246, 0, 0, 0, 74, 66, 66, 74, 228, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 84, 60, 56, 16, 28, 56, 120, 0, 84, 62, 62, 28, 0, 60, 126, 124, 248, 252, 248, 252, 248, 112, 0, 126, 199, 219, 199, 223, 223, 255, 126, 255, 129, 129, 255, 255, 129, 129, 255, 255, 254, 254, 0, 255, 254, 254, 0, 255, 129, 129, 255, 255, 129, 129, 255, 255, 254, 254, 0, 255, 254, 254, 0, 255, 129, 129, 129, 129, 129, 129, 129, 255, 254, 254, 254, 230, 194, 194, 230, 129, 129, 129, 129, 129, 129, 129, 255, 238, 238, 230, 238, 254, 254, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 56, 254, 56, 16, 16, 16, 16, 16, 56, 254, 56, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 130, 64, 0, 129, 0, 68, 145, 17, 130, 64, 0, 129, 0, 68, 145, 0, 0, 0, 0, 7, 24, 38, 31, 0, 0, 0, 0, 0, 7, 25, 4, 127, 159, 65, 60, 252, 25, 19, 15, 12, 96, 190, 227, 3, 14, 12, 0, 0, 0, 56, 72, 144, 16, 40, 108, 0, 0, 0, 48, 96, 224, 200, 140, 28, 62, 126, 62, 63, 127, 255, 191, 236, 222, 150, 210, 203, 137, 21, 69, 1, 1, 3, 62, 64, 47, 242, 49, 0, 0, 0, 1, 63, 80, 129, 32, 0, 1, 2, 2, 2, 7, 8, 15, 0, 0, 1, 1, 1, 0, 7, 4, 63, 31, 31, 63, 123, 249, 125, 28, 205, 229, 229, 197, 129, 1, 129, 224, 140, 24, 48, 232, 102, 96, 48, 152, 112, 224, 204, 4, 129, 135, 192, 96, 0, 0, 0, 0, 0, 113, 216, 174, 0, 0, 0, 0, 0, 0, 32, 112, 183, 204, 116, 126, 16, 0, 0, 0, 120, 48, 8, 0, 0, 0, 0, 0, 0, 0, 0, 4, 3, 6, 21, 11, 0, 0, 0, 0, 0, 1, 3, 7, 15, 9, 6, 3, 4, 0, 0, 0, 3, 7, 1, 0, 0, 0, 0, 0, 11, 5, 20, 74, 0, 216, 0, 20, 0, 3, 12, 58, 16, 56, 64, 52, 32, 8, 48, 76, 17, 36, 5, 9, 224, 72, 16, 60, 1, 12, 3, 0, 0, 0, 0, 0, 0, 0, 102, 91, 0, 0, 0, 0, 0, 0, 0, 36, 129, 161, 161, 66, 36, 24, 0, 0, 126, 126, 126, 60, 24, 0, 0, 0, 16, 56, 108, 68, 100, 56, 0, 56, 0, 0, 16, 56, 24, 0, 0, 56, 56, 56, 56, 56, 56, 0, 0, 0, 56, 56, 56, 56, 57, 255, 126, 0, 0, 20, 252, 212, 212, 252, 132, 133, 0, 40, 128, 40, 168, 128, 121, 248, 142, 152, 241, 26, 60, 64, 126, 66, 241, 231, 142, 100, 0, 124, 0, 124, 0, 0, 36, 255, 36, 36, 36, 36, 0, 219, 219, 219, 255, 219, 219, 219, 36, 36, 255, 36, 36, 255, 219, 0, 219, 219, 219, 255, 219, 219, 219, 0, 0, 0, 0, 8, 9, 15, 15, 15, 0, 0, 15, 7, 6, 1, 2, 1, 15, 15, 15, 31, 63, 127, 123, 0, 2, 0, 0, 0, 16, 32, 0, 0, 0, 24, 8, 8, 8, 8, 24, 8, 0, 24, 16, 16, 16, 16, 0, 16, 24, 8, 24, 8, 8, 44, 70, 0, 0, 16, 0, 16, 16, 48, 120, 0, 0, 0, 24, 24, 24, 239, 247, 24, 0, 0, 24, 24, 24, 247, 239, 255, 24, 24, 24, 24, 24, 0, 0, 0, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0, 16, 0, 252, 254, 254, 16, 0, 0, 24, 252, 2, 0, 0, 24, 16, 16, 16, 16, 16, 16, 16, 16, 24, 24, 24, 24, 24, 24, 24, 24, 24, 211, 132, 194, 152, 24, 0, 16, 24, 219, 255, 189, 247, 102, 60, 24, 16, 16, 16, 16, 16, 16, 16, 0, 24, 24, 24, 24, 28, 24, 28, 0, 0, 0, 0, 0, 0, 96, 176, 176, 0, 0, 0, 0, 0, 64, 160, 160, 176, 176, 176, 176, 96, 0, 0, 0, 160, 160, 160, 160, 64, 0, 0, 0, 0, 0, 0, 0, 0, 102, 187, 187, 0, 0, 0, 0, 0, 68, 170, 170, 187, 187, 187, 187, 102, 0, 0, 0, 170, 170, 170, 170, 68, 0, 0, 0, 0, 0, 0, 0, 96, 230, 107, 107, 0, 0, 0, 0, 64, 196, 74, 74, 107, 107, 107, 107, 246, 0, 0, 0, 74, 74, 74, 74, 228, 0, 0, 0, 0, 0, 0, 0, 15, 12, 12, 14, 0, 0, 0, 0, 14, 8, 8, 12, 11, 3, 3, 11, 6, 0, 0, 0, 10, 2, 2, 10, 4, 0, 0, 0, 0, 0, 0, 0, 6, 11, 11, 3, 0, 0, 0, 0, 4, 10, 10, 2, 6, 12, 12, 12, 15, 0, 0, 0, 4, 8, 8, 8, 14, 0, 0, 0, 0, 0, 0, 0, 15, 11, 3, 3, 0, 0, 0, 0, 14, 10, 2, 2, 6, 6, 6, 6, 6, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 62, 127, 127, 93, 99, 127, 62, 0, 0, 0, 0, 62, 93, 34, 93, 126, 127, 126, 62, 8, 6, 48, 48, 65, 93, 63, 0, 54, 54, 48, 48, 0, 0, 0, 0, 4, 2, 49, 33, 0, 0, 0, 0, 56, 64, 176, 160, 1, 129, 66, 60, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 255, 0, 153, 0, 0, 153, 0, 255, 0, 255, 153, 153, 153, 153, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 60, 84, 112, 0, 0, 0, 24, 62, 127, 255, 255, 42, 80, 16, 0, 0, 0, 0, 0, 255, 255, 254, 126, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 15, 31, 31, 31, 31, 15, 0, 1, 8, 16, 1, 16, 22, 0, 0, 0, 0, 15, 24, 50, 39, 102, 0, 0, 0, 0, 7, 13, 26, 25, 64, 64, 64, 64, 96, 120, 63, 31, 63, 63, 63, 63, 31, 7, 0, 0, 0, 0, 0, 0, 7, 28, 48, 98, 0, 0, 0, 0, 0, 3, 15, 29, 71, 198, 128, 128, 192, 240, 127, 63, 58, 57, 127, 127, 63, 15, 0, 0, 0, 31, 32, 120, 124, 252, 254, 254, 0, 0, 31, 7, 51, 123, 93, 93, 255, 255, 126, 64, 32, 28, 3, 0, 124, 56, 1, 63, 31, 3, 0, 0, 0, 0, 128, 96, 31, 2, 39, 24, 0, 0, 0, 128, 224, 252, 216, 231, 9, 146, 33, 2, 12, 48, 192, 0, 246, 108, 222, 252, 240, 192, 0, 0, 0, 3, 12, 27, 22, 44, 174, 31, 7, 12, 19, 36, 41, 83, 209, 164, 15, 79, 135, 0, 2, 4, 4, 0, 150, 114, 232, 199, 142, 140, 196, 64, 0, 192, 48, 216, 104, 53, 116, 248, 224, 48, 200, 36, 148, 203, 139, 37, 242, 240, 224, 0, 64, 32, 32, 0, 110, 78, 18, 226, 114, 52, 32, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 3, 63, 127, 127, 255, 255, 95, 0, 0, 1, 62, 6, 99, 89, 21, 31, 7, 35, 127, 127, 63, 1, 0, 6, 4, 0, 42, 60, 0, 0, 0, 0, 240, 248, 252, 252, 255, 255, 254, 0, 0, 240, 24, 24, 24, 243, 226, 255, 255, 254, 252, 255, 255, 255, 14, 232, 203, 18, 32, 104, 19, 6, 0, 0, 240, 248, 252, 255, 255, 254, 255, 0, 0, 240, 24, 24, 27, 242, 224, 255, 254, 252, 252, 254, 255, 254, 28, 235, 202, 16, 40, 80, 14, 24, 0, 7, 8, 22, 40, 32, 0, 31, 63, 0, 7, 15, 31, 31, 63, 32, 10, 63, 71, 83, 38, 124, 204, 222, 123, 0, 56, 44, 25, 3, 51, 33, 0, 240, 12, 6, 2, 3, 1, 1, 131, 0, 240, 248, 252, 252, 254, 254, 124, 199, 255, 94, 83, 89, 202, 249, 183, 56, 0, 160, 172, 166, 52, 6, 0, 7, 8, 22, 60, 67, 153, 189, 190, 0, 7, 15, 3, 60, 102, 102, 65, 190, 190, 156, 65, 127, 145, 167, 89, 65, 99, 107, 62, 0, 110, 88, 0, 240, 12, 6, 2, 3, 129, 193, 195, 0, 240, 248, 252, 252, 126, 62, 60, 227, 255, 254, 148, 146, 18, 50, 36, 28, 0, 0, 104, 108, 236, 204, 216, 0, 0, 0, 0, 60, 102, 219, 189, 0, 0, 0, 0, 0, 24, 60, 126, 189, 219, 102, 60, 0, 0, 0, 0, 126, 60, 24, 0, 0, 0, 0, 0, 0, 0, 0, 7, 24, 35, 30, 252, 0, 0, 0, 0, 7, 28, 9, 3, 255, 255, 255, 143, 1, 1, 0, 0, 252, 255, 142, 0, 0, 0, 0, 0, 3, 13, 18, 254, 57, 54, 60, 124, 0, 2, 12, 0, 198, 200, 192, 128, 59, 141, 2, 12, 4, 143, 119, 2, 196, 114, 252, 240, 248, 112, 0, 2, 0, 0, 0, 240, 32, 48, 12, 99, 0, 0, 0, 0, 192, 192, 240, 156, 249, 253, 110, 50, 44, 147, 111, 2, 6, 2, 144, 204, 208, 108, 0, 2, 36, 37, 110, 127, 127, 255, 255, 255, 0, 0, 1, 0, 0, 17, 3, 86, 255, 127, 124, 120, 62, 57, 16, 16, 126, 60, 59, 55, 17, 16, 0, 0, 0, 248, 220, 246, 190, 250, 218, 218, 0, 0, 32, 8, 64, 4, 36, 36, 155, 55, 103, 7, 31, 247, 239, 238, 100, 200, 152, 248, 224, 0, 74, 0, 36, 36, 109, 126, 127, 255, 255, 255, 0, 0, 0, 1, 0, 17, 3, 86, 255, 127, 127, 120, 60, 59, 17, 23, 126, 60, 56, 55, 19, 16, 0, 2, 0, 0, 240, 216, 252, 180, 254, 218, 0, 0, 0, 32, 0, 72, 0, 36, 219, 155, 51, 102, 12, 120, 252, 254, 36, 100, 204, 152, 240, 128, 0, 128, 0, 0, 0, 0, 3, 15, 31, 63, 0, 0, 0, 0, 0, 0, 4, 0, 63, 127, 127, 127, 135, 89, 54, 205, 1, 16, 0, 2, 248, 94, 55, 205, 0, 0, 0, 0, 224, 248, 252, 222, 0, 0, 0, 0, 32, 168, 40, 42, 214, 215, 149, 171, 170, 170, 74, 0, 42, 42, 106, 84, 85, 85, 181, 254, 0, 0, 0, 0, 3, 15, 31, 63, 0, 0, 0, 0, 0, 0, 4, 0, 63, 127, 127, 127, 7, 105, 202, 26, 1, 16, 0, 2, 120, 110, 203, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 2, 5, 107, 111, 240, 131, 0, 0, 1, 2, 68, 67, 15, 124, 14, 241, 135, 127, 15, 31, 31, 31, 251, 46, 120, 0, 2, 8, 0, 7, 240, 248, 28, 236, 238, 196, 4, 62, 0, 0, 224, 16, 144, 184, 248, 210, 127, 255, 255, 241, 225, 224, 240, 224, 128, 65, 64, 206, 158, 159, 143, 31, 15, 7, 6, 2, 7, 15, 31, 11, 0, 0, 3, 3, 0, 0, 0, 4, 10, 6, 2, 1, 1, 1, 6, 12, 5, 1, 1, 0, 0, 0, 1, 7, 249, 198, 194, 194, 228, 248, 252, 252, 30, 60, 60, 252, 24, 0, 0, 0, 16, 48, 40, 40, 48, 224, 16, 16, 224, 192, 208, 208, 192, 224, 224, 224, 0, 3, 1, 2, 5, 107, 111, 240, 0, 0, 0, 1, 2, 68, 67, 15, 131, 14, 249, 183, 67, 66, 68, 56, 124, 251, 38, 72, 60, 63, 63, 7, 0, 240, 248, 28, 236, 238, 196, 4, 0, 0, 0, 224, 16, 144, 184, 248, 60, 126, 254, 206, 134, 6, 4, 28, 224, 132, 0, 50, 120, 248, 248, 224, 15, 15, 7, 5, 5, 15, 31, 31, 0, 0, 0, 6, 7, 0, 0, 0, 9, 16, 17, 17, 18, 252, 130, 66, 6, 15, 14, 14, 12, 28, 252, 60, 248, 248, 248, 240, 248, 252, 254, 254, 0, 0, 0, 16, 224, 0, 0, 0, 252, 132, 132, 71, 40, 24, 17, 50, 0, 120, 120, 60, 31, 7, 14, 28, 0, 0, 0, 4, 252, 132, 130, 130, 0, 0, 0, 0, 128, 248, 252, 252, 206, 114, 51, 1, 1, 1, 0, 0, 240, 96, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 4, 120, 160, 144, 11, 140, 112, 0, 3, 7, 95, 111, 252, 112, 0, 0, 0, 1, 1, 3, 6, 12, 24, 16, 0, 0, 0, 0, 0, 0, 0, 32, 136, 7, 129, 67, 38, 44, 24, 0, 112, 249, 127, 63, 30, 28, 24, 0, 94, 70, 187, 241, 240, 97, 1, 3, 33, 49, 64, 0, 1, 0, 0, 0, 1, 3, 1, 0, 6, 14, 0, 3, 2, 0, 0, 1, 1, 0, 1, 0, 254, 127, 247, 227, 243, 250, 254, 240, 56, 128, 8, 28, 12, 68, 240, 224, 144, 240, 248, 248, 248, 252, 124, 248, 96, 224, 240, 112, 96, 0, 128, 0, };
        private readonly int[] _simon1Up = { 0, 62, 127, 127, 93, 99, 127, 62, 0, 0, 0, 0, 62, 93, 34, 93, 126, 127, 126, 62, 8, 6, 48, 48, 65, 93, 63, 0, 54, 54, 48, 48, };
        private readonly int[] _simonOw = { 0, 124, 254, 255, 254, 135, 79, 63, 0, 0, 0, 0, 96, 122, 55, 12, 120, 104, 46, 62, 50, 67, 103, 225, 55, 30, 24, 48, 12, 119, 103, 225, 124, 254, 255, 254, 135, 79, 63, 124, 0, 0, 0, 96, 122, 55, 12, 51, 124, 63, 56, 60, 8, 12, 28, 56, 11, 3, 62, 0, 24, 28, 28, 56, 0, 62, 127, 127, 127, 127, 127, 126, 0, 0, 0, 0, 0, 62, 93, 35, 62, 127, 126, 126, 8, 6, 48, 48, 97, 29, 63, 0, 54, 54, 48, 48, 0, 62, 127, 127, 93, 99, 127, 62, 0, 0, 0, 0, 62, 93, 34, 93, 126, 127, 126, 62, 8, 6, 48, 48, 65, 93, 63, 0, 54, 54, 48, 48, };
        private readonly int[] _simonSleeper = { 0, 0, 0, 0, 7, 15, 23, 27, 0, 0, 0, 0, 7, 7, 31, 29, 62, 63, 62, 63, 63, 31, 35, 34, 55, 52, 57, 60, 62, 31, 62, 63, 12, 31, 63, 63, 119, 127, 119, 127, 12, 31, 44, 54, 127, 118, 124, 119, 12, 158, 223, 239, 247, 227, 251, 252, 12, 146, 81, 44, 62, 28, 252, 255, 0, 0, 0, 129, 206, 240, 100, 232, 0, 0, 0, 129, 79, 127, 223, 255, 0, 0, 0, 224, 24, 4, 2, 53, 0, 0, 0, 224, 248, 252, 254, 255, };
        private readonly int[] _simonTitle = { 13, 23, 20, 42, 46, 125, 124, 239, 2, 8, 8, 20, 17, 108, 68, 215, 239, 131, 239, 239, 108, 108, 124, 124, 17, 125, 17, 215, 84, 84, 68, 124, };
        private readonly int[] _simonEnd1 = { 0, 15, 63, 63, 59, 31, 63, 63, 0, 0, 16, 8, 5, 9, 27, 26, 63, 31, 4, 8, 8, 31, 23, 79, 28, 4, 3, 7, 7, 0, 11, 3, 0, 128, 192, 192, 224, 224, 240, 240, 0, 0, 0, 0, 0, 0, 0, 0, 240, 240, 248, 120, 120, 248, 240, 208, 0, 0, 0, 128, 128, 0, 128, 32, 255, 255, 127, 0, 0, 1, 1, 1, 71, 254, 0, 0, 0, 0, 0, 0, 3, 2, 2, 2, 2, 4, 4, 15, 0, 1, 1, 1, 1, 3, 3, 0, 208, 144, 56, 200, 132, 4, 4, 2, 32, 96, 192, 48, 120, 248, 248, 252, 2, 2, 2, 3, 1, 1, 5, 212, 252, 252, 252, 252, 254, 254, 250, 43, 3, 7, 7, 15, 7, 7, 63, 127, 0, 0, 0, 0, 0, 0, 0, 24, 127, 47, 79, 79, 255, 255, 255, 255, 7, 27, 48, 48, 96, 107, 107, 64, 127, 95, 127, 115, 19, 18, 22, 30, 0, 32, 0, 12, 12, 12, 12, 0, 30, 30, 30, 30, 30, 62, 126, 126, 8, 12, 12, 12, 8, 28, 60, 0, 0, 240, 248, 200, 216, 200, 232, 184, 0, 0, 0, 48, 112, 112, 48, 192, 192, 240, 158, 153, 185, 250, 252, 192, 224, 0, 96, 102, 86, 52, 0, 128, 128, 192, 224, 144, 136, 76, 52, 60, 0, 64, 32, 96, 112, 48, 8, 0, 60, 60, 60, 28, 63, 63, 63, 0, 24, 24, 24, 8, 28, 30, 0, 0, };
        private readonly int[] _simonEnd2 = { 0, 0, 0, 0, 7, 15, 23, 27, 0, 0, 0, 0, 7, 7, 31, 29, 62, 63, 62, 63, 63, 31, 35, 34, 55, 52, 57, 60, 62, 31, 62, 63, 12, 31, 63, 63, 119, 127, 119, 127, 12, 31, 44, 54, 127, 118, 124, 119, 12, 158, 223, 239, 247, 227, 251, 252, 12, 146, 81, 44, 62, 28, 252, 255, 0, 0, 0, 129, 206, 240, 100, 232, 0, 0, 0, 129, 79, 127, 223, 255, 0, 0, 0, 224, 24, 4, 2, 53, 0, 0, 0, 224, 248, 252, 254, 255, 255, 129, 255, 255, 153, 153, 153, 153, 1, 127, 255, 17, 119, 119, 119, 119, 16, 16, 16, 16, 0, 0, 16, 0, 8, 8, 8, 8, 24, 0, 8, 24, 0, 0, 0, 0, 7, 15, 23, 27, 0, 0, 0, 0, 7, 7, 31, 29, 62, 63, 62, 63, 63, 31, 35, 34, 55, 52, 57, 60, 62, 31, 62, 63, 0, 0, 0, 0, 0, 192, 224, 96, 0, 0, 0, 0, 0, 192, 224, 160, 192, 224, 160, 224, 224, 192, 64, 160, 96, 32, 96, 32, 96, 192, 192, 96, 60, 60, 28, 56, 57, 61, 125, 255, 63, 39, 7, 15, 15, 14, 31, 31, 32, 48, 48, 224, 240, 128, 6, 15, 224, 240, 240, 231, 63, 127, 255, 255, };
        private readonly int[] _simonEnd3 = { 3, 7, 7, 15, 7, 7, 63, 127, 0, 0, 0, 0, 0, 0, 0, 24, 127, 47, 79, 79, 255, 255, 255, 255, 7, 27, 48, 48, 96, 107, 107, 64, 127, 95, 127, 115, 19, 18, 22, 30, 0, 32, 0, 12, 12, 12, 12, 0, 30, 30, 30, 30, 30, 62, 126, 126, 8, 12, 12, 12, 8, 28, 60, 0, };
        private readonly int[] _simonHead = { 124, 254, 255, 158, 253, 120, 51, 79, 124, 254, 255, 254, 135, 79, 63, 124, };
        private readonly int[] _simonRaft = { 7, 15, 15, 15, 8, 4, 3, 255, 0, 0, 0, 6, 7, 3, 0, 3, 135, 255, 135, 255, 130, 254, 135, 255, 120, 0, 123, 0, 125, 1, 121, 3, 192, 224, 240, 224, 112, 240, 240, 207, 0, 0, 0, 0, 160, 112, 192, 48, 193, 255, 145, 255, 225, 255, 225, 255, 190, 48, 238, 0, 158, 192, 222, 128, };
        private readonly int[] _simonBeam = { 0, 0, 0, 0, 0, 113, 216, 174, 0, 0, 0, 0, 0, 0, 32, 112, 183, 204, 116, 126, 16, 0, 0, 0, 120, 48, 8, 0, 0, 0, 0, 0, };

        private readonly int[] _stalfossprite = { 0, 0, 6, 11, 43, 208, 80, 85, 7, 15, 15, 13, 196, 239, 239, 239, 83, 95, 89, 95, 89, 151, 53, 226, 224, 232, 230, 224, 230, 224, 194, 1, 0, 0, 16, 0, 0, 64, 192, 184, 193, 225, 243, 243, 243, 163, 6, 70, 252, 22, 241, 216, 56, 252, 28, 234, 14, 238, 15, 38, 196, 2, 226, 16, 1, 0, 0, 0, 0, 0, 1, 3, 0, 0, 0, 0, 0, 1, 2, 4, 6, 2, 2, 2, 2, 2, 30, 33, 0, 4, 4, 4, 4, 4, 0, 94, 176, 88, 244, 164, 220, 248, 168, 40, 64, 32, 8, 248, 96, 0, 16, 16, 8, 8, 4, 4, 2, 2, 6, 8, 16, 16, 8, 8, 4, 5, 1, 22, 0, 0, 6, 11, 43, 208, 80, 85, 7, 15, 15, 13, 196, 239, 239, 239, 83, 95, 89, 95, 89, 151, 53, 226, 224, 232, 230, 224, 230, 224, 194, 1, 0, 0, 16, 0, 0, 64, 192, 184, 193, 225, 243, 243, 243, 163, 6, 70, 252, 22, 241, 216, 56, 252, 28, 234, 14, 238, 15, 38, 196, 2, 226, 16, 1, 0, 0, 0, 0, 0, 1, 3, 0, 0, 0, 0, 0, 1, 2, 4, 6, 2, 2, 2, 2, 2, 30, 33, 0, 4, 4, 4, 4, 4, 0, 94, 176, 88, 244, 164, 220, 248, 168, 40, 64, 32, 8, 248, 96, 0, 16, 16, 8, 8, 4, 4, 2, 2, 6, 8, 16, 16, 8, 8, 4, 5, 1, 22, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 5, 176, 248, 232, 200, 248, 216, 176, 160, 64, 64, 16, 176, 64, 160, 192, 64, 224, 160, 160, 32, 48, 56, 192, 0, 0, 64, 64, 64, 80, 72, 32, 224, 0, 0, 12, 22, 22, 0, 1, 11, 15, 31, 31, 27, 9, 31, 30, 30, 51, 95, 124, 71, 127, 45, 42, 23, 0, 104, 3, 56, 0, 18, 21, 0, 0, 0, 32, 0, 0, 128, 192, 96, 128, 192, 224, 224, 224, 64, 0, 128, 200, 52, 240, 220, 48, 240, 24, 232, 48, 200, 12, 32, 192, 0, 224, 16, 0, 0, 1, 127, 33, 16, 16, 8, 0, 0, 60, 0, 64, 32, 32, 16, 8, 116, 8, 0, 0, 0, 0, 0, 16, 136, 116, 0, 0, 0, 0, 0, 176, 88, 244, 164, 220, 248, 168, 40, 64, 32, 8, 248, 96, 0, 16, 16, 8, 8, 4, 4, 2, 2, 6, 8, 16, 16, 8, 8, 4, 5, 1, 22, 0, 0, 0, 0, 0, 0, 0, 12, 128, 192, 192, 192, 192, 207, 223, 223, 22, 246, 224, 225, 107, 243, 127, 252, 219, 233, 31, 94, 62, 96, 8, 99, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 128, 192, 224, 0, 0, 128, 192, 96, 240, 152, 124, 224, 224, 64, 0, 128, 16, 104, 132, 87, 95, 45, 26, 3, 0, 0, 1, 40, 32, 18, 1, 0, 0, 0, 60, 127, 33, 16, 16, 8, 8, 116, 8, 0, 64, 32, 32, 16, 16, 136, 116, 216, 80, 208, 88, 232, 176, 224, 88, 40, 160, 32, 160, 16, 64, 144, 224, 152, 248, 19, 22, 42, 50, 36, 0, 224, 0, 32, 33, 69, 73, 82, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 27, 31, 15, 31, 127, 63, 15, 17, 25, 28, 9, 1, 112, 54, 6, 1, 0, 0, 0, 0, 0, 1, 3, 0, 0, 0, 0, 0, 1, 2, 4, 6, 2, 2, 2, 2, 2, 30, 33, 0, 4, 4, 4, 4, 4, 0, 94, 0, 0, 6, 11, 43, 208, 80, 85, 7, 15, 15, 13, 196, 239, 239, 239, 83, 95, 89, 95, 89, 151, 53, 226, 224, 232, 230, 224, 230, 224, 194, 1, 0, 4, 18, 18, 28, 68, 196, 168, 192, 236, 238, 236, 226, 171, 25, 80, 200, 52, 240, 220, 48, 240, 24, 232, 48, 200, 12, 32, 192, 0, 224, 16, 1, 0, 0, 0, 0, 0, 1, 3, 0, 0, 0, 0, 0, 1, 2, 4, 6, 2, 2, 2, 2, 2, 30, 33, 0, 4, 4, 4, 4, 4, 0, 94, 176, 88, 244, 164, 220, 248, 168, 40, 64, 32, 8, 248, 96, 0, 16, 16, 8, 8, 4, 4, 2, 2, 6, 8, 16, 16, 8, 8, 4, 5, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 94, 127, 127, 127, 25, 0, 0, 0, 64, 204, 213, 81, 0, 0, 0, 0, 0, 12, 22, 22, 64, 161, 171, 15, 31, 31, 27, 9, 159, 222, 222, 51, 95, 252, 7, 255, 13, 10, 3, 64, 104, 3, 248, 0, 18, 1, 0, 0, 0, 32, 0, 0, 128, 192, 96, 128, 192, 224, 224, 224, 64, 0, 128, 240, 152, 124, 216, 80, 208, 88, 232, 16, 104, 132, 40, 160, 32, 160, 16, 1, 0, 0, 0, 0, 0, 1, 3, 0, 0, 0, 0, 0, 1, 2, 4, 6, 2, 2, 2, 2, 2, 30, 33, 0, 4, 4, 4, 4, 4, 0, 94, 176, 88, 244, 164, 220, 248, 168, 40, 64, 32, 8, 248, 96, 0, 16, 16, 8, 8, 4, 4, 2, 2, 6, 8, 16, 16, 8, 8, 4, 5, 1, 22, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 3, 7, 7, 7, 45, 54, 89, 92, 60, 55, 57, 127, 15, 9, 39, 43, 67, 72, 70, 12, 50, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 192, 224, 224, 224, 180, 108, 154, 58, 60, 236, 156, 254, 240, 144, 228, 212, 194, 18, 98, 48, 76, 51, 124, 68, 69, 35, 35, 48, 80, 12, 131, 187, 130, 64, 67, 1, 49, 128, 0, 0, 0, 0, 0, 0, 0, 97, 193, 129, 1, 1, 1, 1, 0, 204, 62, 34, 162, 196, 196, 12, 10, 48, 193, 221, 65, 2, 194, 128, 140, 1, 0, 0, 0, 0, 0, 0, 0, 134, 131, 129, 128, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 7, 15, 15, 11, 11, 0, 0, 37, 211, 95, 89, 13, 4, 15, 15, 207, 224, 232, 230, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 193, 225, 243, 0, 0, 64, 192, 184, 252, 22, 241, 243, 243, 163, 6, 70, 14, 238, 15, 95, 89, 87, 85, 82, 144, 48, 225, 224, 230, 224, 226, 225, 224, 192, 28, 127, 33, 16, 16, 8, 8, 116, 8, 0, 64, 32, 32, 16, 16, 136, 116, 216, 56, 252, 28, 234, 176, 224, 88, 38, 196, 2, 226, 16, 64, 144, 224, 152, 248, 19, 22, 42, 50, 36, 0, 224, 0, 32, 33, 69, 73, 82, 64, 0, 32, 32, 114, 120, 122, 250, 248, 0, 36, 38, 84, 75, 71, 135, 135, 252, 252, 220, 138, 1, 1, 0, 0, 131, 131, 131, 129, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 10, 24, 0, 4, 6, 4, 3, 7, 15, 31, 28, 30, 30, 30, 31, 31, 12, 8, 27, 29, 29, 29, 24, 24, 8, 8, 8, 9, 88, 92, 116, 116, 102, 110, 0, 0, 0, 0, 8, 8, 24, 16, 203, 195, 137, 153, 219, 102, 60, 0, 52, 60, 126, 126, 60, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 7, 7, 5, 5, 16, 40, 42, 12, 23, 31, 6, 2, 39, 55, 55, 16, 26, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 224, 240, 248, 128, 128, 32, 112, 216, 252, 230, 95, 248, 120, 208, 128, 160, 4, 26, 161, 126, 127, 124, 95, 8, 0, 0, 0, 77, 216, 211, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 190, 122, 110, 146, 31, 5, 7, 10, 65, 133, 145, 13, 0, 2, 4, 55, 127, 33, 16, 16, 8, 8, 116, 8, 0, 64, 32, 32, 16, 16, 136, 116, 192, 128, 128, 192, 64, 128, 0, 224, 64, 0, 0, 0, 128, 0, 128, 0, 144, 248, 19, 22, 42, 50, 36, 0, 224, 0, 32, 33, 69, 73, 82, 64, 0, 0, 0, 0, 6, 11, 3, 3, 0, 0, 0, 0, 4, 10, 2, 2, 6, 3, 3, 11, 6, 0, 0, 0, 4, 2, 2, 10, 4, 0, 0, 0, 68, 68, 198, 198, 238, 238, 254, 254, 0, 0, 0, 0, 0, 0, 40, 124, 124, 124, 254, 254, 255, 127, 63, 127, 56, 16, 68, 124, 124, 50, 14, 62, 254, 254, 254, 126, 252, 254, 254, 126, 92, 96, 124, 28, 96, 124, 124, 48, 126, 127, 127, 255, 254, 254, 126, 60, 12, 62, 62, 14, 112, 124, 60, 0, 0, 60, 64, 132, 130, 130, 0, 16, 0, 60, 126, 231, 195, 195, 255, 24, 16, 16, 16, 22, 16, 16, 16, 0, 24, 24, 24, 30, 30, 30, 24, 0, 0, 60, 66, 129, 169, 129, 129, 129, 0, 0, 60, 126, 126, 86, 126, 126, 129, 66, 36, 72, 80, 40, 24, 0, 126, 60, 24, 48, 32, 16, 0, 0, 0, 60, 66, 129, 169, 129, 129, 129, 0, 0, 60, 126, 126, 86, 126, 126, 129, 66, 36, 18, 10, 20, 24, 0, 126, 60, 24, 12, 4, 8, 0, 0, 0, 0, 0, 0, 111, 236, 108, 110, 0, 0, 0, 0, 78, 200, 72, 76, 107, 99, 99, 107, 246, 0, 0, 0, 74, 66, 66, 74, 228, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 84, 60, 56, 16, 28, 56, 120, 0, 84, 62, 62, 28, 0, 60, 126, 124, 248, 252, 248, 252, 248, 112, 0, 126, 199, 219, 199, 223, 223, 255, 126, 255, 129, 129, 255, 255, 129, 129, 255, 255, 254, 254, 0, 255, 254, 254, 0, 255, 129, 129, 255, 255, 129, 129, 255, 255, 254, 254, 0, 255, 254, 254, 0, 255, 129, 129, 129, 129, 129, 129, 129, 255, 254, 254, 254, 230, 194, 194, 230, 129, 129, 129, 129, 129, 129, 129, 255, 238, 238, 230, 238, 254, 254, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 56, 254, 56, 16, 16, 16, 16, 16, 56, 254, 56, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 130, 64, 0, 129, 0, 68, 145, 17, 130, 64, 0, 129, 0, 68, 145, 0, 0, 0, 0, 7, 24, 38, 31, 0, 0, 0, 0, 0, 7, 25, 4, 127, 159, 65, 60, 252, 25, 19, 15, 12, 96, 190, 227, 3, 14, 12, 0, 0, 0, 56, 72, 144, 16, 40, 108, 0, 0, 0, 48, 96, 224, 200, 140, 28, 62, 126, 62, 63, 127, 255, 191, 236, 222, 150, 210, 203, 137, 21, 69, 1, 1, 3, 62, 64, 47, 242, 49, 0, 0, 0, 1, 63, 80, 129, 32, 0, 1, 2, 2, 2, 7, 8, 15, 0, 0, 1, 1, 1, 0, 7, 4, 63, 31, 31, 63, 123, 249, 125, 28, 205, 229, 229, 197, 129, 1, 129, 224, 140, 24, 48, 232, 102, 96, 48, 152, 112, 224, 204, 4, 129, 135, 192, 96, 0, 0, 0, 0, 0, 113, 216, 174, 0, 0, 0, 0, 0, 0, 32, 112, 183, 204, 116, 126, 16, 0, 0, 0, 120, 48, 8, 0, 0, 0, 0, 0, 0, 0, 0, 4, 3, 6, 21, 11, 0, 0, 0, 0, 0, 1, 3, 7, 15, 9, 6, 3, 4, 0, 0, 0, 3, 7, 1, 0, 0, 0, 0, 0, 11, 5, 20, 74, 0, 216, 0, 20, 0, 3, 12, 58, 16, 56, 64, 52, 32, 8, 48, 76, 17, 36, 5, 9, 224, 72, 16, 60, 1, 12, 3, 0, 0, 36, 24, 8, 14, 8, 9, 6, 0, 56, 0, 22, 17, 17, 18, 120, 99, 67, 3, 131, 199, 126, 60, 0, 252, 252, 252, 124, 56, 0, 0, 0, 16, 56, 108, 68, 100, 56, 0, 56, 0, 0, 16, 56, 24, 0, 0, 56, 56, 56, 56, 56, 56, 0, 0, 0, 56, 56, 56, 56, 57, 255, 126, 0, 0, 20, 252, 212, 212, 252, 132, 133, 0, 40, 128, 40, 168, 128, 121, 248, 142, 152, 241, 26, 60, 64, 126, 66, 241, 231, 142, 100, 0, 124, 0, 124, 0, 0, 36, 255, 36, 36, 36, 36, 0, 219, 219, 219, 255, 219, 219, 219, 36, 36, 255, 36, 36, 255, 219, 0, 219, 219, 219, 255, 219, 219, 219, 0, 0, 0, 0, 8, 9, 15, 15, 15, 0, 0, 15, 7, 6, 1, 2, 1, 15, 15, 15, 31, 63, 127, 123, 0, 2, 0, 0, 0, 16, 32, 0, 0, 0, 24, 8, 8, 8, 8, 24, 8, 0, 24, 16, 16, 16, 16, 0, 16, 24, 8, 24, 8, 8, 44, 70, 0, 0, 16, 0, 16, 16, 48, 120, 0, 0, 0, 24, 24, 24, 239, 247, 24, 0, 0, 24, 24, 24, 247, 239, 255, 24, 24, 24, 24, 24, 0, 0, 0, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0, 16, 0, 252, 254, 254, 16, 0, 0, 24, 252, 2, 0, 0, 24, 16, 16, 16, 16, 16, 16, 16, 16, 24, 24, 24, 24, 24, 24, 24, 24, 24, 211, 132, 194, 152, 24, 0, 16, 24, 219, 255, 189, 247, 102, 60, 24, 16, 16, 16, 16, 16, 16, 16, 0, 24, 24, 24, 24, 28, 24, 28, 0, 0, 0, 0, 0, 0, 96, 176, 176, 0, 0, 0, 0, 0, 64, 160, 160, 176, 176, 176, 176, 96, 0, 0, 0, 160, 160, 160, 160, 64, 0, 0, 0, 0, 0, 0, 0, 0, 102, 187, 187, 0, 0, 0, 0, 0, 68, 170, 170, 187, 187, 187, 187, 102, 0, 0, 0, 170, 170, 170, 170, 68, 0, 0, 0, 0, 0, 0, 0, 96, 230, 107, 107, 0, 0, 0, 0, 64, 196, 74, 74, 107, 107, 107, 107, 246, 0, 0, 0, 74, 74, 74, 74, 228, 0, 0, 0, 0, 0, 0, 0, 15, 12, 12, 14, 0, 0, 0, 0, 14, 8, 8, 12, 11, 3, 3, 11, 6, 0, 0, 0, 10, 2, 2, 10, 4, 0, 0, 0, 0, 0, 0, 0, 6, 11, 11, 3, 0, 0, 0, 0, 4, 10, 10, 2, 6, 12, 12, 12, 15, 0, 0, 0, 4, 8, 8, 8, 14, 0, 0, 0, 0, 0, 0, 0, 15, 11, 3, 3, 0, 0, 0, 0, 14, 10, 2, 2, 6, 6, 6, 6, 6, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 54, 34, 8, 0, 34, 128, 9, 62, 73, 93, 119, 62, 54, 235, 191, 1, 0, 0, 0, 1, 0, 192, 1, 137, 188, 42, 124, 67, 65, 193, 1, 0, 0, 0, 0, 4, 2, 49, 33, 0, 0, 0, 0, 56, 64, 176, 160, 1, 129, 66, 60, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 255, 0, 153, 0, 0, 153, 0, 255, 0, 255, 153, 153, 153, 153, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 60, 84, 112, 0, 0, 0, 24, 62, 127, 255, 255, 42, 80, 16, 0, 0, 0, 0, 0, 255, 255, 254, 126, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 15, 31, 31, 31, 31, 15, 0, 1, 8, 16, 1, 16, 22, 0, 0, 0, 0, 15, 24, 50, 39, 102, 0, 0, 0, 0, 7, 13, 26, 25, 64, 64, 64, 64, 96, 120, 63, 31, 63, 63, 63, 63, 31, 7, 0, 0, 0, 0, 0, 0, 7, 28, 48, 98, 0, 0, 0, 0, 0, 3, 15, 29, 71, 198, 128, 128, 192, 240, 127, 63, 58, 57, 127, 127, 63, 15, 0, 0, 0, 31, 32, 120, 124, 252, 254, 254, 0, 0, 31, 7, 51, 123, 93, 93, 255, 255, 126, 64, 32, 28, 3, 0, 124, 56, 1, 63, 31, 3, 0, 0, 0, 0, 128, 96, 31, 2, 39, 24, 0, 0, 0, 128, 224, 252, 216, 231, 9, 146, 33, 2, 12, 48, 192, 0, 246, 108, 222, 252, 240, 192, 0, 0, 0, 3, 12, 27, 22, 44, 174, 31, 7, 12, 19, 36, 41, 83, 209, 164, 15, 79, 135, 0, 2, 4, 4, 0, 150, 114, 232, 199, 142, 140, 196, 64, 0, 192, 48, 216, 104, 53, 116, 248, 224, 48, 200, 36, 148, 203, 139, 37, 242, 240, 224, 0, 64, 32, 32, 0, 110, 78, 18, 226, 114, 52, 32, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 3, 63, 127, 127, 255, 255, 95, 0, 0, 1, 62, 6, 99, 89, 21, 31, 7, 35, 127, 127, 63, 1, 0, 6, 4, 0, 42, 60, 0, 0, 0, 0, 240, 248, 252, 252, 255, 255, 254, 0, 0, 240, 24, 24, 24, 243, 226, 255, 255, 254, 252, 255, 255, 255, 14, 232, 203, 18, 32, 104, 19, 6, 0, 0, 240, 248, 252, 255, 255, 254, 255, 0, 0, 240, 24, 24, 27, 242, 224, 255, 254, 252, 252, 254, 255, 254, 28, 235, 202, 16, 40, 80, 14, 24, 0, 7, 8, 22, 40, 32, 0, 31, 63, 0, 7, 15, 31, 31, 63, 32, 10, 63, 71, 83, 38, 124, 204, 222, 123, 0, 56, 44, 25, 3, 51, 33, 0, 240, 12, 6, 2, 3, 1, 1, 131, 0, 240, 248, 252, 252, 254, 254, 124, 199, 255, 94, 83, 89, 202, 249, 183, 56, 0, 160, 172, 166, 52, 6, 0, 7, 8, 22, 60, 67, 153, 189, 190, 0, 7, 15, 3, 60, 102, 102, 65, 190, 190, 156, 65, 127, 145, 167, 89, 65, 99, 107, 62, 0, 110, 88, 0, 240, 12, 6, 2, 3, 129, 193, 195, 0, 240, 248, 252, 252, 126, 62, 60, 227, 255, 254, 148, 146, 18, 50, 36, 28, 0, 0, 104, 108, 236, 204, 216, 0, 0, 0, 0, 60, 102, 219, 189, 0, 0, 0, 0, 0, 24, 60, 126, 189, 219, 102, 60, 0, 0, 0, 0, 126, 60, 24, 0, 0, 0, 0, 0, 0, 0, 0, 7, 24, 35, 30, 252, 0, 0, 0, 0, 7, 28, 9, 3, 255, 255, 255, 143, 1, 1, 0, 0, 252, 255, 142, 0, 0, 0, 0, 0, 3, 13, 18, 254, 57, 54, 60, 124, 0, 2, 12, 0, 198, 200, 192, 128, 59, 141, 2, 12, 4, 143, 119, 2, 196, 114, 252, 240, 248, 112, 0, 2, 0, 0, 0, 240, 32, 48, 12, 99, 0, 0, 0, 0, 192, 192, 240, 156, 249, 253, 110, 50, 44, 147, 111, 2, 6, 2, 144, 204, 208, 108, 0, 2, 36, 37, 110, 127, 127, 255, 255, 255, 0, 0, 1, 0, 0, 17, 3, 86, 255, 127, 124, 120, 62, 57, 16, 16, 126, 60, 59, 55, 17, 16, 0, 0, 0, 248, 220, 246, 190, 250, 218, 218, 0, 0, 32, 8, 64, 4, 36, 36, 155, 55, 103, 7, 31, 247, 239, 238, 100, 200, 152, 248, 224, 0, 74, 0, 36, 36, 109, 126, 127, 255, 255, 255, 0, 0, 0, 1, 0, 17, 3, 86, 255, 127, 127, 120, 60, 59, 17, 23, 126, 60, 56, 55, 19, 16, 0, 2, 0, 0, 240, 216, 252, 180, 254, 218, 0, 0, 0, 32, 0, 72, 0, 36, 219, 155, 51, 102, 12, 120, 252, 254, 36, 100, 204, 152, 240, 128, 0, 128, 0, 0, 0, 0, 3, 15, 31, 63, 0, 0, 0, 0, 0, 0, 4, 0, 63, 127, 127, 127, 135, 89, 54, 205, 1, 16, 0, 2, 248, 94, 55, 205, 0, 0, 0, 0, 224, 248, 252, 222, 0, 0, 0, 0, 32, 168, 40, 42, 214, 215, 149, 171, 170, 170, 74, 0, 42, 42, 106, 84, 85, 85, 181, 254, 0, 0, 0, 0, 3, 15, 31, 63, 0, 0, 0, 0, 0, 0, 4, 0, 63, 127, 127, 127, 7, 105, 202, 26, 1, 16, 0, 2, 120, 110, 203, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 2, 5, 107, 111, 240, 131, 0, 0, 1, 2, 68, 67, 15, 124, 14, 241, 135, 127, 15, 31, 31, 31, 251, 46, 120, 0, 2, 8, 0, 7, 240, 248, 28, 236, 238, 196, 4, 62, 0, 0, 224, 16, 144, 184, 248, 210, 127, 255, 255, 241, 225, 224, 240, 224, 128, 65, 64, 206, 158, 159, 143, 31, 15, 7, 6, 2, 7, 15, 31, 11, 0, 0, 3, 3, 0, 0, 0, 4, 10, 6, 2, 1, 1, 1, 6, 12, 5, 1, 1, 0, 0, 0, 1, 7, 249, 198, 194, 194, 228, 248, 252, 252, 30, 60, 60, 252, 24, 0, 0, 0, 16, 48, 40, 40, 48, 224, 16, 16, 224, 192, 208, 208, 192, 224, 224, 224, 0, 3, 1, 2, 5, 107, 111, 240, 0, 0, 0, 1, 2, 68, 67, 15, 131, 14, 249, 183, 67, 66, 68, 56, 124, 251, 38, 72, 60, 63, 63, 7, 0, 240, 248, 28, 236, 238, 196, 4, 0, 0, 0, 224, 16, 144, 184, 248, 60, 126, 254, 206, 134, 6, 4, 28, 224, 132, 0, 50, 120, 248, 248, 224, 15, 15, 7, 5, 5, 15, 31, 31, 0, 0, 0, 6, 7, 0, 0, 0, 9, 16, 17, 17, 18, 252, 130, 66, 6, 15, 14, 14, 12, 28, 252, 60, 248, 248, 248, 240, 248, 252, 254, 254, 0, 0, 0, 16, 224, 0, 0, 0, 252, 132, 132, 71, 40, 24, 17, 50, 0, 120, 120, 60, 31, 7, 14, 28, 0, 0, 0, 4, 252, 132, 130, 130, 0, 0, 0, 0, 128, 248, 252, 252, 206, 114, 51, 1, 1, 1, 0, 0, 240, 96, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 4, 120, 160, 144, 11, 140, 112, 0, 3, 7, 95, 111, 252, 112, 0, 0, 0, 1, 1, 3, 6, 12, 24, 16, 0, 0, 0, 0, 0, 0, 0, 32, 136, 7, 129, 67, 38, 44, 24, 0, 112, 249, 127, 63, 30, 28, 24, 0, 94, 70, 187, 241, 240, 97, 1, 3, 33, 49, 64, 0, 1, 0, 0, 0, 1, 3, 1, 0, 6, 14, 0, 3, 2, 0, 0, 1, 1, 0, 1, 0, 254, 127, 247, 227, 243, 250, 254, 240, 56, 128, 8, 28, 12, 68, 240, 224, 144, 240, 248, 248, 248, 252, 124, 248, 96, 224, 240, 112, 96, 0, 128, 0, };
        private readonly int[] _stalfos1Up = { 0, 54, 34, 8, 0, 34, 128, 9, 62, 73, 93, 119, 62, 54, 235, 191, 1, 0, 0, 0, 1, 0, 192, 1, 137, 188, 42, 124, 67, 65, 193, 1, };
        private readonly int[] _stalfosOw = { 0, 32, 96, 128, 0, 64, 0, 16, 120, 220, 156, 252, 252, 232, 16, 60, 64, 128, 36, 8, 16, 16, 16, 4, 84, 188, 124, 60, 24, 24, 24, 44, 0, 0, 32, 96, 128, 0, 64, 1, 0, 120, 220, 156, 252, 252, 232, 23, 144, 128, 0, 0, 0, 128, 0, 3, 253, 145, 61, 84, 62, 194, 130, 131, 0, 0, 0, 8, 20, 8, 128, 9, 62, 127, 127, 119, 42, 28, 255, 191, 1, 8, 20, 0, 1, 0, 192, 1, 137, 188, 62, 92, 67, 65, 193, 1, 0, 54, 34, 8, 0, 34, 128, 9, 62, 73, 93, 119, 62, 54, 235, 191, 1, 0, 0, 0, 1, 0, 192, 1, 137, 188, 42, 124, 67, 65, 193, 1, };
        private readonly int[] _stalfosSleeper = { 0, 0, 0, 0, 7, 15, 23, 27, 0, 0, 0, 0, 7, 7, 31, 29, 62, 63, 62, 63, 63, 31, 35, 34, 55, 52, 57, 60, 62, 31, 62, 63, 12, 31, 63, 63, 119, 127, 119, 127, 12, 31, 44, 54, 127, 118, 124, 119, 12, 158, 223, 239, 247, 227, 251, 252, 12, 146, 81, 44, 62, 28, 252, 255, 0, 0, 0, 129, 206, 240, 100, 232, 0, 0, 0, 129, 79, 127, 223, 255, 0, 0, 0, 224, 24, 4, 2, 53, 0, 0, 0, 224, 248, 252, 254, 255, };
        private readonly int[] _stalfosTitle = { 0, 54, 34, 8, 0, 34, 128, 9, 62, 73, 93, 119, 62, 54, 235, 191, 1, 0, 0, 0, 1, 0, 192, 1, 137, 188, 42, 124, 67, 65, 193, 1, };
        private readonly int[] _stalfosEnd1 = { 0, 15, 63, 63, 59, 31, 63, 63, 0, 0, 16, 8, 5, 9, 27, 26, 63, 31, 4, 8, 8, 31, 23, 79, 28, 4, 3, 7, 7, 0, 11, 3, 0, 128, 192, 192, 224, 224, 240, 240, 0, 0, 0, 0, 0, 0, 0, 0, 240, 240, 248, 120, 120, 248, 240, 208, 0, 0, 0, 128, 128, 0, 128, 32, 255, 255, 127, 0, 0, 1, 1, 1, 71, 254, 0, 0, 0, 0, 0, 0, 3, 2, 2, 2, 2, 4, 4, 15, 0, 1, 1, 1, 1, 3, 3, 0, 208, 144, 56, 200, 132, 4, 4, 2, 32, 96, 192, 48, 120, 248, 248, 252, 2, 2, 2, 3, 1, 1, 5, 212, 252, 252, 252, 252, 254, 254, 250, 43, 240, 240, 248, 240, 160, 160, 160, 240, 32, 64, 112, 35, 71, 71, 71, 79, 113, 91, 126, 33, 50, 15, 26, 15, 14, 38, 33, 30, 13, 2, 13, 2, 6, 13, 6, 13, 4, 3, 12, 24, 1, 6, 1, 7, 3, 12, 16, 32, 48, 48, 16, 16, 16, 16, 80, 232, 32, 0, 32, 32, 32, 32, 32, 80, 0, 0, 96, 208, 208, 0, 0, 160, 224, 240, 240, 176, 32, 240, 240, 240, 128, 224, 96, 208, 239, 112, 143, 128, 0, 32, 128, 32, 16, 143, 0, 0, 128, 0, 0, 0, 0, 0, 128, 192, 0, 0, 0, 0, 0, 128, 64, 32, 96, 64, 64, 64, 64, 64, 120, 132, 0, 32, 32, 32, 32, 32, 0, 122, };
        private readonly int[] _stalfosEnd2 = { 0, 0, 0, 0, 7, 15, 23, 27, 0, 0, 0, 0, 7, 7, 31, 29, 62, 63, 62, 63, 63, 31, 35, 34, 55, 52, 57, 60, 62, 31, 62, 63, 12, 31, 63, 63, 119, 127, 119, 127, 12, 31, 44, 54, 127, 118, 124, 119, 12, 158, 223, 239, 247, 227, 251, 252, 12, 146, 81, 44, 62, 28, 252, 255, 0, 0, 0, 129, 206, 240, 100, 232, 0, 0, 0, 129, 79, 127, 223, 255, 0, 0, 0, 224, 24, 4, 2, 53, 0, 0, 0, 224, 248, 252, 254, 255, 255, 129, 255, 255, 153, 153, 153, 153, 1, 127, 255, 17, 119, 119, 119, 119, 16, 16, 16, 16, 0, 0, 16, 0, 8, 8, 8, 8, 24, 0, 8, 24, 0, 0, 0, 0, 7, 15, 23, 27, 0, 0, 0, 0, 7, 7, 31, 29, 62, 63, 62, 63, 63, 31, 35, 34, 55, 52, 57, 60, 62, 31, 62, 63, 0, 0, 0, 0, 0, 192, 224, 96, 0, 0, 0, 0, 0, 192, 224, 160, 192, 224, 160, 224, 224, 192, 64, 160, 96, 32, 96, 32, 96, 192, 192, 96, 60, 60, 28, 56, 57, 61, 125, 255, 63, 39, 7, 15, 15, 14, 31, 31, 32, 48, 48, 224, 240, 128, 6, 15, 224, 240, 240, 231, 63, 127, 255, 255, };
        private readonly int[] _stalfosEnd3 = { 240, 240, 248, 240, 160, 160, 160, 178, 32, 64, 112, 35, 71, 71, 71, 77, 118, 89, 92, 62, 55, 9, 22, 15, 9, 39, 43, 3, 8, 6, 13, 2, 6, 11, 7, 13, 6, 3, 12, 24, 1, 6, 0, 6, 3, 12, 16, 32, 48, 16, 16, 16, 16, 16, 240, 8, 0, 32, 32, 32, 32, 32, 0, 240, };
        private readonly int[] _stalfosHead = { 124, 146, 186, 238, 124, 124, 68, 0, 0, 0, 0, 130, 0, 56, 68, 0, };
        private readonly int[] _stalfosRaft = { 0, 1, 3, 4, 0, 2, 0, 255, 3, 6, 4, 7, 7, 7, 0, 0, 133, 255, 132, 255, 134, 255, 140, 253, 126, 3, 127, 1, 125, 1, 119, 2, 0, 0, 0, 0, 0, 0, 0, 255, 192, 224, 224, 224, 224, 64, 128, 128, 65, 223, 225, 223, 33, 191, 89, 223, 254, 96, 190, 32, 222, 64, 230, 32, };
        private readonly int[] _stalfosBeam = { 0, 0, 0, 0, 0, 113, 216, 174, 0, 0, 0, 0, 0, 0, 32, 112, 183, 204, 116, 126, 16, 0, 0, 0, 120, 48, 8, 0, 0, 0, 0, 0, };

        private readonly int[] _vasesprite = { 31, 15, 7, 7, 28, 13, 9, 8, 15, 7, 3, 0, 3, 2, 7, 7, 4, 3, 1, 2, 7, 7, 3, 0, 3, 0, 0, 1, 3, 3, 0, 0, 232, 232, 200, 228, 210, 82, 82, 36, 208, 208, 176, 24, 44, 172, 172, 216, 100, 68, 200, 204, 252, 248, 240, 224, 152, 184, 48, 240, 192, 224, 96, 0, 3, 5, 9, 7, 3, 3, 7, 7, 0, 2, 6, 0, 1, 1, 3, 3, 7, 15, 15, 15, 31, 31, 15, 7, 3, 7, 7, 7, 15, 15, 7, 0, 248, 252, 248, 248, 248, 252, 252, 252, 192, 8, 224, 224, 224, 192, 224, 192, 252, 254, 254, 254, 254, 254, 254, 248, 48, 240, 224, 192, 248, 240, 248, 0, 31, 15, 7, 7, 28, 13, 9, 8, 15, 7, 3, 0, 3, 2, 7, 7, 4, 3, 1, 2, 7, 7, 3, 0, 3, 0, 0, 1, 3, 3, 0, 0, 232, 232, 200, 228, 210, 82, 82, 36, 208, 208, 176, 24, 44, 172, 172, 216, 100, 68, 200, 204, 252, 248, 240, 224, 152, 184, 48, 240, 192, 224, 96, 0, 3, 5, 9, 7, 3, 3, 7, 7, 0, 2, 6, 0, 1, 1, 3, 3, 7, 15, 15, 15, 31, 31, 15, 7, 3, 7, 7, 7, 15, 15, 7, 0, 248, 252, 248, 248, 248, 252, 252, 252, 192, 8, 224, 224, 224, 192, 224, 192, 252, 254, 254, 254, 254, 254, 254, 248, 48, 240, 224, 192, 248, 240, 248, 0, 5, 25, 35, 23, 11, 7, 7, 7, 2, 6, 28, 9, 1, 3, 3, 3, 15, 15, 7, 15, 15, 15, 15, 7, 7, 7, 3, 7, 7, 7, 1, 0, 248, 252, 248, 240, 248, 248, 252, 252, 192, 8, 224, 224, 192, 224, 224, 192, 252, 252, 254, 254, 255, 255, 254, 252, 128, 240, 224, 216, 248, 240, 192, 0, 0, 0, 7, 31, 15, 31, 13, 8, 0, 0, 0, 0, 0, 0, 2, 7, 8, 6, 3, 2, 7, 7, 3, 1, 7, 1, 0, 1, 3, 3, 0, 0, 255, 127, 254, 252, 249, 217, 82, 50, 126, 62, 29, 3, 6, 38, 172, 204, 100, 100, 204, 200, 252, 248, 240, 224, 152, 152, 48, 240, 192, 224, 96, 0, 5, 11, 7, 3, 7, 7, 15, 15, 2, 4, 1, 1, 3, 3, 7, 7, 15, 15, 31, 31, 63, 63, 31, 15, 7, 7, 15, 15, 31, 31, 3, 0, 248, 248, 240, 248, 248, 248, 248, 248, 192, 16, 192, 224, 192, 224, 224, 192, 252, 252, 248, 252, 252, 252, 252, 248, 0, 240, 224, 208, 240, 224, 128, 0, 15, 7, 3, 1, 0, 0, 3, 15, 7, 3, 1, 0, 0, 0, 0, 0, 7, 30, 12, 13, 4, 3, 1, 1, 0, 1, 3, 3, 3, 0, 0, 0, 248, 240, 232, 232, 136, 40, 232, 228, 240, 224, 208, 16, 112, 16, 16, 24, 228, 100, 164, 36, 4, 100, 72, 200, 24, 152, 88, 216, 248, 152, 176, 48, 2, 7, 7, 3, 2, 5, 11, 15, 1, 3, 3, 0, 1, 2, 4, 3, 31, 31, 63, 63, 63, 63, 31, 15, 7, 15, 31, 15, 31, 7, 3, 0, 204, 252, 248, 240, 224, 248, 252, 248, 240, 192, 224, 96, 0, 192, 8, 224, 252, 252, 254, 255, 255, 255, 255, 254, 192, 128, 96, 192, 128, 224, 248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 6, 30, 15, 9, 9, 17, 25, 28, 9, 1, 112, 54, 6, 3, 5, 9, 7, 3, 3, 7, 7, 0, 2, 6, 0, 1, 1, 3, 3, 7, 15, 15, 15, 31, 31, 15, 7, 3, 7, 7, 7, 15, 15, 7, 0, 0, 11, 7, 7, 28, 13, 9, 8, 0, 0, 0, 0, 3, 2, 7, 7, 4, 3, 1, 2, 7, 7, 3, 15, 3, 0, 0, 1, 3, 3, 0, 0, 0, 192, 240, 249, 217, 93, 94, 60, 0, 0, 0, 0, 32, 160, 161, 195, 121, 114, 196, 204, 252, 248, 240, 224, 134, 140, 56, 240, 192, 224, 96, 0, 17, 13, 3, 3, 3, 3, 7, 7, 14, 2, 0, 0, 1, 1, 3, 3, 7, 15, 15, 15, 31, 31, 15, 7, 3, 7, 7, 7, 15, 15, 7, 0, 248, 252, 248, 248, 248, 252, 252, 252, 192, 8, 224, 224, 224, 192, 224, 192, 252, 254, 254, 254, 254, 254, 254, 248, 48, 240, 224, 192, 248, 240, 248, 0, 0, 255, 254, 124, 120, 32, 64, 128, 0, 126, 124, 184, 128, 192, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 127, 62, 28, 0, 0, 0, 0, 126, 62, 28, 0, 0, 0, 0, 5, 3, 3, 14, 6, 4, 4, 0, 0, 0, 0, 1, 1, 3, 3, 2, 129, 112, 15, 192, 63, 0, 0, 1, 0, 128, 240, 63, 0, 0, 0, 0, 224, 248, 252, 108, 174, 174, 30, 0, 0, 0, 0, 144, 80, 208, 224, 62, 191, 230, 7, 31, 254, 254, 126, 192, 64, 24, 248, 224, 24, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 159, 159, 255, 63, 127, 127, 127, 44, 96, 110, 30, 28, 62, 62, 60, 127, 127, 63, 127, 127, 127, 127, 63, 60, 63, 31, 62, 63, 63, 14, 0, 128, 192, 128, 0, 128, 128, 192, 192, 0, 128, 0, 0, 0, 0, 0, 0, 224, 224, 240, 240, 248, 248, 240, 224, 0, 128, 0, 192, 192, 128, 0, 0, 0, 0, 0, 7, 31, 15, 31, 13, 0, 0, 0, 0, 0, 0, 0, 2, 9, 8, 6, 3, 2, 7, 7, 3, 7, 7, 1, 0, 1, 3, 3, 0, 0, 0, 0, 224, 240, 248, 216, 92, 0, 0, 0, 0, 0, 0, 32, 160, 60, 124, 124, 252, 216, 204, 200, 200, 192, 128, 128, 0, 160, 176, 176, 48, 5, 11, 15, 31, 31, 63, 63, 63, 2, 4, 3, 7, 15, 31, 14, 30, 62, 30, 15, 0, 15, 7, 3, 1, 5, 1, 0, 0, 7, 3, 1, 0, 216, 220, 152, 156, 188, 190, 63, 63, 160, 40, 96, 96, 64, 64, 192, 192, 127, 63, 126, 128, 248, 240, 224, 192, 128, 216, 128, 0, 240, 224, 192, 0, 0, 0, 0, 0, 0, 31, 15, 7, 0, 0, 0, 0, 0, 15, 7, 3, 7, 28, 13, 9, 8, 4, 3, 1, 0, 3, 2, 7, 7, 3, 0, 0, 0, 0, 0, 0, 0, 232, 232, 200, 0, 0, 0, 0, 0, 208, 208, 176, 228, 210, 82, 82, 36, 100, 68, 200, 24, 44, 172, 172, 216, 152, 184, 48, 2, 7, 7, 3, 2, 5, 11, 15, 1, 3, 3, 0, 1, 2, 4, 3, 31, 31, 63, 63, 63, 63, 31, 15, 7, 15, 31, 15, 31, 7, 3, 0, 204, 252, 248, 240, 240, 248, 252, 248, 240, 192, 224, 96, 0, 192, 8, 224, 252, 252, 254, 255, 255, 255, 255, 254, 192, 128, 96, 192, 128, 224, 248, 0, 0, 32, 32, 114, 120, 122, 250, 248, 0, 36, 38, 84, 75, 71, 135, 135, 252, 252, 220, 138, 1, 1, 0, 0, 131, 131, 131, 129, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 10, 24, 0, 4, 6, 4, 3, 7, 15, 31, 28, 30, 30, 30, 31, 31, 12, 8, 27, 29, 29, 29, 24, 24, 8, 8, 8, 9, 88, 92, 116, 116, 102, 110, 0, 0, 0, 0, 8, 8, 24, 16, 203, 195, 137, 153, 219, 102, 60, 0, 52, 60, 126, 126, 60, 24, 0, 0, 0, 0, 255, 127, 62, 28, 0, 0, 0, 0, 126, 62, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 3, 3, 14, 6, 4, 4, 0, 0, 0, 0, 1, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 248, 252, 108, 174, 174, 30, 0, 0, 0, 0, 144, 80, 208, 224, 2, 129, 112, 15, 192, 63, 0, 1, 1, 0, 128, 240, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 191, 230, 7, 31, 254, 255, 127, 192, 64, 24, 248, 224, 24, 48, 141, 255, 127, 255, 255, 255, 127, 63, 31, 0, 62, 125, 63, 127, 31, 15, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 192, 240, 248, 254, 255, 255, 255, 254, 0, 0, 128, 0, 192, 224, 248, 0, 0, 0, 0, 0, 6, 11, 3, 3, 0, 0, 0, 0, 4, 10, 2, 2, 6, 3, 3, 11, 6, 0, 0, 0, 4, 2, 2, 10, 4, 0, 0, 0, 68, 68, 198, 198, 238, 238, 254, 254, 0, 0, 0, 0, 0, 0, 40, 124, 124, 124, 254, 254, 255, 127, 63, 127, 56, 16, 68, 124, 124, 50, 14, 62, 254, 254, 254, 126, 252, 254, 254, 126, 92, 96, 124, 28, 96, 124, 124, 48, 126, 127, 127, 255, 254, 254, 126, 60, 12, 62, 62, 14, 112, 124, 60, 0, 0, 60, 64, 132, 130, 130, 0, 16, 0, 60, 126, 231, 195, 195, 255, 24, 16, 16, 16, 22, 16, 16, 16, 0, 24, 24, 24, 30, 30, 30, 24, 0, 0, 84, 56, 124, 68, 68, 40, 198, 0, 84, 40, 0, 56, 56, 16, 254, 171, 147, 57, 16, 0, 0, 0, 0, 215, 215, 131, 40, 48, 48, 32, 32, 0, 84, 56, 125, 199, 199, 238, 0, 0, 84, 40, 1, 187, 187, 214, 56, 40, 16, 56, 16, 0, 0, 0, 0, 84, 84, 130, 40, 48, 48, 32, 32, 0, 0, 0, 0, 111, 236, 108, 110, 0, 0, 0, 0, 78, 200, 72, 76, 107, 99, 99, 107, 246, 0, 0, 0, 74, 66, 66, 74, 228, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 84, 60, 56, 16, 28, 56, 120, 0, 84, 62, 62, 28, 0, 60, 126, 124, 248, 252, 248, 252, 248, 112, 0, 126, 199, 219, 199, 223, 223, 255, 126, 255, 129, 129, 255, 255, 129, 129, 255, 255, 254, 254, 0, 255, 254, 254, 0, 255, 129, 129, 255, 255, 129, 129, 255, 255, 254, 254, 0, 255, 254, 254, 0, 255, 129, 129, 129, 129, 129, 129, 129, 255, 254, 254, 254, 230, 194, 194, 230, 129, 129, 129, 129, 129, 129, 129, 255, 238, 238, 230, 238, 254, 254, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 56, 254, 56, 16, 16, 16, 16, 16, 56, 254, 56, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 130, 64, 0, 129, 0, 68, 145, 17, 130, 64, 0, 129, 0, 68, 145, 0, 0, 0, 0, 7, 24, 38, 31, 0, 0, 0, 0, 0, 7, 25, 4, 127, 159, 65, 60, 252, 25, 19, 15, 12, 96, 190, 227, 3, 14, 12, 0, 0, 0, 56, 72, 144, 16, 40, 108, 0, 0, 0, 48, 96, 224, 200, 140, 28, 62, 126, 62, 63, 127, 255, 191, 236, 222, 150, 210, 203, 137, 21, 69, 1, 1, 3, 62, 64, 47, 242, 49, 0, 0, 0, 1, 63, 80, 129, 32, 0, 1, 2, 2, 2, 7, 8, 15, 0, 0, 1, 1, 1, 0, 7, 4, 63, 31, 31, 63, 123, 249, 125, 28, 205, 229, 229, 197, 129, 1, 129, 224, 140, 24, 48, 232, 102, 96, 48, 152, 112, 224, 204, 4, 129, 135, 192, 96, 0, 0, 0, 0, 0, 113, 216, 174, 0, 0, 0, 0, 0, 0, 32, 112, 183, 204, 116, 126, 16, 0, 0, 0, 120, 48, 8, 0, 0, 0, 0, 0, 0, 0, 0, 4, 3, 6, 21, 11, 0, 0, 0, 0, 0, 1, 3, 7, 15, 9, 6, 3, 4, 0, 0, 0, 3, 7, 1, 0, 0, 0, 0, 0, 11, 5, 20, 74, 0, 216, 0, 20, 0, 3, 12, 58, 16, 56, 64, 52, 32, 8, 48, 76, 17, 36, 5, 9, 224, 72, 16, 60, 1, 12, 3, 0, 0, 36, 24, 8, 14, 8, 9, 6, 0, 56, 0, 22, 17, 17, 18, 120, 99, 67, 3, 131, 199, 126, 60, 0, 252, 252, 252, 124, 56, 0, 0, 0, 16, 56, 108, 68, 100, 56, 0, 56, 0, 0, 16, 56, 24, 0, 0, 56, 56, 56, 56, 56, 56, 0, 0, 0, 56, 56, 56, 56, 57, 255, 126, 0, 0, 20, 252, 212, 212, 252, 132, 133, 0, 40, 128, 40, 168, 128, 121, 248, 142, 152, 241, 26, 60, 64, 126, 66, 241, 231, 142, 100, 0, 124, 0, 124, 0, 0, 36, 255, 36, 36, 36, 36, 0, 219, 219, 219, 255, 219, 219, 219, 36, 36, 255, 36, 36, 255, 219, 0, 219, 219, 219, 255, 219, 219, 219, 0, 0, 0, 0, 8, 9, 15, 15, 15, 0, 0, 15, 7, 6, 1, 2, 1, 15, 15, 15, 31, 63, 127, 123, 0, 2, 0, 0, 0, 16, 32, 0, 0, 0, 24, 8, 8, 8, 8, 24, 8, 0, 24, 16, 16, 16, 16, 0, 16, 24, 8, 24, 8, 8, 44, 70, 0, 0, 16, 0, 16, 16, 48, 120, 0, 0, 0, 24, 24, 24, 239, 247, 24, 0, 0, 24, 24, 24, 247, 239, 255, 24, 24, 24, 24, 24, 0, 0, 0, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0, 16, 0, 252, 254, 254, 16, 0, 0, 24, 252, 2, 0, 0, 24, 16, 16, 16, 16, 16, 16, 16, 16, 24, 24, 24, 24, 24, 24, 24, 24, 24, 211, 132, 194, 152, 24, 0, 16, 24, 219, 255, 189, 247, 102, 60, 24, 16, 16, 16, 16, 16, 16, 16, 0, 24, 24, 24, 24, 28, 24, 28, 0, 0, 0, 0, 0, 0, 96, 176, 176, 0, 0, 0, 0, 0, 64, 160, 160, 176, 176, 176, 176, 96, 0, 0, 0, 160, 160, 160, 160, 64, 0, 0, 0, 0, 0, 0, 0, 0, 102, 187, 187, 0, 0, 0, 0, 0, 68, 170, 170, 187, 187, 187, 187, 102, 0, 0, 0, 170, 170, 170, 170, 68, 0, 0, 0, 0, 0, 0, 0, 96, 230, 107, 107, 0, 0, 0, 0, 64, 196, 74, 74, 107, 107, 107, 107, 246, 0, 0, 0, 74, 74, 74, 74, 228, 0, 0, 0, 0, 0, 0, 0, 15, 12, 12, 14, 0, 0, 0, 0, 14, 8, 8, 12, 11, 3, 3, 11, 6, 0, 0, 0, 10, 2, 2, 10, 4, 0, 0, 0, 0, 0, 0, 0, 6, 11, 11, 3, 0, 0, 0, 0, 4, 10, 10, 2, 6, 12, 12, 12, 15, 0, 0, 0, 4, 8, 8, 8, 14, 0, 0, 0, 0, 0, 0, 0, 15, 11, 3, 3, 0, 0, 0, 0, 14, 10, 2, 2, 6, 6, 6, 6, 6, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 254, 124, 254, 84, 170, 198, 252, 238, 124, 58, 1, 171, 85, 57, 2, 120, 254, 190, 188, 124, 126, 254, 254, 254, 56, 64, 88, 56, 48, 120, 120, 96, 0, 0, 0, 0, 4, 2, 49, 33, 0, 0, 0, 0, 56, 64, 176, 160, 1, 129, 66, 60, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 255, 0, 153, 0, 0, 153, 0, 255, 0, 255, 153, 153, 153, 153, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 60, 84, 112, 0, 0, 0, 24, 62, 127, 255, 255, 42, 80, 16, 0, 0, 0, 0, 0, 255, 255, 254, 126, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 15, 31, 31, 31, 31, 15, 0, 1, 8, 16, 1, 16, 22, 0, 0, 0, 0, 15, 24, 50, 39, 102, 0, 0, 0, 0, 7, 13, 26, 25, 64, 64, 64, 64, 96, 120, 63, 31, 63, 63, 63, 63, 31, 7, 0, 0, 0, 0, 0, 0, 7, 28, 48, 98, 0, 0, 0, 0, 0, 3, 15, 29, 71, 198, 128, 128, 192, 240, 127, 63, 58, 57, 127, 127, 63, 15, 0, 0, 0, 31, 32, 120, 124, 252, 254, 254, 0, 0, 31, 7, 51, 123, 93, 93, 255, 255, 126, 64, 32, 28, 3, 0, 124, 56, 1, 63, 31, 3, 0, 0, 0, 0, 128, 96, 31, 2, 39, 24, 0, 0, 0, 128, 224, 252, 216, 231, 9, 146, 33, 2, 12, 48, 192, 0, 246, 108, 222, 252, 240, 192, 0, 0, 0, 3, 12, 27, 22, 44, 174, 31, 7, 12, 19, 36, 41, 83, 209, 164, 15, 79, 135, 0, 2, 4, 4, 0, 150, 114, 232, 199, 142, 140, 196, 64, 0, 192, 48, 216, 104, 53, 116, 248, 224, 48, 200, 36, 148, 203, 139, 37, 242, 240, 224, 0, 64, 32, 32, 0, 110, 78, 18, 226, 114, 52, 32, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 3, 63, 127, 127, 255, 255, 95, 0, 0, 1, 62, 6, 99, 89, 21, 31, 7, 35, 127, 127, 63, 1, 0, 6, 4, 0, 42, 60, 0, 0, 0, 0, 240, 248, 252, 252, 255, 255, 254, 0, 0, 240, 24, 24, 24, 243, 226, 255, 255, 254, 252, 255, 255, 255, 14, 232, 203, 18, 32, 104, 19, 6, 0, 0, 240, 248, 252, 255, 255, 254, 255, 0, 0, 240, 24, 24, 27, 242, 224, 255, 254, 252, 252, 254, 255, 254, 28, 235, 202, 16, 40, 80, 14, 24, 0, 7, 8, 22, 40, 32, 0, 31, 63, 0, 7, 15, 31, 31, 63, 32, 10, 63, 71, 83, 38, 124, 204, 222, 123, 0, 56, 44, 25, 3, 51, 33, 0, 240, 12, 6, 2, 3, 1, 1, 131, 0, 240, 248, 252, 252, 254, 254, 124, 199, 255, 94, 83, 89, 202, 249, 183, 56, 0, 160, 172, 166, 52, 6, 0, 7, 8, 22, 60, 67, 153, 189, 190, 0, 7, 15, 3, 60, 102, 102, 65, 190, 190, 156, 65, 127, 145, 167, 89, 65, 99, 107, 62, 0, 110, 88, 0, 240, 12, 6, 2, 3, 129, 193, 195, 0, 240, 248, 252, 252, 126, 62, 60, 227, 255, 254, 148, 146, 18, 50, 36, 28, 0, 0, 104, 108, 236, 204, 216, 0, 0, 0, 0, 60, 102, 219, 189, 0, 0, 0, 0, 0, 24, 60, 126, 189, 219, 102, 60, 0, 0, 0, 0, 126, 60, 24, 0, 0, 0, 0, 0, 0, 0, 0, 7, 24, 35, 30, 252, 0, 0, 0, 0, 7, 28, 9, 3, 255, 255, 255, 143, 1, 1, 0, 0, 252, 255, 142, 0, 0, 0, 0, 0, 3, 13, 18, 254, 57, 54, 60, 124, 0, 2, 12, 0, 198, 200, 192, 128, 59, 141, 2, 12, 4, 143, 119, 2, 196, 114, 252, 240, 248, 112, 0, 2, 0, 0, 0, 240, 32, 48, 12, 99, 0, 0, 0, 0, 192, 192, 240, 156, 249, 253, 110, 50, 44, 147, 111, 2, 6, 2, 144, 204, 208, 108, 0, 2, 36, 37, 110, 127, 127, 255, 255, 255, 0, 0, 1, 0, 0, 17, 3, 86, 255, 127, 124, 120, 62, 57, 16, 16, 126, 60, 59, 55, 17, 16, 0, 0, 0, 248, 220, 246, 190, 250, 218, 218, 0, 0, 32, 8, 64, 4, 36, 36, 155, 55, 103, 7, 31, 247, 239, 238, 100, 200, 152, 248, 224, 0, 74, 0, 36, 36, 109, 126, 127, 255, 255, 255, 0, 0, 0, 1, 0, 17, 3, 86, 255, 127, 127, 120, 60, 59, 17, 23, 126, 60, 56, 55, 19, 16, 0, 2, 0, 0, 240, 216, 252, 180, 254, 218, 0, 0, 0, 32, 0, 72, 0, 36, 219, 155, 51, 102, 12, 120, 252, 254, 36, 100, 204, 152, 240, 128, 0, 128, 0, 0, 0, 0, 3, 15, 31, 63, 0, 0, 0, 0, 0, 0, 4, 0, 63, 127, 127, 127, 135, 89, 54, 205, 1, 16, 0, 2, 248, 94, 55, 205, 0, 0, 0, 0, 224, 248, 252, 222, 0, 0, 0, 0, 32, 168, 40, 42, 214, 215, 149, 171, 170, 170, 74, 0, 42, 42, 106, 84, 85, 85, 181, 254, 0, 0, 0, 0, 3, 15, 31, 63, 0, 0, 0, 0, 0, 0, 4, 0, 63, 127, 127, 127, 7, 105, 202, 26, 1, 16, 0, 2, 120, 110, 203, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 2, 5, 107, 111, 240, 131, 0, 0, 1, 2, 68, 67, 15, 124, 14, 241, 135, 127, 15, 31, 31, 31, 251, 46, 120, 0, 2, 8, 0, 7, 240, 248, 28, 236, 238, 196, 4, 62, 0, 0, 224, 16, 144, 184, 248, 210, 127, 255, 255, 241, 225, 224, 240, 224, 128, 65, 64, 206, 158, 159, 143, 31, 15, 7, 6, 2, 7, 15, 31, 11, 0, 0, 3, 3, 0, 0, 0, 4, 10, 6, 2, 1, 1, 1, 6, 12, 5, 1, 1, 0, 0, 0, 1, 7, 249, 198, 194, 194, 228, 248, 252, 252, 30, 60, 60, 252, 24, 0, 0, 0, 16, 48, 40, 40, 48, 224, 16, 16, 224, 192, 208, 208, 192, 224, 224, 224, 0, 3, 1, 2, 5, 107, 111, 240, 0, 0, 0, 1, 2, 68, 67, 15, 131, 14, 249, 183, 67, 66, 68, 56, 124, 251, 38, 72, 60, 63, 63, 7, 0, 240, 248, 28, 236, 238, 196, 4, 0, 0, 0, 224, 16, 144, 184, 248, 60, 126, 254, 206, 134, 6, 4, 28, 224, 132, 0, 50, 120, 248, 248, 224, 15, 15, 7, 5, 5, 15, 31, 31, 0, 0, 0, 6, 7, 0, 0, 0, 9, 16, 17, 17, 18, 252, 130, 66, 6, 15, 14, 14, 12, 28, 252, 60, 248, 248, 248, 240, 248, 252, 254, 254, 0, 0, 0, 16, 224, 0, 0, 0, 252, 132, 132, 71, 40, 24, 17, 50, 0, 120, 120, 60, 31, 7, 14, 28, 0, 0, 0, 4, 252, 132, 130, 130, 0, 0, 0, 0, 128, 248, 252, 252, 206, 114, 51, 1, 1, 1, 0, 0, 240, 96, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 4, 120, 160, 144, 11, 140, 112, 0, 3, 7, 95, 111, 252, 112, 0, 0, 0, 1, 1, 3, 6, 12, 24, 16, 0, 0, 0, 0, 0, 0, 0, 32, 136, 7, 129, 67, 38, 44, 24, 0, 112, 249, 127, 63, 30, 28, 24, 0, 94, 70, 187, 241, 240, 97, 1, 3, 33, 49, 64, 0, 1, 0, 0, 0, 1, 3, 1, 0, 6, 14, 0, 3, 2, 0, 0, 1, 1, 0, 1, 0, 254, 127, 247, 227, 243, 250, 254, 240, 56, 128, 8, 28, 12, 68, 240, 224, 144, 240, 248, 248, 248, 252, 124, 248, 96, 224, 240, 112, 96, 0, 128, 0, };
        private readonly int[] _vase1Up = { 254, 124, 254, 84, 170, 198, 252, 238, 124, 58, 1, 171, 85, 57, 2, 120, 254, 190, 188, 124, 126, 254, 254, 254, 56, 64, 88, 56, 48, 120, 120, 96, };
        private readonly int[] _vaseOw = { 0, 127, 254, 125, 173, 133, 77, 61, 0, 62, 28, 2, 82, 122, 50, 10, 95, 126, 63, 126, 127, 255, 255, 127, 56, 60, 2, 60, 48, 120, 124, 120, 127, 254, 125, 173, 133, 77, 61, 95, 62, 28, 2, 82, 122, 50, 10, 56, 126, 63, 62, 62, 127, 127, 255, 255, 60, 2, 24, 24, 48, 60, 120, 112, 254, 126, 255, 255, 125, 255, 255, 253, 124, 56, 0, 0, 130, 0, 0, 2, 254, 254, 188, 124, 126, 254, 254, 254, 40, 16, 64, 56, 60, 120, 124, 112, 254, 126, 255, 85, 171, 199, 255, 237, 124, 56, 0, 170, 84, 56, 0, 122, 254, 254, 188, 124, 126, 254, 254, 254, 56, 0, 88, 56, 48, 124, 120, 112, };
        private readonly int[] _vaseSleeper = { 0, 0, 0, 0, 7, 15, 23, 27, 0, 0, 0, 0, 7, 7, 31, 29, 62, 63, 62, 63, 63, 31, 35, 34, 55, 52, 57, 60, 62, 31, 62, 63, 12, 31, 63, 63, 119, 127, 119, 127, 12, 31, 44, 54, 127, 118, 124, 119, 12, 158, 223, 239, 247, 227, 251, 252, 12, 146, 81, 44, 62, 28, 252, 255, 0, 0, 0, 129, 206, 240, 100, 232, 0, 0, 0, 129, 79, 127, 223, 255, 0, 0, 0, 224, 24, 4, 2, 53, 0, 0, 0, 224, 248, 252, 254, 255, };
        private readonly int[] _vaseTitle = { 254, 124, 254, 84, 170, 198, 252, 238, 124, 58, 1, 171, 85, 57, 2, 120, 254, 190, 188, 124, 126, 254, 254, 254, 56, 64, 88, 56, 48, 120, 120, 96, };
        private readonly int[] _vaseEnd1 = { 0, 15, 63, 63, 59, 31, 63, 63, 0, 0, 16, 8, 5, 9, 27, 26, 63, 31, 4, 8, 8, 31, 23, 79, 28, 4, 3, 7, 7, 0, 11, 3, 0, 128, 192, 192, 224, 224, 240, 240, 0, 0, 0, 0, 0, 0, 0, 0, 240, 240, 248, 120, 120, 248, 240, 208, 0, 0, 0, 128, 128, 0, 128, 32, 255, 255, 127, 0, 0, 1, 1, 1, 71, 254, 0, 0, 0, 0, 0, 0, 3, 2, 2, 2, 2, 4, 4, 15, 0, 1, 1, 1, 1, 3, 3, 0, 208, 144, 56, 200, 132, 4, 4, 2, 32, 96, 192, 48, 120, 248, 248, 252, 2, 2, 2, 3, 1, 1, 5, 212, 252, 252, 252, 252, 254, 254, 250, 43, 15, 39, 15, 31, 15, 15, 191, 159, 231, 195, 192, 192, 208, 208, 64, 96, 31, 95, 47, 31, 31, 31, 15, 7, 96, 32, 16, 4, 15, 7, 3, 0, 15, 31, 7, 15, 15, 31, 31, 63, 6, 12, 2, 7, 7, 6, 15, 31, 63, 63, 127, 127, 127, 127, 63, 31, 15, 31, 31, 57, 30, 31, 7, 0, 248, 240, 224, 224, 56, 176, 144, 16, 240, 224, 192, 0, 192, 64, 224, 224, 32, 192, 128, 64, 224, 224, 192, 71, 192, 0, 0, 128, 192, 192, 0, 128, 168, 129, 204, 240, 192, 224, 224, 224, 71, 126, 48, 128, 128, 192, 192, 192, 224, 240, 240, 240, 248, 248, 240, 224, 192, 224, 224, 224, 240, 240, 224, 0, };
        private readonly int[] _vaseEnd2 = { 0, 0, 0, 0, 7, 15, 23, 27, 0, 0, 0, 0, 7, 7, 31, 29, 62, 63, 62, 63, 63, 31, 35, 34, 55, 52, 57, 60, 62, 31, 62, 63, 12, 31, 63, 63, 119, 127, 119, 127, 12, 31, 44, 54, 127, 118, 124, 119, 12, 158, 223, 239, 247, 227, 251, 252, 12, 146, 81, 44, 62, 28, 252, 255, 0, 0, 0, 129, 206, 240, 100, 232, 0, 0, 0, 129, 79, 127, 223, 255, 0, 0, 0, 224, 24, 4, 2, 53, 0, 0, 0, 224, 248, 252, 254, 255, 255, 129, 255, 255, 153, 153, 153, 153, 1, 127, 255, 17, 119, 119, 119, 119, 16, 16, 16, 16, 0, 0, 16, 0, 8, 8, 8, 8, 24, 0, 8, 24, 0, 0, 0, 0, 7, 15, 23, 27, 0, 0, 0, 0, 7, 7, 31, 29, 62, 63, 62, 63, 63, 31, 35, 34, 55, 52, 57, 60, 62, 31, 62, 63, 0, 0, 0, 0, 0, 192, 224, 96, 0, 0, 0, 0, 0, 192, 224, 160, 192, 224, 160, 224, 224, 192, 64, 160, 96, 32, 96, 32, 96, 192, 192, 96, 60, 60, 28, 56, 57, 61, 125, 255, 63, 39, 7, 15, 15, 14, 31, 31, 32, 48, 48, 224, 240, 128, 6, 15, 224, 240, 240, 231, 63, 127, 255, 255, };
        private readonly int[] _vaseEnd3 = { 15, 39, 15, 31, 45, 42, 146, 152, 231, 195, 192, 192, 210, 215, 109, 103, 28, 78, 77, 46, 31, 31, 15, 15, 99, 49, 50, 21, 15, 15, 3, 0, 15, 7, 7, 15, 15, 31, 31, 63, 5, 0, 3, 7, 7, 6, 15, 31, 63, 63, 127, 127, 127, 127, 63, 31, 15, 31, 31, 57, 30, 31, 7, 0, };
        private readonly int[] _vaseHead = { 124, 58, 1, 171, 85, 57, 2, 120, 254, 124, 254, 84, 170, 198, 252, 238, };
        private readonly int[] _vaseRaft = { 7, 15, 7, 10, 8, 4, 3, 253, 3, 1, 0, 5, 7, 3, 0, 3, 135, 255, 131, 255, 135, 255, 143, 255, 123, 0, 125, 1, 123, 3, 119, 7, 240, 224, 208, 208, 80, 208, 208, 255, 224, 192, 32, 32, 160, 32, 160, 128, 225, 255, 225, 255, 241, 255, 241, 255, 222, 32, 158, 128, 14, 192, 142, 0, };
        private readonly int[] _vaseBeam = { 0, 0, 0, 0, 0, 113, 216, 174, 0, 0, 0, 0, 0, 0, 32, 112, 183, 204, 116, 126, 16, 0, 0, 0, 120, 48, 8, 0, 0, 0, 0, 0, };

        private readonly int[] _rutosprite = { 0, 0, 1, 2, 65, 162, 166, 167, 0, 0, 0, 1, 3, 65, 67, 67, 179, 249, 249, 255, 255, 255, 255, 175, 65, 80, 80, 89, 75, 77, 70, 67, 0, 252, 254, 7, 251, 197, 174, 220, 0, 0, 0, 248, 236, 254, 244, 232, 232, 160, 240, 168, 248, 252, 252, 190, 208, 208, 192, 240, 240, 248, 152, 76, 75, 10, 5, 3, 2, 4, 7, 13, 5, 5, 2, 0, 1, 3, 3, 6, 15, 30, 28, 30, 52, 40, 112, 0, 6, 12, 8, 12, 24, 16, 0, 0, 122, 246, 250, 242, 214, 250, 162, 230, 156, 124, 108, 140, 44, 156, 92, 92, 252, 120, 56, 52, 20, 26, 52, 120, 24, 32, 16, 24, 8, 12, 24, 0, 0, 0, 1, 3, 4, 67, 165, 173, 0, 0, 0, 0, 3, 7, 67, 71, 167, 183, 251, 251, 255, 255, 255, 255, 71, 67, 81, 81, 91, 75, 77, 70, 0, 0, 248, 252, 14, 246, 138, 92, 0, 0, 0, 0, 240, 216, 252, 232, 184, 208, 64, 224, 80, 248, 252, 252, 208, 160, 160, 128, 224, 240, 248, 152, 175, 75, 10, 5, 2, 3, 6, 7, 67, 5, 5, 2, 1, 1, 3, 2, 7, 7, 7, 7, 7, 7, 13, 31, 2, 3, 3, 2, 2, 2, 6, 0, 190, 122, 246, 250, 242, 214, 186, 98, 76, 156, 124, 108, 140, 44, 220, 220, 230, 252, 248, 62, 23, 13, 14, 30, 220, 88, 32, 24, 14, 6, 4, 0, 75, 10, 5, 3, 2, 5, 14, 13, 5, 5, 2, 0, 1, 3, 7, 6, 15, 5, 3, 3, 2, 1, 1, 3, 7, 3, 1, 1, 1, 0, 0, 0, 122, 246, 250, 242, 214, 122, 98, 166, 156, 124, 108, 140, 44, 156, 156, 92, 188, 248, 96, 224, 224, 224, 160, 224, 88, 128, 128, 64, 64, 64, 192, 0, 0, 7, 15, 31, 30, 62, 61, 61, 0, 0, 0, 0, 1, 1, 3, 3, 59, 59, 23, 15, 3, 1, 1, 0, 7, 7, 15, 2, 1, 0, 0, 0, 0, 128, 224, 48, 208, 160, 176, 160, 0, 0, 0, 192, 96, 240, 192, 216, 208, 232, 252, 254, 238, 254, 254, 253, 224, 208, 184, 124, 252, 236, 216, 58, 1, 3, 3, 1, 1, 3, 3, 1, 0, 1, 1, 0, 0, 1, 1, 0, 3, 3, 3, 3, 3, 6, 7, 14, 0, 1, 1, 1, 1, 3, 2, 0, 254, 223, 63, 211, 230, 252, 212, 232, 116, 238, 192, 126, 156, 64, 56, 176, 252, 250, 221, 202, 68, 128, 0, 0, 192, 156, 142, 4, 128, 0, 0, 0, 32, 112, 112, 120, 120, 56, 56, 56, 0, 32, 32, 48, 48, 16, 16, 16, 60, 61, 63, 67, 127, 189, 254, 247, 25, 24, 1, 61, 25, 88, 44, 46, 0, 0, 0, 0, 0, 0, 0, 240, 0, 0, 0, 0, 0, 0, 0, 0, 124, 190, 95, 239, 215, 179, 174, 212, 128, 192, 224, 240, 248, 204, 80, 96, 251, 215, 211, 251, 119, 115, 249, 221, 79, 109, 108, 109, 45, 14, 110, 118, 255, 255, 215, 209, 105, 208, 224, 0, 98, 96, 97, 96, 48, 96, 0, 0, 232, 236, 206, 182, 94, 112, 80, 32, 240, 240, 116, 204, 176, 160, 160, 192, 144, 108, 138, 250, 254, 252, 240, 96, 224, 240, 116, 140, 212, 96, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 27, 31, 15, 31, 127, 63, 15, 17, 25, 28, 9, 1, 112, 54, 6, 75, 10, 5, 3, 2, 2, 5, 6, 5, 5, 2, 0, 1, 1, 3, 3, 7, 15, 15, 14, 14, 14, 26, 62, 3, 6, 6, 4, 4, 4, 12, 0, 0, 0, 0, 0, 0, 0, 24, 40, 0, 0, 0, 0, 0, 0, 0, 16, 40, 118, 89, 111, 113, 95, 97, 127, 16, 56, 62, 62, 62, 62, 62, 0, 0, 0, 31, 63, 64, 63, 88, 213, 0, 0, 0, 0, 63, 125, 63, 126, 251, 125, 52, 123, 255, 239, 247, 251, 125, 58, 26, 28, 104, 215, 42, 245, 127, 63, 60, 21, 10, 5, 7, 7, 63, 0, 24, 8, 1, 2, 1, 3, 6, 7, 14, 14, 15, 26, 20, 56, 3, 2, 4, 4, 6, 12, 8, 0, 253, 251, 113, 249, 111, 255, 245, 119, 138, 118, 46, 110, 246, 240, 218, 154, 189, 62, 28, 28, 28, 30, 58, 62, 26, 24, 8, 8, 8, 12, 28, 0, 0, 0, 128, 192, 224, 96, 160, 192, 0, 0, 0, 0, 0, 128, 192, 128, 128, 0, 0, 240, 248, 216, 32, 192, 0, 0, 0, 0, 112, 224, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 255, 127, 31, 0, 0, 0, 0, 0, 120, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 10, 5, 0, 0, 0, 0, 0, 0, 4, 2, 5, 29, 239, 239, 239, 239, 51, 1, 2, 3, 16, 215, 214, 16, 1, 0, 0, 0, 63, 127, 129, 126, 177, 171, 0, 0, 0, 0, 126, 251, 127, 253, 247, 250, 232, 255, 255, 191, 222, 188, 250, 116, 180, 0, 253, 126, 111, 111, 0, 0, 0, 128, 192, 192, 64, 128, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 128, 192, 192, 192, 224, 0, 0, 0, 0, 128, 128, 0, 64, 150, 255, 71, 79, 127, 63, 31, 59, 111, 115, 59, 57, 49, 5, 14, 28, 125, 118, 60, 30, 14, 7, 13, 31, 50, 56, 24, 12, 4, 2, 6, 0, 176, 80, 160, 48, 136, 204, 212, 236, 96, 160, 192, 224, 112, 120, 184, 216, 248, 120, 60, 30, 23, 13, 14, 30, 96, 48, 24, 8, 14, 6, 4, 0, 0, 0, 0, 3, 15, 31, 31, 63, 0, 0, 0, 0, 0, 0, 0, 0, 31, 111, 247, 91, 92, 127, 47, 47, 32, 16, 88, 44, 39, 51, 20, 23, 0, 0, 0, 128, 224, 240, 240, 248, 0, 0, 0, 0, 0, 0, 0, 0, 232, 216, 184, 124, 244, 228, 236, 244, 20, 60, 112, 232, 216, 152, 88, 216, 127, 47, 18, 31, 37, 87, 47, 31, 54, 25, 15, 1, 27, 60, 21, 5, 15, 11, 27, 63, 23, 15, 7, 2, 5, 5, 5, 27, 11, 2, 2, 0, 228, 236, 84, 232, 212, 234, 244, 252, 88, 152, 248, 176, 232, 28, 168, 160, 240, 224, 128, 128, 128, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 22, 53, 62, 31, 29, 63, 15, 31, 15, 31, 31, 14, 6, 19, 0, 0, 0, 0, 0, 0, 224, 240, 0, 0, 0, 0, 0, 0, 0, 0, 56, 216, 40, 112, 224, 64, 0, 192, 192, 96, 240, 160, 64, 128, 128, 0, 126, 191, 191, 191, 191, 255, 255, 250, 23, 91, 75, 77, 70, 83, 81, 69, 245, 255, 253, 181, 127, 59, 104, 248, 78, 76, 90, 90, 18, 16, 48, 0, 160, 240, 248, 124, 252, 188, 116, 244, 192, 224, 112, 152, 8, 88, 152, 120, 252, 116, 182, 173, 246, 231, 237, 126, 104, 136, 200, 218, 216, 218, 90, 0, 0, 32, 32, 114, 120, 122, 250, 248, 0, 36, 38, 84, 75, 71, 135, 135, 252, 252, 220, 138, 1, 1, 0, 0, 131, 131, 131, 129, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 10, 24, 0, 4, 6, 4, 3, 7, 15, 31, 28, 30, 30, 30, 31, 31, 12, 8, 27, 29, 29, 29, 24, 24, 8, 8, 8, 9, 88, 92, 116, 116, 102, 110, 0, 0, 0, 0, 8, 8, 24, 16, 203, 195, 137, 153, 219, 102, 60, 0, 52, 60, 126, 126, 60, 24, 0, 0, 0, 0, 0, 0, 0, 120, 255, 127, 0, 0, 0, 0, 0, 0, 120, 31, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 2, 6, 7, 3, 1, 0, 1, 3, 1, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 252, 0, 0, 0, 0, 0, 0, 0, 0, 254, 7, 251, 197, 174, 220, 232, 160, 0, 248, 236, 254, 244, 232, 208, 208, 28, 22, 11, 11, 10, 31, 239, 239, 0, 12, 6, 6, 5, 2, 17, 215, 239, 239, 48, 0, 1, 1, 0, 0, 214, 16, 0, 0, 0, 0, 0, 0, 222, 215, 255, 251, 251, 254, 242, 164, 96, 122, 250, 188, 116, 227, 207, 255, 255, 249, 252, 255, 251, 120, 232, 240, 0, 159, 51, 112, 224, 208, 48, 0, 0, 0, 0, 192, 96, 96, 96, 192, 0, 0, 0, 0, 192, 192, 192, 128, 128, 96, 224, 254, 255, 253, 7, 15, 0, 128, 192, 32, 254, 6, 2, 0, 0, 0, 0, 0, 6, 11, 3, 3, 0, 0, 0, 0, 4, 10, 2, 2, 6, 3, 3, 11, 6, 0, 0, 0, 4, 2, 2, 10, 4, 0, 0, 0, 68, 68, 198, 198, 238, 238, 254, 254, 0, 0, 0, 0, 0, 0, 40, 124, 124, 124, 254, 254, 255, 127, 63, 127, 56, 16, 68, 124, 124, 50, 14, 62, 254, 254, 254, 126, 252, 254, 254, 126, 92, 96, 124, 28, 96, 124, 124, 48, 126, 127, 127, 255, 254, 254, 126, 60, 12, 62, 62, 14, 112, 124, 60, 0, 0, 60, 64, 132, 130, 130, 0, 16, 0, 60, 126, 231, 195, 195, 255, 24, 16, 16, 16, 22, 16, 16, 16, 0, 24, 24, 24, 30, 30, 30, 24, 0, 0, 84, 56, 124, 68, 68, 40, 198, 0, 84, 40, 0, 56, 56, 16, 254, 171, 147, 57, 16, 0, 0, 0, 0, 215, 215, 131, 40, 48, 48, 32, 32, 0, 84, 56, 125, 199, 199, 238, 0, 0, 84, 40, 1, 187, 187, 214, 56, 40, 16, 56, 16, 0, 0, 0, 0, 84, 84, 130, 40, 48, 48, 32, 32, 0, 0, 0, 0, 111, 236, 108, 110, 0, 0, 0, 0, 78, 200, 72, 76, 107, 99, 99, 107, 246, 0, 0, 0, 74, 66, 66, 74, 228, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 84, 60, 56, 16, 28, 56, 120, 0, 84, 62, 62, 28, 0, 60, 126, 124, 248, 252, 248, 252, 248, 112, 0, 126, 199, 219, 199, 223, 223, 255, 126, 255, 129, 129, 255, 255, 129, 129, 255, 255, 254, 254, 0, 255, 254, 254, 0, 255, 129, 129, 255, 255, 129, 129, 255, 255, 254, 254, 0, 255, 254, 254, 0, 255, 129, 129, 129, 129, 129, 129, 129, 255, 254, 254, 254, 230, 194, 194, 230, 129, 129, 129, 129, 129, 129, 129, 255, 238, 238, 230, 238, 254, 254, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 56, 254, 56, 16, 16, 16, 16, 16, 56, 254, 56, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 130, 64, 0, 129, 0, 68, 145, 17, 130, 64, 0, 129, 0, 68, 145, 0, 0, 0, 0, 7, 24, 38, 31, 0, 0, 0, 0, 0, 7, 25, 4, 127, 159, 65, 60, 252, 25, 19, 15, 12, 96, 190, 227, 3, 14, 12, 0, 0, 0, 56, 72, 144, 16, 40, 108, 0, 0, 0, 48, 96, 224, 200, 140, 28, 62, 126, 62, 63, 127, 255, 191, 236, 222, 150, 210, 203, 137, 21, 69, 1, 1, 3, 62, 64, 47, 242, 49, 0, 0, 0, 1, 63, 80, 129, 32, 0, 1, 2, 2, 2, 7, 8, 15, 0, 0, 1, 1, 1, 0, 7, 4, 63, 31, 31, 63, 123, 249, 125, 28, 205, 229, 229, 197, 129, 1, 129, 224, 140, 24, 48, 232, 102, 96, 48, 152, 112, 224, 204, 4, 129, 135, 192, 96, 0, 0, 0, 0, 0, 113, 216, 174, 0, 0, 0, 0, 0, 0, 32, 112, 183, 204, 116, 126, 16, 0, 0, 0, 120, 48, 8, 0, 0, 0, 0, 0, 0, 0, 0, 4, 3, 6, 21, 11, 0, 0, 0, 0, 0, 1, 3, 7, 15, 9, 6, 3, 4, 0, 0, 0, 3, 7, 1, 0, 0, 0, 0, 0, 11, 5, 20, 74, 0, 216, 0, 20, 0, 3, 12, 58, 16, 56, 64, 52, 32, 8, 48, 76, 17, 36, 5, 9, 224, 72, 16, 60, 1, 12, 3, 0, 0, 36, 24, 8, 14, 8, 9, 6, 0, 56, 0, 22, 17, 17, 18, 120, 99, 67, 3, 131, 199, 126, 60, 0, 252, 252, 252, 124, 56, 0, 0, 0, 16, 56, 108, 68, 100, 56, 0, 56, 0, 0, 16, 56, 24, 0, 0, 56, 56, 56, 56, 56, 56, 0, 0, 0, 56, 56, 56, 56, 57, 255, 126, 0, 0, 20, 252, 212, 212, 252, 132, 133, 0, 40, 128, 40, 168, 128, 121, 248, 142, 152, 241, 26, 60, 64, 126, 66, 241, 231, 142, 100, 0, 124, 0, 124, 0, 0, 0, 5, 0, 1, 4, 0, 0, 112, 138, 141, 137, 113, 6, 24, 60, 102, 243, 243, 195, 231, 110, 60, 60, 90, 189, 189, 189, 157, 82, 60, 0, 0, 0, 8, 9, 15, 15, 15, 0, 0, 15, 7, 6, 1, 2, 1, 15, 15, 15, 31, 63, 127, 123, 0, 2, 0, 0, 0, 16, 32, 0, 0, 0, 24, 8, 8, 8, 8, 24, 8, 0, 24, 16, 16, 16, 16, 0, 16, 24, 8, 24, 8, 8, 44, 70, 0, 0, 16, 0, 16, 16, 48, 120, 0, 0, 0, 24, 24, 24, 239, 247, 24, 0, 0, 24, 24, 24, 247, 239, 255, 24, 24, 24, 24, 24, 0, 0, 0, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0, 16, 0, 252, 254, 254, 16, 0, 0, 24, 252, 2, 0, 0, 24, 16, 16, 16, 16, 16, 16, 16, 16, 24, 24, 24, 24, 24, 24, 24, 24, 24, 211, 132, 194, 152, 24, 0, 16, 24, 219, 255, 189, 247, 102, 60, 24, 16, 16, 16, 16, 16, 16, 16, 0, 24, 24, 24, 24, 28, 24, 28, 0, 0, 0, 0, 0, 0, 96, 176, 176, 0, 0, 0, 0, 0, 64, 160, 160, 176, 176, 176, 176, 96, 0, 0, 0, 160, 160, 160, 160, 64, 0, 0, 0, 0, 0, 0, 0, 0, 102, 187, 187, 0, 0, 0, 0, 0, 68, 170, 170, 187, 187, 187, 187, 102, 0, 0, 0, 170, 170, 170, 170, 68, 0, 0, 0, 0, 0, 0, 0, 96, 230, 107, 107, 0, 0, 0, 0, 64, 196, 74, 74, 107, 107, 107, 107, 246, 0, 0, 0, 74, 74, 74, 74, 228, 0, 0, 0, 0, 0, 0, 0, 15, 12, 12, 14, 0, 0, 0, 0, 14, 8, 8, 12, 11, 3, 3, 11, 6, 0, 0, 0, 10, 2, 2, 10, 4, 0, 0, 0, 0, 0, 0, 0, 6, 11, 11, 3, 0, 0, 0, 0, 4, 10, 10, 2, 6, 12, 12, 12, 15, 0, 0, 0, 4, 8, 8, 8, 14, 0, 0, 0, 0, 0, 0, 0, 15, 11, 3, 3, 0, 0, 0, 0, 14, 10, 2, 2, 6, 6, 6, 6, 6, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 28, 127, 65, 127, 42, 28, 42, 0, 0, 0, 62, 93, 127, 93, 28, 127, 127, 127, 127, 62, 54, 119, 20, 62, 127, 93, 73, 85, 117, 54, 54, 0, 0, 0, 0, 4, 2, 49, 33, 0, 0, 0, 0, 56, 64, 176, 160, 1, 129, 66, 60, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 255, 0, 153, 0, 0, 153, 0, 255, 0, 255, 153, 153, 153, 153, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 60, 84, 112, 0, 0, 0, 24, 62, 127, 255, 255, 42, 80, 16, 0, 0, 0, 0, 0, 255, 255, 254, 126, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 15, 31, 31, 31, 31, 15, 0, 1, 8, 16, 1, 16, 22, 0, 0, 0, 0, 15, 24, 50, 39, 102, 0, 0, 0, 0, 7, 13, 26, 25, 64, 64, 64, 64, 96, 120, 63, 31, 63, 63, 63, 63, 31, 7, 0, 0, 0, 0, 0, 0, 7, 28, 48, 98, 0, 0, 0, 0, 0, 3, 15, 29, 71, 198, 128, 128, 192, 240, 127, 63, 58, 57, 127, 127, 63, 15, 0, 0, 0, 31, 32, 120, 124, 252, 254, 254, 0, 0, 31, 7, 51, 123, 93, 93, 255, 255, 126, 64, 32, 28, 3, 0, 124, 56, 1, 63, 31, 3, 0, 0, 0, 0, 128, 96, 31, 2, 39, 24, 0, 0, 0, 128, 224, 252, 216, 231, 9, 146, 33, 2, 12, 48, 192, 0, 246, 108, 222, 252, 240, 192, 0, 0, 0, 3, 12, 27, 22, 44, 174, 31, 7, 12, 19, 36, 41, 83, 209, 164, 15, 79, 135, 0, 2, 4, 4, 0, 150, 114, 232, 199, 142, 140, 196, 64, 0, 192, 48, 216, 104, 53, 116, 248, 224, 48, 200, 36, 148, 203, 139, 37, 242, 240, 224, 0, 64, 32, 32, 0, 110, 78, 18, 226, 114, 52, 32, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 3, 63, 127, 127, 255, 255, 95, 0, 0, 1, 62, 6, 99, 89, 21, 31, 7, 35, 127, 127, 63, 1, 0, 6, 4, 0, 42, 60, 0, 0, 0, 0, 240, 248, 252, 252, 255, 255, 254, 0, 0, 240, 24, 24, 24, 243, 226, 255, 255, 254, 252, 255, 255, 255, 14, 232, 203, 18, 32, 104, 19, 6, 0, 0, 240, 248, 252, 255, 255, 254, 255, 0, 0, 240, 24, 24, 27, 242, 224, 255, 254, 252, 252, 254, 255, 254, 28, 235, 202, 16, 40, 80, 14, 24, 0, 7, 8, 22, 40, 32, 0, 31, 63, 0, 7, 15, 31, 31, 63, 32, 10, 63, 71, 83, 38, 124, 204, 222, 123, 0, 56, 44, 25, 3, 51, 33, 0, 240, 12, 6, 2, 3, 1, 1, 131, 0, 240, 248, 252, 252, 254, 254, 124, 199, 255, 94, 83, 89, 202, 249, 183, 56, 0, 160, 172, 166, 52, 6, 0, 7, 8, 22, 60, 67, 153, 189, 190, 0, 7, 15, 3, 60, 102, 102, 65, 190, 190, 156, 65, 127, 145, 167, 89, 65, 99, 107, 62, 0, 110, 88, 0, 240, 12, 6, 2, 3, 129, 193, 195, 0, 240, 248, 252, 252, 126, 62, 60, 227, 255, 254, 148, 146, 18, 50, 36, 28, 0, 0, 104, 108, 236, 204, 216, 0, 0, 0, 0, 60, 102, 219, 189, 0, 0, 0, 0, 0, 24, 60, 126, 189, 219, 102, 60, 0, 0, 0, 0, 126, 60, 24, 0, 0, 0, 0, 0, 0, 0, 0, 7, 24, 35, 30, 252, 0, 0, 0, 0, 7, 28, 9, 3, 255, 255, 255, 143, 1, 1, 0, 0, 252, 255, 142, 0, 0, 0, 0, 0, 3, 13, 18, 254, 57, 54, 60, 124, 0, 2, 12, 0, 198, 200, 192, 128, 59, 141, 2, 12, 4, 143, 119, 2, 196, 114, 252, 240, 248, 112, 0, 2, 0, 0, 0, 240, 32, 48, 12, 99, 0, 0, 0, 0, 192, 192, 240, 156, 249, 253, 110, 50, 44, 147, 111, 2, 6, 2, 144, 204, 208, 108, 0, 2, 36, 37, 110, 127, 127, 255, 255, 255, 0, 0, 1, 0, 0, 17, 3, 86, 255, 127, 124, 120, 62, 57, 16, 16, 126, 60, 59, 55, 17, 16, 0, 0, 0, 248, 220, 246, 190, 250, 218, 218, 0, 0, 32, 8, 64, 4, 36, 36, 155, 55, 103, 7, 31, 247, 239, 238, 100, 200, 152, 248, 224, 0, 74, 0, 36, 36, 109, 126, 127, 255, 255, 255, 0, 0, 0, 1, 0, 17, 3, 86, 255, 127, 127, 120, 60, 59, 17, 23, 126, 60, 56, 55, 19, 16, 0, 2, 0, 0, 240, 216, 252, 180, 254, 218, 0, 0, 0, 32, 0, 72, 0, 36, 219, 155, 51, 102, 12, 120, 252, 254, 36, 100, 204, 152, 240, 128, 0, 128, 0, 0, 0, 0, 3, 15, 31, 63, 0, 0, 0, 0, 0, 0, 4, 0, 63, 127, 127, 127, 135, 89, 54, 205, 1, 16, 0, 2, 248, 94, 55, 205, 0, 0, 0, 0, 224, 248, 252, 222, 0, 0, 0, 0, 32, 168, 40, 42, 214, 215, 149, 171, 170, 170, 74, 0, 42, 42, 106, 84, 85, 85, 181, 254, 0, 0, 0, 0, 3, 15, 31, 63, 0, 0, 0, 0, 0, 0, 4, 0, 63, 127, 127, 127, 7, 105, 202, 26, 1, 16, 0, 2, 120, 110, 203, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 2, 5, 107, 111, 240, 131, 0, 0, 1, 2, 68, 67, 15, 124, 14, 241, 135, 127, 15, 31, 31, 31, 251, 46, 120, 0, 2, 8, 0, 7, 240, 248, 28, 236, 238, 196, 4, 62, 0, 0, 224, 16, 144, 184, 248, 210, 127, 255, 255, 241, 225, 224, 240, 224, 128, 65, 64, 206, 158, 159, 143, 31, 15, 7, 6, 2, 7, 15, 31, 11, 0, 0, 3, 3, 0, 0, 0, 4, 10, 6, 2, 1, 1, 1, 6, 12, 5, 1, 1, 0, 0, 0, 1, 7, 249, 198, 194, 194, 228, 248, 252, 252, 30, 60, 60, 252, 24, 0, 0, 0, 16, 48, 40, 40, 48, 224, 16, 16, 224, 192, 208, 208, 192, 224, 224, 224, 0, 3, 1, 2, 5, 107, 111, 240, 0, 0, 0, 1, 2, 68, 67, 15, 131, 14, 249, 183, 67, 66, 68, 56, 124, 251, 38, 72, 60, 63, 63, 7, 0, 240, 248, 28, 236, 238, 196, 4, 0, 0, 0, 224, 16, 144, 184, 248, 60, 126, 254, 206, 134, 6, 4, 28, 224, 132, 0, 50, 120, 248, 248, 224, 15, 15, 7, 5, 5, 15, 31, 31, 0, 0, 0, 6, 7, 0, 0, 0, 9, 16, 17, 17, 18, 252, 130, 66, 6, 15, 14, 14, 12, 28, 252, 60, 248, 248, 248, 240, 248, 252, 254, 254, 0, 0, 0, 16, 224, 0, 0, 0, 252, 132, 132, 71, 40, 24, 17, 50, 0, 120, 120, 60, 31, 7, 14, 28, 0, 0, 0, 4, 252, 132, 130, 130, 0, 0, 0, 0, 128, 248, 252, 252, 206, 114, 51, 1, 1, 1, 0, 0, 240, 96, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 4, 120, 160, 144, 11, 140, 112, 0, 3, 7, 95, 111, 252, 112, 0, 0, 0, 1, 1, 3, 6, 12, 24, 16, 0, 0, 0, 0, 0, 0, 0, 32, 136, 7, 129, 67, 38, 44, 24, 0, 112, 249, 127, 63, 30, 28, 24, 0, 94, 70, 187, 241, 240, 97, 1, 3, 33, 49, 64, 0, 1, 0, 0, 0, 1, 3, 1, 0, 6, 14, 0, 3, 2, 0, 0, 1, 1, 0, 1, 0, 254, 127, 247, 227, 243, 250, 254, 240, 56, 128, 8, 28, 12, 68, 240, 224, 144, 240, 248, 248, 248, 252, 124, 248, 96, 224, 240, 112, 96, 0, 128, 0, };
        private readonly int[] _ruto1Up = { 0, 28, 127, 65, 127, 42, 28, 42, 0, 0, 0, 62, 93, 127, 93, 28, 127, 127, 127, 127, 62, 54, 119, 20, 62, 127, 93, 73, 85, 117, 54, 54, };
        private readonly int[] _rutoOw = { 0, 60, 126, 7, 219, 253, 118, 180, 0, 0, 0, 120, 116, 126, 56, 8, 254, 254, 252, 140, 14, 15, 118, 195, 28, 12, 56, 48, 60, 54, 35, 97, 60, 126, 7, 219, 253, 118, 180, 254, 0, 0, 120, 116, 126, 56, 8, 28, 255, 255, 190, 62, 18, 18, 28, 48, 54, 58, 27, 27, 13, 13, 0, 24, 28, 62, 127, 127, 93, 34, 28, 54, 0, 0, 0, 0, 99, 127, 93, 28, 107, 107, 43, 86, 190, 116, 48, 16, 54, 53, 21, 61, 85, 54, 48, 48, 56, 254, 130, 254, 84, 56, 84, 254, 0, 0, 124, 186, 254, 186, 56, 124, 255, 125, 82, 120, 126, 104, 224, 32, 154, 234, 188, 150, 168, 172, 96, 96, };
        private readonly int[] _rutoSleeper = { 0, 0, 3, 4, 8, 17, 23, 23, 0, 0, 3, 7, 15, 31, 27, 26, 39, 47, 23, 31, 19, 45, 62, 62, 58, 60, 20, 30, 30, 63, 63, 63, 25, 63, 79, 143, 135, 131, 193, 112, 25, 62, 120, 252, 254, 254, 255, 127, 0, 128, 207, 215, 239, 239, 231, 193, 0, 128, 79, 95, 127, 63, 63, 255, 0, 0, 239, 56, 253, 255, 255, 255, 0, 0, 239, 255, 231, 227, 225, 255, 0, 0, 1, 227, 255, 255, 245, 255, 0, 0, 1, 227, 31, 31, 31, 255, };
        private readonly int[] _rutoTitle = { 57, 255, 131, 255, 85, 57, 85, 255, 1, 1, 125, 187, 255, 186, 57, 127, 254, 252, 210, 248, 126, 108, 236, 40, 186, 184, 188, 150, 168, 172, 108, 108, };
        private readonly int[] _rutoEnd1 = { 0, 1, 14, 31, 31, 15, 63, 63, 0, 0, 1, 0, 0, 6, 5, 29, 31, 15, 15, 7, 5, 9, 4, 6, 15, 3, 7, 0, 2, 6, 3, 1, 0, 248, 36, 114, 245, 247, 252, 248, 0, 0, 216, 172, 42, 104, 96, 96, 252, 240, 248, 196, 140, 28, 62, 30, 192, 192, 128, 184, 112, 224, 192, 224, 230, 254, 255, 63, 5, 9, 15, 7, 1, 225, 64, 0, 2, 6, 0, 2, 7, 15, 15, 15, 15, 7, 7, 15, 3, 7, 6, 6, 0, 0, 0, 0, 111, 254, 252, 252, 252, 248, 252, 248, 144, 0, 112, 120, 120, 48, 0, 112, 248, 248, 120, 116, 124, 58, 30, 62, 112, 112, 32, 8, 0, 4, 0, 0, 232, 255, 111, 111, 111, 247, 235, 252, 0, 104, 48, 16, 16, 88, 92, 71, 247, 243, 252, 188, 219, 117, 43, 5, 107, 41, 51, 95, 110, 46, 6, 2, 5, 3, 5, 12, 27, 52, 77, 63, 2, 0, 2, 7, 13, 27, 54, 6, 13, 15, 11, 11, 15, 15, 30, 31, 6, 6, 6, 6, 2, 6, 15, 0, 0, 0, 128, 64, 128, 64, 96, 224, 0, 0, 0, 128, 192, 128, 192, 192, 192, 128, 128, 192, 224, 224, 240, 240, 128, 0, 0, 128, 192, 192, 224, 192, 114, 255, 255, 167, 124, 100, 164, 124, 160, 178, 31, 24, 152, 152, 216, 216, 228, 244, 252, 120, 112, 112, 88, 124, 216, 104, 104, 32, 32, 32, 48, 0, };
        private readonly int[] _rutoEnd2 = { 0, 0, 3, 4, 8, 17, 23, 23, 0, 0, 3, 7, 15, 31, 27, 26, 39, 47, 23, 31, 19, 45, 62, 62, 58, 60, 20, 30, 30, 63, 63, 63, 25, 63, 79, 143, 135, 131, 193, 112, 25, 62, 120, 252, 254, 254, 255, 127, 0, 128, 207, 215, 239, 239, 231, 193, 0, 128, 79, 95, 127, 63, 63, 255, 0, 0, 239, 56, 253, 255, 255, 255, 0, 0, 239, 255, 231, 227, 225, 255, 0, 0, 1, 227, 255, 255, 245, 255, 0, 0, 1, 227, 31, 31, 31, 255, 255, 129, 255, 255, 153, 153, 153, 153, 1, 127, 255, 17, 119, 119, 119, 119, 16, 16, 16, 16, 0, 0, 16, 0, 8, 8, 8, 8, 24, 0, 8, 24, 0, 0, 3, 4, 8, 17, 23, 23, 0, 0, 3, 7, 15, 31, 27, 26, 39, 47, 23, 31, 19, 45, 62, 62, 58, 60, 20, 30, 30, 63, 63, 63, 0, 0, 192, 32, 16, 240, 248, 248, 0, 0, 192, 224, 240, 240, 176, 24, 248, 248, 240, 224, 224, 208, 208, 80, 168, 8, 208, 32, 224, 112, 240, 240, 62, 30, 30, 30, 30, 62, 127, 127, 63, 31, 31, 31, 31, 39, 71, 3, 24, 28, 31, 20, 49, 195, 131, 3, 248, 252, 255, 255, 255, 254, 254, 255, };
        private readonly int[] _rutoEnd3 = { 232, 255, 126, 57, 95, 93, 95, 191, 0, 104, 49, 23, 53, 55, 55, 100, 151, 211, 189, 159, 219, 118, 47, 7, 106, 105, 99, 111, 111, 47, 7, 3, 5, 3, 7, 9, 21, 47, 79, 63, 3, 1, 3, 7, 15, 27, 54, 6, 15, 11, 11, 11, 15, 11, 22, 31, 6, 6, 6, 6, 2, 6, 15, 0, };
        private readonly int[] _rutoHead = { 0, 0, 0, 120, 116, 126, 56, 8, 0, 60, 126, 127, 47, 3, 14, 8, };
        private readonly int[] _rutoRaft = { 0, 0, 0, 0, 7, 32, 122, 253, 0, 0, 0, 0, 7, 32, 66, 129, 253, 253, 122, 32, 7, 0, 0, 0, 131, 129, 66, 32, 7, 0, 0, 0, 0, 0, 0, 32, 16, 20, 0, 131, 0, 0, 0, 32, 16, 20, 1, 131, 112, 131, 0, 20, 16, 32, 0, 0, 136, 131, 1, 20, 16, 32, 0, 0, };
        private readonly int[] _rutoBeam = { 0, 0, 0, 0, 0, 113, 216, 174, 0, 0, 0, 0, 0, 0, 32, 112, 183, 204, 116, 126, 16, 0, 0, 0, 120, 48, 8, 0, 0, 0, 0, 0, };
        private int _overworldXOff = 0x3F;
        private int _overworldMapOff = 0x7E;
        private int _overworldWorldOff = 0xBD;
        private Dictionary<int, int> _spellEnters;
        private Dictionary<int, int> _spellExits;
        public HashSet<string> _reachableAreas;
        private Dictionary<Spells, Spells> _spellMap;
        private List<Location> _itemLocs;
        private List<Location> _pbagHearts;
        public Dictionary<Location, List<Location>> _connections;
        public SortedDictionary<string, List<Location>> _areasByLocation;
        public Dictionary<Location, string> _section;
        private int _magContainers;
        private int _heartContainers;
        private int _startHearts;
        private int _maxHearts;
        private int _numHContainers;
        private int _kasutoJars;
        private readonly SortedDictionary<int, int> _palaceConnectionLocs = new SortedDictionary<int, int>
        {
            {1, 0x1072B},
            {2, 0x1072B},
            {3, 0x12208},
            {4, 0x12208},
            {5, 0x1072B},
            {6, 0x12208},
            {7, 0x1472B},
        };

        private readonly Dictionary<int, int> _palaceAddr = new Dictionary<int, int>
        {
            {1, 0x4663 },
            {2, 0x4664 },
            {3, 0x4665 },
            {4, 0xA140 },
            {5, 0x8663 },
            {6, 0x8664 },
            {7, 0x8665 }
        };

        public bool[] _itemGet;
        public bool[] _spellGet;
        public bool _hiddenPalace;
        public bool _hiddenKasuto;
        private readonly int _enemyAddr1 = 0x108B0;
        private readonly int _enemyAddr2 = 0x148B0;
        private readonly int _enemyPtr1 = 0x105B1;
        private readonly int _enemyPtr2 = 0x1208E;
        private readonly int _enemyPtr3 = 0x145B1;
        private readonly List<int> _enemies1 = new List<int> { 3, 4, 12, 17, 18, 24, 25, 26, 29, 0x1E, 0x1F, 0x23 };
        private readonly List<int> _flyingEnemies1 = new List<int> { 0x06, 0x07, 0x0E };
        private readonly List<int> _generators1 = new List<int> { 0x0B, 0x0F, 0x1B, 0x0A };
        private readonly List<int> _shorties1 = new List<int> { 0x03, 0x04, 0x11, 0x12 };
        private readonly List<int> _tallGuys1 = new List<int> { 0x0C, 0x18, 0x19, 0x1A, 0x1D, 0x1E, 0x1F, 0x23 };
        private readonly List<int> _enemies2 = new List<int> { 3, 4, 12, 17, 24, 25, 26, 29, 0x1F, 0x1E, 0x23 };
        private readonly List<int> _flyingEnemies2 = new List<int> { 0x06, 0x07, 0x0E };
        private readonly List<int> _generators2 = new List<int> { 0x1B };
        private readonly List<int> _shorties2 = new List<int> { 0x03, 0x04, 0x11 };
        private readonly List<int> _tallGuys2 = new List<int> { 0x0C, 0x18, 0x19, 0x1A, 0x1D, 0x1F, 0x1E, 0x23 };
        private readonly List<int> _enemies3 = new List<int> { 3, 4, 17, 18, 24, 25, 26, 0x1D };
        private readonly List<int> _flyingEnemies3 = new List<int> { 0x06, 0x14, 0x15, 0x17, 0x1E };
        private readonly List<int> _generators3 = new List<int> { 0x0B, 0x0C, 0x0F, 0x16 };
        private readonly List<int> _shorties3 = new List<int> { 0x03, 0x04, 0x11, 0x12 };
        private readonly List<int> _tallGuys3 = new List<int> { 0x18, 0x19, 0x1A, 0x1D };
        private List<int> _visitedEnemies;

        private WestHyrule _westHyrule;
        private EastHyrule _eastHyrule;
        private MazeIsland _mazeIsland;
        private DeathMountain _deathMountain;
        private RandomizerProperties _props;
        private List<World> _worlds;
        private List<Palace> _palaces;

        public Rom RomData { get; set; }

        public Random R { get; set; }

        public RandomizerProperties Props
        {
            get => _props;

            set => _props = value;
        }

        public Hyrule(RandomizerProperties p)
        {
            _props = p;

            R = new Random(_props.Seed);
            RomData = _props.InputFileStream != null ? new Rom(_props.InputFileStream) : new Rom(_props.FileName);

            _palaces = new List<Palace>();
            _itemGet = new bool[] { false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false };
            _spellGet = new bool[] { false, false, false, false, false, false, false, false, false, false };
            _reachableAreas = new HashSet<string>();
            _areasByLocation = new SortedDictionary<string, List<Location>>();

            UpdateRomData();
        }

        public string GenerateRom()
        {
            var newFileName = GenerateFileName();

            RomData.Dump(newFileName);

            return newFileName;
        }

        public (Stream OutputStream, string FileName) GenerateRomStream()
        {
            string newFileName = GenerateFileName();

            return (RomData.DumpStream(), newFileName);
        }

        private string GenerateFileName() => _props.FileName.Substring(0, _props.FileName.LastIndexOf("\\") + 1) + "Z2_" +
        _props.Seed + "_" + _props.Flags + ".nes";

        private void UpdateRomData()
        {
            //Hacky fix for palace connections
            RomData.Put(0x1074A, 0xFC);
            RomData.Put(0x1477D, 0xFC);

            //Hacky fix for new kasuto

            //NOTES:
            //Set 1DF77 to map number:
            //2D - fire town
            //2F - reflect town
            //31 - hidden town
            //33 - thunder town
            //Set 1DF79 to YPos of town

            RomData.Put(0x8660, 0x51);
            RomData.Put(0x924D, 0x00);

            //Hack fix for palace 6
            RomData.Put(0x8664, 0xE6);
            RomData.Put(0x935E, 0x02);

            if (_props.RandomizeNewKasutoJarRequirements)
            {
                _kasutoJars = R.Next(5, 8);
                RomData.Put(0xEEC9, (byte)(0xD0 + _kasutoJars));
                RomData.Put(0x1E7E8, (byte)_kasutoJars);
            }
            else
            {
                _kasutoJars = 7;
            }

            //text testing
            //Allows casting magic without requeueing a spell
            if (_props.FastSpellCasting)
            {
                RomData.Put(0xE15, 0xEA);
                RomData.Put(0xE16, 0xEA);
                RomData.Put(0xE17, 0xEA);
            }

            if (_props.DisableMusic)
            {
                for (int i = 0; i < 4; i++)
                {
                    RomData.Put(0x1a010 + i, 08);
                    RomData.Put(0x1a3da + i, 08);
                    RomData.Put(0x1a63f + i, 08);
                }

                RomData.Put(0x1a946, 08);
                RomData.Put(0x1a947, 08);
                RomData.Put(0x1a94c, 08);

                RomData.Put(0x1a02f, 0);
                RomData.Put(0x1a030, 0x44);
                RomData.Put(0x1a031, 0xA3);
                RomData.Put(0x1a032, 0);
                RomData.Put(0x1a033, 0);
                RomData.Put(0x1a034, 0);

                RomData.Put(0x1a3f4, 0);
                RomData.Put(0x1a3f5, 0x44);
                RomData.Put(0x1a3f6, 0xA3);
                RomData.Put(0x1a3f7, 0);
                RomData.Put(0x1a3f8, 0);
                RomData.Put(0x1a3f9, 0);

                RomData.Put(0x1a66e, 0);
                RomData.Put(0x1a66f, 0x44);
                RomData.Put(0x1a670, 0xA3);
                RomData.Put(0x1a671, 0);
                RomData.Put(0x1a672, 0);
                RomData.Put(0x1a673, 0);

                RomData.Put(0x1a970, 0);
                RomData.Put(0x1a971, 0x44);
                RomData.Put(0x1a972, 0xA3);
                RomData.Put(0x1a973, 0);
                RomData.Put(0x1a974, 0);
                RomData.Put(0x1a975, 0);
            }

            if (_props.HiddenPalace.Equals("Random"))
            {
                _hiddenPalace = R.NextDouble() > .5;
            }
            else
            {
                _hiddenPalace = _props.HiddenPalace.Equals("On");
            }

            if (_props.HiddenKasuto.Equals("Random"))
            {
                _hiddenKasuto = R.NextDouble() > .5;
            }
            else
            {
                _hiddenKasuto = _props.HiddenKasuto.Equals("On");
            }

            List<int> small = new List<int>();
            List<int> large = new List<int>();

            if (_props.RandomizeDrops)
            {
                while (small.Count() == 0)
                {
                    for (int i = 0; i < _drops.Length; i++)
                    {
                        if (R.NextDouble() > .5)
                        {
                            small.Add(_drops[i]);
                        }
                    }
                }

                while (large.Count == 0)
                {
                    for (int i = 0; i < _drops.Length; i++)
                    {
                        if (R.NextDouble() > .5)
                        {
                            large.Add(_drops[i]);
                        }
                    }
                }
            }

            if (_props.ManuallySelectDrops)
            {
                if (_props.SmallEnemyBlueJar)
                {
                    small.Add(0x90);
                }
                if (_props.SmallEnemyRedJar)
                {
                    small.Add(0x91);
                }
                if (_props.SmallEnemyFiftyPbag)
                {
                    small.Add(0x8a);
                }
                if (_props.SmallEnemyOneHundredPbag)
                {
                    small.Add(0x8b);
                }
                if (_props.SmallEnemyTwoHundredPbag)
                {
                    small.Add(0x8c);
                }
                if (_props.SmallEnemyFiveHundredPbag)
                {
                    small.Add(0x8d);
                }
                if (_props.SmallEnemyOneUp)
                {
                    small.Add(0x92);
                }
                if (_props.SmallEnemyKey)
                {
                    small.Add(0x88);
                }
                if (_props.LargeEnemyBlueJar)
                {
                    large.Add(0x90);
                }
                if (_props.LargeEnemyRedJar)
                {
                    large.Add(0x91);
                }
                if (_props.LargeEnemyFiftyPbag)
                {
                    large.Add(0x8a);
                }
                if (_props.LargeEnemyOneHundredPbag)
                {
                    large.Add(0x8b);
                }
                if (_props.LargeEnemyTwoHundredPbag)
                {
                    large.Add(0x8c);
                }
                if (_props.LargeEnemyFiveHundredPbag)
                {
                    large.Add(0x8d);
                }
                if (_props.LargeEnemyOneUp)
                {
                    large.Add(0x92);
                }
                if (_props.LargeEnemyKey)
                {
                    large.Add(0x88);
                }
            }

            if (_props.RandomizeDrops || _props.ManuallySelectDrops)
            {
                for (int i = 0; i < small.Count(); i++)
                {
                    int swap = R.Next(small.Count());
                    int temp = small[i];
                    small[i] = small[swap];
                    small[swap] = temp;
                }

                for (int i = 0; i < large.Count(); i++)
                {
                    int swap = R.Next(large.Count());
                    int temp = large[i];
                    large[i] = large[swap];
                    large[swap] = temp;
                }
                for (int i = 0; i < 8; i++)
                {
                    if (i < small.Count())
                    {
                        RomData.Put(0x1E880 + i, (byte)small[i]);
                    }
                    else
                    {
                        RomData.Put(0x1E880 + i, (byte)small[R.Next(small.Count())]);
                    }
                    if (i < large.Count())
                    {
                        RomData.Put(0x1E888 + i, (byte)large[i]);
                    }
                    else
                    {
                        RomData.Put(0x1E888 + i, (byte)large[R.Next(large.Count())]);
                    }
                }
            }

            //Fix for extra battle scene
            RomData.Put(0x8645, 0x00);

            //Disable hold over head animation
            RomData.Put(0x1E54C, 0);

            //Make text go fast
            RomData.Put(0xF75E, 0x00);
            RomData.Put(0xF625, 0x00);
            RomData.Put(0xF667, 0x00);

            //Fix for softlock
            //1E19A: 20AAFE
            //1FEBA: EE2607A2008E4C0760

            RomData.Put(0x1E19A, 0x20);
            RomData.Put(0x1E19B, 0xAA);
            RomData.Put(0x1E19C, 0xFE);

            RomData.Put(0x1FEBA, 0xEE);
            RomData.Put(0x1FEBB, 0x26);
            RomData.Put(0x1FEBC, 0x07);
            RomData.Put(0x1FEBD, 0xA2);
            RomData.Put(0x1FEBE, 0x00);
            RomData.Put(0x1FEBF, 0x8E);
            RomData.Put(0x1FEC0, 0x4C);
            RomData.Put(0x1FEC1, 0x07);
            RomData.Put(0x1FEC2, 0x60);

            /*
            Up + A:
        1cbba(cbaa): insert jump to d39a (1d3aa) (209ad3)

        1d3aa(d39a): store 707(8D0707) compare to 3(c903) less than 2 jump(3012) Load FB1 (ADb10f)compare with zero(c901) branch if zero(f00B) Load 561(AD6105) store accumulator into side memory(8Db00f) load accumulator with 1(a901) store to fb1(8db10f) return (60)

        d3bc(1d3cc): Load accumulator with fbo (adb00f)store to 561(8d6105) load 707(AD0707) return (60)

        feb3(1fec3): Store y into 707(8c0707) load 0(a900) stor into fb1(8db10f) return (60)

        CAD0(1CAE0): (20bcd3) c902 10

        CAE3(1CAF3): NOP NOP NOP(EAEAEA)

        CF92: (1CFA2): Jump to feb3(20b3fe)

            */
            if (_props.RestartAtPalacesIfGameOver)
            {
                RomData.Put(0x1cbba, 0x20);
                RomData.Put(0x1cbbb, 0x9a);
                RomData.Put(0x1cbbc, 0xd3);

                RomData.Put(0x1d3aa, 0x8d);
                RomData.Put(0x1d3ab, 0x07);
                RomData.Put(0x1d3ac, 0x07);
                RomData.Put(0x1d3ad, 0xad);
                RomData.Put(0x1d3ae, 0x07);
                RomData.Put(0x1d3af, 0x07);
                RomData.Put(0x1d3b0, 0xc9);
                RomData.Put(0x1d3b1, 0x03);
                RomData.Put(0x1d3b2, 0x30);
                RomData.Put(0x1d3b3, 0x12);
                RomData.Put(0x1d3b4, 0xad);
                RomData.Put(0x1d3b5, 0xb0);
                RomData.Put(0x1d3b6, 0x0f);
                RomData.Put(0x1d3b7, 0xc9);
                RomData.Put(0x1d3b8, 0x01);
                RomData.Put(0x1d3b9, 0xf0);
                RomData.Put(0x1d3ba, 0x0b);
                RomData.Put(0x1d3bb, 0xad);
                RomData.Put(0x1d3bc, 0x61);
                RomData.Put(0x1d3bd, 0x05);
                RomData.Put(0x1d3be, 0x8d);
                RomData.Put(0x1d3bf, 0xb1);
                RomData.Put(0x1d3c0, 0x0f);
                RomData.Put(0x1d3c1, 0xa9);
                RomData.Put(0x1d3c2, 0x01);
                RomData.Put(0x1d3c3, 0x8D);
                RomData.Put(0x1d3c4, 0xB0);
                RomData.Put(0x1d3c5, 0x0F);
                RomData.Put(0x1d3c6, 0xad);
                RomData.Put(0x1d3c7, 0x07);
                RomData.Put(0x1d3c8, 0x07);
                RomData.Put(0x1d3c9, 0x29);
                RomData.Put(0x1d3ca, 0x07);
                RomData.Put(0x1d3cb, 0x60);
                RomData.Put(0x1d3cc, 0xad);
                RomData.Put(0x1d3cd, 0xb1);
                RomData.Put(0x1d3ce, 0x0f);
                RomData.Put(0x1d3cf, 0x8d);
                RomData.Put(0x1d3d0, 0x61);
                RomData.Put(0x1d3d1, 0x05);
                RomData.Put(0x1d3d2, 0x20);
                RomData.Put(0x1d3d3, 0x57);
                RomData.Put(0x1d3d4, 0xa0);
                RomData.Put(0x1d3d5, 0xad);
                RomData.Put(0x1d3d6, 0x07);
                RomData.Put(0x1d3d7, 0x07);
                RomData.Put(0x1d3d8, 0x60);

                //feb3(1fec3): Store y into 707(8c0707) load 0(a900) stor into fb1(8db10f) return (60)
                RomData.Put(0x1fec3, 0x8c);
                RomData.Put(0x1fec4, 0x07);
                RomData.Put(0x1fec5, 0x07);
                RomData.Put(0x1fec6, 0xa9);
                RomData.Put(0x1fec7, 0x00);
                RomData.Put(0x1fec8, 0x8d);
                RomData.Put(0x1fec9, 0xb0);
                RomData.Put(0x1feca, 0x0f);
                RomData.Put(0x1fecb, 0x60);

                //CAD0(1CAE0): (20b7d3) c902 10
                RomData.Put(0x1cae0, 0x20);
                RomData.Put(0x1cae1, 0xbc);
                RomData.Put(0x1cae2, 0xd3);
                RomData.Put(0x1cae3, 0xc9);
                RomData.Put(0x1cae4, 0x03);
                RomData.Put(0x1cae5, 0x10);

                //CAE3(1CAF3): NOP NOP NOP(EAEAEA)
                RomData.Put(0x1caf3, 0xea);
                RomData.Put(0x1caf4, 0xea);
                RomData.Put(0x1caf5, 0xea);

                //CF92: (1CFA2): Jump to feb3(20b3fe)
                RomData.Put(0x1cfa2, 0x20);
                RomData.Put(0x1cfa3, 0xb3);
                RomData.Put(0x1cfa4, 0xfe);
            }

            if (_props.PermanentBeamSword)
            {
                RomData.Put(0x186c, 0xEA);
                RomData.Put(0x186d, 0xEA);
            }

            if (_props.StandardizeDrops)
            {
                RomData.Put(0x1e8bd, 0x20);
                RomData.Put(0x1e8be, 0x4c);
                RomData.Put(0x1e8bf, 0xff);

                RomData.Put(0x1ff5c, 0xc0);
                RomData.Put(0x1ff5d, 0x02);
                RomData.Put(0x1ff5e, 0xd0);
                RomData.Put(0x1ff5f, 0x07);
                RomData.Put(0x1ff60, 0xad);
                RomData.Put(0x1ff61, 0xfe);
                RomData.Put(0x1ff62, 0x06);
                RomData.Put(0x1ff63, 0xee);
                RomData.Put(0x1ff64, 0xfe);
                RomData.Put(0x1ff65, 0x06);
                RomData.Put(0x1ff66, 0x60);
                RomData.Put(0x1ff67, 0xad);
                RomData.Put(0x1ff68, 0xff);
                RomData.Put(0x1ff69, 0x06);
                RomData.Put(0x1ff6a, 0xee);
                RomData.Put(0x1ff6b, 0xff);
                RomData.Put(0x1ff6c, 0x06);
                RomData.Put(0x1ff6d, 0x60);
            }

            _spellEnters = new Dictionary<int, int>
            {
                {0, 0x90},
                {1, 0x94},
                {2, 0x98},
                {3, 0x9C},
                {4, 0xA0},
                {5, 0xA4},
                {6, 0x4D},
                {7, 0xAC},
                {8, 0xB0},
                {9, 0xB4}
            };

            _spellExits = new Dictionary<int, int>
            {
                {0, 0xC1},
                {1, 0xC5},
                {2, 0xC9},
                {3, 0xCD},
                {4, 0xD1},
                {5, 0xD5},
                {6, 0x6A},
                {7, 0xDD},
                {8, 0xE1},
                {9, 0xE5}
            };

            ShortenWizards();
            _magContainers = 4;
            _visitedEnemies = new List<int>();

            RandomizeStartingValues();
            RandomizeEnemies();
            LoadPalaces();
            ProcessOverworld();
            DumpText();

            UpdateRom();
        }



        /*
            Text Notes:
            
            Community Text Changes
            ----------------------
            Shield Spell    15  43
            Cannot Help     16  35
            Jump Spell      24  34
            Life Spell      35  37
            You know..?     37  42
            Fairy           46  37
            Downstab        47  38
            Bagu            48  44
            Fire            70  43
            You know        71  34
            Reflect         81  37
            Upstab          82  32
            Spell           93  25
            Thunder         96  36 
        */
        public static byte ReverseByte(byte b)
        {
            return (byte)(((b * 0x80200802ul) & 0x0884422110ul) * 0x0101010101ul >> 32);
        }

        private void DumpText()
        {
            int totalBytes = 0;
            int totalText = 0;
            List<List<char>> texts = new List<List<char>>();
            for (int i = 0xEFCE; i <= 0xF090; i += 2)
            {
                List<char> t = new List<char>();
                int addr = RomData.GetByte(i);
                addr += (RomData.GetByte(i + 1) << 8);
                addr += 0x4010;
                int c = RomData.GetByte(addr);
                int bytes = 0;
                while (c != 0xFF)
                {
                    if (c >= 0xD0 && c <= 0xD9)
                        _ = (char)(c - (0xd0 - '0'));
                    else if (c >= 0xDA && c <= 0xF3)
                        _ = (char)(c - (0xda - 'A'));
                    else if (c == 0xcf)
                        _ = '.';
                    else if (c == 0xce)
                        _ = '/';
                    else if (c == 0x9c)
                        _ = ',';
                    else if (c == 0x36)
                        _ = '!';
                    else if (c == 0x34)
                        _ = '?';
                    else if (c == 0x32)
                        _ = '*';
                    else if (c == 0xf4)
                        _ = ' ';
                    else if (c == 0xfd || c == 0xfe)
                        _ = '\n';

                    addr++;
                    t.Add((char)c);
                    c = RomData.GetByte(addr);
                    bytes++;
                }

                bytes++;
                t.Add((char)0xFF);
                texts.Add(t);
                totalBytes += bytes;
                totalText++;
            }

            if (_props.CommunityHints)
            {
                do
                {
                    for (int i = 0; i < 8; i++)
                    {
                        List<int> used = new List<int>();
                        int thisone = R.Next(_wizardTexts.Count());
                        while (used.Contains(thisone))
                        {
                            thisone = R.Next(_wizardTexts.Count());
                        }
                        List<char> c2 = ToGameText(_wizardTexts[thisone]).ToList();
                        c2.Add((char)0xFF);
                        texts[_wizardindex[i]] = c2;
                        used.Add(thisone);
                    }

                    List<char> c3 = ToGameText(_bagutext[R.Next(_bagutext.Length)]).ToList();
                    c3.Add((char)0xFF);
                    texts[48] = c3;

                    c3 = ToGameText(_bridgetext[R.Next(_bridgetext.Length)]).ToList();
                    c3.Add((char)0xFF);
                    texts[37] = c3;

                    c3 = ToGameText(_downstabtext[R.Next(_downstabtext.Length)]).ToList();
                    c3.Add((char)0xFF);
                    texts[47] = c3;

                    c3 = ToGameText(_upstabtext[R.Next(_upstabtext.Length)]).ToList();
                    c3.Add((char)0xFF);
                    texts[82] = c3;
                } while (TextLength(texts) > 3134);
            }
            LoadItemLocs();


            if ((_props.HintType.Equals("Spell Item") || _props.HintType.Equals("Spell + Helpful")))
            {
                int i = 0;
                while (i < _itemLocs.Count() && _itemLocs[i]._item != Items.Trophy)
                {
                    i++;
                }
                if (i < _itemLocs.Count())
                {
                    texts[_trophyIndex] = CreateHint(_itemLocs[i], Items.Trophy);
                }

                i = 0;
                while (i < _itemLocs.Count() && _itemLocs[i]._item != Items.Medicine)
                {
                    i++;
                }
                if (i < _itemLocs.Count())
                {
                    texts[_medIndex] = CreateHint(_itemLocs[i], Items.Medicine);
                }

                i = 0;
                while (i < _itemLocs.Count() && _itemLocs[i]._item != Items.Kid)
                {
                    i++;
                }
                if (i < _itemLocs.Count())
                {
                    texts[_kidIndex] = CreateHint(_itemLocs[i], Items.Kid);
                }
            }

            List<Items> it = new List<Items>();
            List<Items> placedItems = new List<Items>();
            List<int> placedIndex = new List<int>();

            for (int i = 0; i < _itemLocs.Count(); i++)
            {
                it.Add(_itemLocs[i]._item);
            }

            if (_props.HintType.Equals("Spell + Helpful"))
            {
                it.Remove(Items.Trophy);
                it.Remove(Items.Kid);
                it.Remove(Items.Medicine);
            }

            if (_props.HintType.Equals("Helpful") || _props.HintType.Equals("Spell + Helpful"))
            {
                bool placedSmall = false;
                List<Items> smallItems = new List<Items> { Items.Bluejar, Items.Fivehundobag, Items.Key, Items.Hundobag, Items.Magiccontainer, Items.Heartcontainer, Items.Oneup, Items.Redjar, Items.Smallbag, Items.Twohundobag };
                List<int> placedTowns = new List<int>();

                for (int i = 0; i < 4; i++)
                {
                    Items doThis = it[R.Next(it.Count())];
                    while ((placedSmall && smallItems.Contains(doThis)) || placedItems.Contains(doThis))
                    {
                        doThis = it[R.Next(it.Count())];
                    }
                    int j = 0;
                    while (_itemLocs[j]._item != doThis)
                    {
                        j++;
                    }
                    List<char> hint = CreateHint(_itemLocs[j], doThis);
                    int town = R.Next(9);
                    while (placedTowns.Contains(town))
                    {
                        town = R.Next(9);
                    }

                    if (town == 0)
                    {
                        int index = _rauruHints[R.Next(_rauruHints.Count())];
                        texts[index] = hint;
                        placedIndex.Add(index);
                    }
                    else if (town == 1)
                    {
                        int index = _rutoHints[R.Next(_rutoHints.Count())];
                        if (index == 25 || index == 26)
                        {
                            texts[25] = hint;
                            texts[26] = hint;
                            placedIndex.Add(25);
                            placedIndex.Add(26);
                        }
                        else
                        {
                            texts[index] = hint;
                            placedIndex.Add(index);
                        }

                    }
                    else if (town == 2)
                    {
                        int index = _midoHints[R.Next(_midoHints.Count())];
                        texts[index] = hint;
                        placedIndex.Add(index);
                    }
                    else if (town == 3)
                    {
                        int index = _sariaHints[R.Next(_sariaHints.Count())];
                        texts[index] = hint;
                        placedIndex.Add(index);
                    }
                    else if (town == 4)
                    {
                        int index = _nabooruHints[R.Next(_nabooruHints.Count())];
                        texts[index] = hint;
                        placedIndex.Add(index);
                    }
                    else if (town == 5)
                    {
                        int index = _daruniaHints[R.Next(_daruniaHints.Count())];
                        texts[index] = hint;
                        placedIndex.Add(index);
                    }
                    else if (town == 6)
                    {
                        int index = _newkasutoHints[R.Next(_newkasutoHints.Count())];
                        texts[index] = hint;
                        placedIndex.Add(index);
                    }
                    else if (town == 7)
                    {
                        texts[_oldkasutoHint] = hint;
                        placedIndex.Add(_oldkasutoHint);
                    }
                    else if (town == 8)
                    {
                        texts[_kingsTomb] = hint;
                        placedIndex.Add(_kingsTomb);
                    }

                    placedTowns.Add(town);
                    placedItems.Add(doThis);
                    if (smallItems.Contains(doThis))
                    {
                        placedSmall = true;
                    }
                }
            }

            if (_props.HintType.Equals("Spell") || _props.HintType.Equals("Helpful") || _props.HintType.Equals("Spell + Helpful"))
            {
                List<int> stationary = new List<int>();
                stationary.AddRange(_rauruHints.ToList());
                stationary.AddRange(_rutoHints.ToList());
                stationary.AddRange(_sariaHints.ToList());
                stationary.AddRange(_midoHints.ToList());
                stationary.AddRange(_nabooruHints.ToList());
                stationary.AddRange(_daruniaHints.ToList());
                stationary.AddRange(_newkasutoHints.ToList());
                stationary.Add(_kingsTomb);
                stationary.Add(_oldkasutoHint);

                List<int> moving = new List<int>();
                moving.AddRange(_rauruMoving.ToList());
                moving.AddRange(_rutoMoving.ToList());
                moving.AddRange(_sariaMoving.ToList());
                moving.AddRange(_movingMido.ToList());
                moving.AddRange(_movingNabooru.ToList());
                moving.AddRange(_daruniaMoving.ToList());
                moving.AddRange(_newkasutoMoving.ToList());

                List<char> knowNothing = ToGameText("i know$nothing").ToList();
                knowNothing.Add((char)0xFF);
                for (int i = 0; i < stationary.Count(); i++)
                {
                    if (!placedIndex.Contains(stationary[i]))
                    {
                        texts[stationary[i]] = knowNothing;
                    }
                }

                for (int i = 0; i < moving.Count(); i++)
                {
                    texts[moving[i]] = knowNothing;
                }


            }

            if (_props.CommunityHints || _props.HintType.Equals("Spell") || _props.HintType.Equals("Helpful") || _props.HintType.Equals("Spell + Helpful"))
            {
                TextToRom(texts);
            }
        }

        private List<char> CreateHint(Location location, Items item)
        {
            string hint = "";
            if (location.PalNum == 1)
            {
                hint += "horsehead$neighs$with the$";
            }
            else if (location.PalNum == 2)
            {
                hint += "helmethead$guards the$";
            }
            else if (location.PalNum == 3)
            {
                hint += "rebonack$rides$with the$";
            }
            else if (location.PalNum == 4)
            {
                hint += "carock$disappears$with the$";
            }
            else if (location.PalNum == 5)
            {
                hint += "gooma sits$on the$";
            }
            else if (location.PalNum == 6)
            {
                hint += "barba$slithers$with the$";
            }
            else if (_eastHyrule.AllLocations.Contains(location))
            {
                hint += "go east to$find the$";
            }
            else if (_westHyrule.AllLocations.Contains(location))
            {
                hint += "go west to$find the$";
            }
            else if (_deathMountain.AllLocations.Contains(location))
            {
                hint += "death$mountain$holds the$";
            }
            else if (location == _eastHyrule._newKasuto || location == _eastHyrule._newKasuto2)
            {
                hint += "go east to$find the$";
            }
            else
            {
                hint += "in a maze$lies the$";
            }

            if (item == Items.Bluejar)
            {
                hint += "blue jar";
            }
            else if (item == Items.Boots)
            {
                hint += "boots";
            }
            else if (item == Items.Candle)
            {
                hint += "candle";
            }
            else if (item == Items.Cross)
            {
                hint += "cross";
            }
            else if (item == Items.Fivehundobag)
            {
                hint += "500 bag";
            }
            else if (item == Items.Glove)
            {
                hint += "glove";
            }
            else if (item == Items.Hammer)
            {
                hint += "hammer";
            }
            else if (item == Items.Heartcontainer)
            {
                hint += "heart";
            }
            else if (item == Items.Horn)
            {
                hint += "flute";
            }
            else if (item == Items.Hundobag)
            {
                hint += "100 bag";
            }
            else if (item == Items.Key)
            {
                hint += "small key";
            }
            else if (item == Items.Kid)
            {
                hint += "child";
            }
            else if (item == Items.Magiccontainer)
            {
                hint += "magic jar";
            }
            else if (item == Items.Magickey)
            {
                hint += "magic key";
            }
            else if (item == Items.Medicine)
            {
                hint += "medicine";
            }
            else if (item == Items.Oneup)
            {
                hint += "link doll";
            }
            else if (item == Items.Raft)
            {
                hint += "raft";
            }
            else if (item == Items.Redjar)
            {
                hint += "red jar";
            }
            else if (item == Items.Smallbag)
            {
                hint += "50 bag";
            }
            else if (item == Items.Trophy)
            {
                hint += "trophy";
            }
            else if (item == Items.Twohundobag)
            {
                hint += "200 bag";
            }

            List<char> result = ToGameText(hint).ToList();
            result.Add((char)0xFF);
            return result;
        }

        private void TextToRom(List<List<char>> texts)
        {
            int textptr = 0xE390;
            int ptr = 0xE390 - 0x4010;
            int ptrptr = 0xEFCE;

            for (int i = 0; i < texts.Count; i++)
            {
                int high = (ptr & 0xff00) >> 8;
                int low = (ptr & 0xff);
                RomData.Put(ptrptr, (byte)low);
                RomData.Put(ptrptr + 1, (byte)high);
                ptrptr += 2;
                for (int j = 0; j < texts[i].Count; j++)
                {
                    RomData.Put(textptr, (byte)texts[i][j]);
                    textptr++;
                    ptr++;
                }
            }
        }

        private int TextLength(List<List<char>> texts)
        {
            int sum = 0;
            for (int i = 0; i < texts.Count(); i++)
            {
                sum += texts[i].Count;
            }
            return sum;
        }

        private void ShuffleAttackEffectiveness(bool ohko)
        {
            if (!ohko)
            {
                int[] atk = new int[8];
                for (int i = 0; i < 8; i++)
                {
                    atk[i] = RomData.GetByte(0x1E67D + i);
                }

                for (int i = 0; i < atk.Length; i++)
                {
                    int minAtk = (int)(atk[i] - atk[i] * .5);
                    int maxAtk = (int)(atk[i] + atk[i] * .5);
                    int next = atk[i];

                    if (_props.RandomAttackEffectiveness)
                    {
                        next = R.Next(minAtk, maxAtk);
                    }
                    else if (_props.HighAttackEffectiveness)
                    {
                        next = (int)(atk[i] + (atk[i] * .4));
                    }
                    else if (_props.LowAttackEffectiveness)
                    {
                        next = (int)(atk[i] * .5);
                    }

                    if (_props.RandomAttackEffectiveness)
                    {
                        if (i == 0)
                        {
                            atk[i] = Math.Max(next, 2);
                        }
                        else
                        {
                            if (next < atk[i - 1])
                            {
                                atk[i] = atk[i - 1];
                            }
                        }
                    }
                    else
                    {
                        atk[i] = next;
                    }
                }


                for (int i = 0; i < 8; i++)
                {
                    RomData.Put(0x1E67D + i, (byte)atk[i]);
                }
            }
            else
            {
                for (int i = 0; i < 8; i++)
                {
                    RomData.Put(0x1E67D + i, 192);
                }
            }
        }

        private void ShuffleItems()
        {
            _ = new List<Items> { Items.Candle, Items.Glove, Items.Raft, Items.Boots, Items.Horn, Items.Cross, Items.Heartcontainer, Items.Heartcontainer, Items.Magiccontainer, Items.Medicine, Items.Trophy, Items.Heartcontainer, Items.Heartcontainer, Items.Magiccontainer, Items.Magickey, Items.Magiccontainer, Items.Hammer, Items.Kid, Items.Magiccontainer };
            _ = new List<Items> { Items.Bluejar, Items.Redjar, Items.Smallbag, Items.Hundobag, Items.Twohundobag, Items.Fivehundobag, Items.Oneup, Items.Key };
            _ = _mazeIsland._kid;
            _ = _westHyrule._medicineCave;
            _ = _westHyrule._trophyCave;
            _numHContainers = _maxHearts - _startHearts;
            for (int i = 0; i < _itemGet.Count(); i++)
            {
                _itemGet[i] = false;
            }
            foreach (Location l in _itemLocs)
            {
                l._itemGet = false;
            }
            _westHyrule._pbagCave._itemGet = false;
            _eastHyrule._pbagCave1._itemGet = false;
            _eastHyrule._pbagCave2._itemGet = false;
            if (_props.ShuffleStartingItems)
            {
                for (int i = 0; i < 8; i++)
                {
                    bool hasItem = R.NextDouble() > .75;
                    RomData.Put(0x17B01 + i, hasItem ? (byte)1 : (byte)0);
                    _itemGet[i] = hasItem;
                }
            }
            else
            {
                RomData.Put(0x17B01, _props.StartWithCandle ? (byte)1 : (byte)0);
                _itemGet[(int)Items.Candle] = _props.StartWithCandle;
                RomData.Put(0x17B02, _props.StartWithGlove ? (byte)1 : (byte)0);
                _itemGet[(int)Items.Glove] = _props.StartWithGlove;
                RomData.Put(0x17B03, _props.StartWithRaft ? (byte)1 : (byte)0);
                _itemGet[(int)Items.Raft] = _props.StartWithRaft;
                RomData.Put(0x17B04, _props.StartWithBoots ? (byte)1 : (byte)0);
                _itemGet[(int)Items.Boots] = _props.StartWithBoots;
                RomData.Put(0x17B05, _props.StartWithFlute ? (byte)1 : (byte)0);
                _itemGet[(int)Items.Horn] = _props.StartWithFlute;
                RomData.Put(0x17B06, _props.StartWithCross ? (byte)1 : (byte)0);
                _itemGet[(int)Items.Cross] = _props.StartWithCross;
                RomData.Put(0x17B07, _props.StartWithHammer ? (byte)1 : (byte)0);
                _itemGet[(int)Items.Hammer] = _props.StartWithHammer;
                RomData.Put(0x17B08, _props.StartWithKey ? (byte)1 : (byte)0);
                _itemGet[(int)Items.Magickey] = _props.StartWithKey;
            }

            List<Items> itemList = new List<Items> { Items.Candle, Items.Glove, Items.Raft, Items.Boots, Items.Horn, Items.Cross, Items.Heartcontainer, Items.Heartcontainer, Items.Magiccontainer, Items.Medicine, Items.Trophy, Items.Heartcontainer, Items.Heartcontainer, Items.Magiccontainer, Items.Magickey, Items.Magiccontainer, Items.Hammer, Items.Kid, Items.Magiccontainer };

            if (_props.IncludePbagCavesInItemShuffle)
            {
                _westHyrule._pbagCave._item = (Items)RomData.GetByte(0x4FE2);
                _eastHyrule._pbagCave1._item = (Items)RomData.GetByte(0x8ECC);
                _eastHyrule._pbagCave2._item = (Items)RomData.GetByte(0x8FB3);
                itemList.Add(_westHyrule._pbagCave._item);
                itemList.Add(_eastHyrule._pbagCave1._item);
                itemList.Add(_eastHyrule._pbagCave2._item);

            }
            _pbagHearts = new List<Location>();
            if (_numHContainers < 4)
            {
                int x = 4 - _numHContainers;
                while (x > 0)
                {
                    int remove = R.Next(itemList.Count);
                    if (itemList[remove] == Items.Heartcontainer)
                    {
                        itemList[remove] = Items.Fivehundobag;
                        x--;
                    }
                }
            }

            if (_numHContainers > 4)
            {
                if (_props.IncludePbagCavesInItemShuffle)
                {
                    int x = _numHContainers - 4;
                    while (x > 0)
                    {
                        itemList[22 - x] = Items.Heartcontainer;
                        x--;
                    }
                }
                else
                {
                    int x = _numHContainers - 4;
                    while (x > 0)
                    {
                        int y = R.Next(3);
                        if (y == 0 && !_pbagHearts.Contains(_westHyrule._pbagCave))
                        {
                            _pbagHearts.Add(_westHyrule._pbagCave);
                            _westHyrule._pbagCave._item = Items.Heartcontainer;
                            itemList.Add(Items.Heartcontainer);
                            _itemLocs.Add(_westHyrule._pbagCave);
                            x--;
                        }
                        if (y == 1 && !_pbagHearts.Contains(_eastHyrule._pbagCave1))
                        {
                            _pbagHearts.Add(_eastHyrule._pbagCave1);
                            _eastHyrule._pbagCave1._item = Items.Heartcontainer;
                            itemList.Add(Items.Heartcontainer);
                            _itemLocs.Add(_eastHyrule._pbagCave1);
                            x--;
                        }
                        if (y == 2 && !_pbagHearts.Contains(_eastHyrule._pbagCave2))
                        {
                            _pbagHearts.Add(_eastHyrule._pbagCave2);
                            _eastHyrule._pbagCave2._item = Items.Heartcontainer;
                            itemList.Add(Items.Heartcontainer);
                            _itemLocs.Add(_eastHyrule._pbagCave2);
                            x--;
                        }
                    }
                }
            }

            if (_props.RemoveSpellItems)
            {
                itemList[9] = Items.Fivehundobag;
                itemList[10] = Items.Fivehundobag;
                itemList[17] = Items.Fivehundobag;
                _itemGet[(int)Items.Trophy] = true;
                _itemGet[(int)Items.Medicine] = true;
                _itemGet[(int)Items.Kid] = true;

            }

            if (_spellGet[(int)_spellMap[Spells.Fairy]])
            {
                itemList[9] = Items.Fivehundobag;
                _itemGet[(int)Items.Medicine] = true;
            }

            if (_spellGet[(int)_spellMap[Spells.Jump]])
            {
                itemList[10] = Items.Fivehundobag;
                _itemGet[(int)Items.Trophy] = true;
            }

            if (_spellGet[(int)_spellMap[Spells.Reflect]])
            {
                itemList[17] = Items.Fivehundobag;
                _itemGet[(int)Items.Kid] = true;
            }

            if (_itemGet[0])
            {
                itemList[0] = Items.Fivehundobag;
            }

            if (_itemGet[1])
            {
                itemList[1] = Items.Fivehundobag;
            }

            if (_itemGet[2])
            {
                itemList[2] = Items.Fivehundobag;
            }

            if (_itemGet[3])
            {
                itemList[3] = Items.Fivehundobag;
            }

            if (_itemGet[4])
            {
                itemList[4] = Items.Fivehundobag;
            }

            if (_itemGet[5])
            {
                itemList[5] = Items.Fivehundobag;
            }

            if (_itemGet[7])
            {
                itemList[14] = Items.Fivehundobag;
            }

            if (_itemGet[6])
            {
                itemList[16] = Items.Fivehundobag;
            }


            if (_props.MixOverworldAndPalaceItems)
            {
                for (int i = 0; i < itemList.Count; i++)
                {

                    int s = R.Next(i, itemList.Count);
                    Items sl = itemList[s];
                    itemList[s] = itemList[i];
                    itemList[i] = sl;
                }
            }
            else
            {
                if (_props.ShufflePalaceItems)
                {
                    for (int i = 0; i < 6; i++)
                    {
                        int s = R.Next(i, 6);
                        Items sl = itemList[s];
                        itemList[s] = itemList[i];
                        itemList[i] = sl;
                    }
                }

                if (_props.ShuffleOverworldItems)
                {
                    for (int i = 6; i < itemList.Count; i++)
                    {
                        int s = R.Next(i, itemList.Count);
                        Items sl = itemList[s];
                        itemList[s] = itemList[i];
                        itemList[i] = sl;
                    }
                }
            }
            for (int i = 0; i < itemList.Count; i++)
            {
                _itemLocs[i]._item = itemList[i];
            }
            foreach (Location l in _itemLocs)
            {
                if (l._item == Items.Kid)
                {
                    Location kidLoc = l;
                }
                else if (l._item == Items.Trophy)
                {
                    Location trophyLoc = l;
                }
                else if (l._item == Items.Medicine)
                {
                    Location medicineLoc = l;
                }
            }

            for (int i = 0; i < 64; i++)
            {
                byte heartByte = RomData.GetByte(0x27810 + i);
                RomData.Put(0x29810 + i, heartByte);
                RomData.Put(0x2B810 + i, heartByte);
                RomData.Put(0x2D810 + i, heartByte);
                RomData.Put(0x33810 + i, heartByte);
                RomData.Put(0x35810 + i, heartByte);
                RomData.Put(0x37810 + i, heartByte);
                RomData.Put(0x39810 + i, heartByte);
            }
        }

        private bool EverythingReachable2()
        {
            int dm = 0;
            int mi = 0;
            int wh = 0;
            int eh = 0;
            int count = 1;
            int prevCount = 0;
            _magContainers = 4;
            _heartContainers = _startHearts;
            _ = _westHyrule.AllLocations.Count + _eastHyrule.AllLocations.Count + _deathMountain.AllLocations.Count + _mazeIsland.AllLocations.Count;
            while (prevCount != count)
            {
                prevCount = count;
                _westHyrule.UpdateVisit();
                if (CanGet(_westHyrule._hammerEnter))
                {
                    _deathMountain.SetStart();
                }

                if (CanGet(_westHyrule._hammerExit))
                {
                    _deathMountain.SetStart2();
                }

                if (CanGet(_westHyrule._raftSpot) && _itemGet[(int)Items.Raft])
                {
                    _eastHyrule.SetStart();
                }

                _deathMountain.UpdateVisit();
                _eastHyrule.UpdateVisit();
                if (CanGet(_eastHyrule._palace4))
                {
                    _mazeIsland.SetStart();
                }
                _mazeIsland.UpdateVisit();

                UpdateItems();
                UpdateSpells();

                count = 0;
                dm = 0;
                mi = 0;
                wh = 0;
                eh = 0;

                foreach (Location l in _westHyrule.AllLocations)
                {
                    if (l.Reachable)
                    {
                        count++;
                        wh++;
                    }
                }

                foreach (Location l in _eastHyrule.AllLocations)
                {
                    if (l.Reachable)
                    {
                        count++;
                        eh++;
                    }
                }

                foreach (Location l in _deathMountain.AllLocations)
                {
                    if (l.Reachable)
                    {
                        count++;
                        dm++;
                    }
                }

                foreach (Location l in _mazeIsland.AllLocations)
                {
                    if (l.Reachable)
                    {
                        count++;
                        mi++;
                    }
                }
            }

            Console.WriteLine("Reached: " + count);
            Console.WriteLine("wh: " + wh);
            Console.WriteLine("eh: " + eh);
            Console.WriteLine("dm: " + dm);
            Console.WriteLine("mi: " + mi);

            for (int i = 0; i < 8; i++)
            {
                if (_itemGet[i] == false)
                {
                    return false;
                }
            }

            for (int i = 19; i < 22; i++)
            {
                if (_itemGet[i] == false)
                {
                    return false;
                }
            }
            if (_magContainers != 8)
            {
                return false;
            }
            if (_heartContainers != _maxHearts)
            {
                return false;
            }
            for (int i = 0; i < _spellGet.Count(); i++)
            {
                if (!_spellGet[i])
                {
                    return false;
                }
            }

            return (CanGet(_westHyrule._palaceOne) && CanGet(_westHyrule._palaceTwo) && CanGet(_westHyrule._palaceThree) && CanGet(_mazeIsland._palace4) && CanGet(_eastHyrule._palace5) && CanGet(_eastHyrule._palace6) && CanGet(_eastHyrule._gp) && CanGet(_itemLocs));
        }

        private bool CanGet(List<Location> l)
        {
            foreach (Location ls in l)
            {
                if (ls.Reachable == false)
                {
                    return false;
                }
            }
            return true;
        }
        private bool CanGet(Location l)
        {

            return l.Reachable;
        }

        private void ShortenWizards()
        {
            /*
            Spell swap notes:
            Shield exit: 0xC7BB, 0xC1; enter: 0xC7EC, 0x90 //change map 48 pointer to map 40 pointer
        Jump exit: 0xC7BF, 0xC5; enter: 0xC7F0, 0x94 //change map 49 pointer to map 41 pointer
        Life exit: 0xC7C3, 0xC9; enter 0xC7F4, 0x98 //change map 50 pointer to map 42 pointer
        Fairy exit: 0xC7C7, 0xCD; enter 0xC7F8, 0x9C //change map 51 pointer to map 43 pointer
        Fire exit: 0xC7Cb, 0xD1; enter 0xC7FC, 0xA0 //change map 52 pointer to map 44 pointer
        Reflect exit: 0xC7Cf, 0xD5; enter 0xC800, 0xA4 //change map 53 pointer to map 45 pointer
        Spell exit: 0xC7D3, 0x6A; enter 0xC795, 0xC796, 0x4D //new kasuto item?
        Thunder exit: 0xC7D7, 0xDD; enter 0xC808, 0xAC
        Downstab exit: 0xC7DB, 0xE1; enter 0xC80C, 0xB0
        Upstab exit: 0xC7DF, 0xE5; enter 0xC810, 0xB4
    */
            for (int i = 0; i < 16; i += 2)
            {
                RomData.Put(0xC611 + i, 0x75);
                RomData.Put(0xC611 + i + 1, 0x70);
                RomData.Put(0xC593 + i, 0x48);
                RomData.Put(0xC593 + i + 1, 0x9B);
            }
            RomData.Put(0xC7BB, 0x07);
            RomData.Put(0xC7BF, 0x13);
            RomData.Put(0xC7C3, 0x21);
            RomData.Put(0xC7C7, 0x27);
            RomData.Put(0xC7CB, 0x37);
            RomData.Put(0xC7CF, 0x3F);
            RomData.Put(0xC7D7, 0x5E);
        }

        private void UpdateSpells()
        {
            Location[] t = new Location[11];
            t[_westHyrule._shieldTown.TownNum] = _westHyrule._shieldTown;
            t[_westHyrule._jump.TownNum] = _westHyrule._jump;
            t[_westHyrule._lifeNorth.TownNum] = _westHyrule._lifeNorth;
            t[_westHyrule._lifeSouth.TownNum] = _westHyrule._lifeSouth;
            t[_westHyrule._fairy.TownNum] = _westHyrule._fairy;
            t[_eastHyrule._fireTown.TownNum] = _eastHyrule._fireTown;
            t[_eastHyrule._darunia.TownNum] = _eastHyrule._darunia;
            t[_eastHyrule._newKasuto.TownNum] = _eastHyrule._newKasuto;
            t[_eastHyrule._newKasuto2.TownNum] = _eastHyrule._newKasuto2;
            t[_eastHyrule._oldKasuto.TownNum] = _eastHyrule._oldKasuto;

            foreach (Spells s in _spellMap.Keys)
            {
                if (s == Spells.Fairy && (_itemGet[(int)Items.Medicine] || _props.RemoveSpellItems) && CanGet(t[5]) && (_magContainers >= 4 || _props.DisableMagicContainerRequirements))
                {
                    _spellGet[(int)_spellMap[s]] = true;
                }
                else if (s == Spells.Jump && (_itemGet[(int)Items.Trophy] || _props.RemoveSpellItems) && CanGet(t[2]) && (_magContainers >= 2 || _props.DisableMagicContainerRequirements))
                {
                    _spellGet[(int)_spellMap[s]] = true;
                }
                else if (s == Spells.Downstab && (_spellGet[(int)Spells.Jump] || _spellGet[(int)Spells.Fairy]) && CanGet(t[5]))
                {
                    _spellGet[(int)_spellMap[s]] = true;
                }
                else if (s == Spells.Upstab && (_spellGet[(int)Spells.Jump]) && CanGet(t[7]))
                {
                    _spellGet[(int)_spellMap[s]] = true;
                }
                else if (s == Spells.Life && (CanGet(t[3])) && (_magContainers >= 3 || _props.DisableMagicContainerRequirements))
                {
                    _spellGet[(int)_spellMap[s]] = true;
                }
                else if (s == Spells.Shield && CanGet(t[1]) && (_magContainers >= 1 || _props.DisableMagicContainerRequirements))
                {
                    _spellGet[(int)_spellMap[s]] = true;
                }
                else if (s == Spells.Reflect && CanGet(t[7]) && (_itemGet[(int)Items.Kid] || _props.RemoveSpellItems) && (_magContainers >= 6 || _props.DisableMagicContainerRequirements))
                {
                    _spellGet[(int)_spellMap[s]] = true;
                }
                else if (s == Spells.Fire && CanGet(t[6]) && (_magContainers >= 5 || _props.DisableMagicContainerRequirements))
                {
                    _spellGet[(int)_spellMap[s]] = true;
                }
                else if (s == Spells.Spell && CanGet(t[8]) && (_magContainers >= 7 || _props.DisableMagicContainerRequirements))
                {
                    _spellGet[(int)_spellMap[s]] = true;
                }
                else if (s == Spells.Thunder && CanGet(t[10]) && (_magContainers >= 8 || _props.DisableMagicContainerRequirements))
                {
                    _spellGet[(int)_spellMap[s]] = true;
                }
            }
        }

        private void UpdateItems()
        {
            foreach (Location l in _itemLocs)
            {
                bool itemGotten = l._itemGet;
                if (l.PalNum > 0 && l.PalNum < 7)
                {
                    Palace p = _palaces[l.PalNum - 1];
                    l._itemGet = _itemGet[(int)l._item] = CanGet(l) && (_spellGet[(int)Spells.Fairy] || _itemGet[(int)Items.Magickey]) && (!p.NeedDstab || (p.NeedDstab && _spellGet[(int)Spells.Downstab])) && (!p.NeedFairy || (p.NeedFairy && _spellGet[(int)Spells.Fairy])) && (!p.NeedGlove || (p.NeedGlove && _itemGet[(int)Items.Glove])) && (!p.NeedJumpOrFairy || (p.NeedJumpOrFairy && (_spellGet[(int)Spells.Jump]) || _spellGet[(int)Spells.Fairy]) && (l.PalNum != 6 || (_hiddenPalace && _itemGet[(int)Items.Horn]) || (!_hiddenPalace)));
                }

                else if (l.TownNum == 8)
                {
                    l._itemGet = _itemGet[(int)l._item] = CanGet(l) && (_magContainers >= _kasutoJars) && (!l.NeedHammer || _itemGet[(int)Items.Hammer]);
                }
                else if (l.TownNum == 9)
                {
                    l._itemGet = _itemGet[(int)l._item] = (CanGet(l) && _spellGet[(int)Spells.Spell]) && (!l.NeedHammer || _itemGet[(int)Items.Hammer]);
                }
                else
                {
                    l._itemGet = _itemGet[(int)l._item] = CanGet(l);
                }
                if (itemGotten != l._itemGet && l._item == Items.Magiccontainer)
                {
                    _magContainers++;
                }
                if (itemGotten != l._itemGet && l._item == Items.Heartcontainer)
                {
                    _heartContainers++;
                }
            }
        }
        private void ShuffleLifeEffectiveness(bool isMag)
        {
            int numBanks = 7;
            int start = 0x1E2BF;
            if (isMag)
            {
                numBanks = 8;
                start = 0xD8B;
            }
            int[,] life = new int[numBanks, 8];
            for (int i = 0; i < numBanks; i++)
            {
                for (int j = 0; j < 8; j++)
                {
                    int lifeVal = RomData.GetByte(start + (i * 8) + j);
                    int highPart = (lifeVal & 0xF0) >> 4;
                    int lowPart = lifeVal & 0x0F;
                    life[i, j] = highPart * 8 + lowPart / 2;
                }
            }

            for (int j = 0; j < 8; j++)
            {
                for (int i = 0; i < numBanks; i++)
                {
                    int nextVal = life[i, j];
                    if ((_props.RandomLifeEffectiveness && !isMag) || (_props.RandomMagicEffectiveness && isMag))
                    {
                        int max = (int)(life[i, j] + life[i, j] * .5);
                        int min = (int)(life[i, j] - life[i, j] * .5);
                        if (j == 0)
                        {
                            nextVal = R.Next(min, Math.Min(max, 120));
                        }
                        else
                        {
                            nextVal = R.Next(min, Math.Min(max, 120));
                            if (nextVal > life[i, j - 1])
                            {
                                nextVal = life[i, j - 1];
                            }
                        }
                    }
                    else if (_props.MagicEffectiveness && isMag)
                    {
                        nextVal = (int)(life[i, j] + (life[i, j] * .5));
                    }
                    else if (_props.HighLifeEffectiveness && !isMag || _props.LowMagicEffectiveness && isMag)
                    {
                        nextVal = (int)(life[i, j] * .5);
                    }

                    if (isMag && nextVal > 120)
                    {
                        nextVal = 120;
                    }
                    life[i, j] = nextVal;
                }
            }

            for (int i = 0; i < numBanks; i++)
            {
                for (int j = 0; j < 8; j++)
                {
                    int highPart = (life[i, j] / 8) << 4;
                    int lowPart = (life[i, j] % 8);
                    RomData.Put(start + (i * 8) + j, (byte)(highPart + (lowPart * 2)));
                }
            }
        }

        private void RandomizeEnemies()
        {
            if (_props.ShuffleEnemyHp)
            {
                ShuffleHp(0x5434, 0x5453);
                ShuffleHp(0x9434, 0x944E);
                ShuffleHp(0x11435, 0x11435);
                ShuffleHp(0x11437, 0x11454);
                ShuffleHp(0x13C86, 0x13C87);
                ShuffleHp(0x15534, 0x15438);
                ShuffleHp(0x15540, 0x15443);
                ShuffleHp(0x15545, 0x1544B);
                ShuffleHp(0x1544E, 0x1544E);
                ShuffleHp(0x12935, 0x12935);
                ShuffleHp(0x12937, 0x12954);
            }

            if (_props.OhkoAttackEffectiveness)
            {
                ShuffleAttackEffectiveness(true);
                RomData.Put(0x005432, 193);
                RomData.Put(0x009432, 193);
                RomData.Put(0x11436, 193);
                RomData.Put(0x12936, 193);
                RomData.Put(0x15532, 193);
                RomData.Put(0x11437, 192);
                RomData.Put(0x1143F, 192);
                RomData.Put(0x12937, 192);
                RomData.Put(0x1293F, 192);
                RomData.Put(0x15445, 192);
                RomData.Put(0x15446, 192);
                RomData.Put(0x15448, 192);
                RomData.Put(0x15453, 193);
                RomData.Put(0x12951, 227);

            }
        }

        private void ShuffleHp(int start, int end)
        {
            for (int i = start; i <= end; i++)
            {
                int newVal = 0;
                int val = RomData.GetByte(i);

                newVal = R.Next((int)(val * 0.5), (int)(val * 1.5));
                if (newVal > 255)
                {
                    newVal = 255;
                }

                RomData.Put(i, (byte)newVal);
            }
        }

        private void ProcessOverworld()
        {
            if (_props.ShuffleSmallItems)
            {
                ShuffleSmallItems(1, true);
                ShuffleSmallItems(1, false);
                ShuffleSmallItems(2, true);
                ShuffleSmallItems(2, false);
                ShuffleSmallItems(3, true);
            }

            bool f = false;
            do
            {
                _worlds = new List<World>();
                _westHyrule = new WestHyrule(this);
                do
                {
                    f = _westHyrule.Terraform();
                } while (!f);

                _deathMountain = new DeathMountain(this);
                do
                {
                    f = _deathMountain.Terraform();
                } while (!f);
                _eastHyrule = new EastHyrule(this);
                do
                {
                    f = _eastHyrule.Terraform();
                } while (!f);
                _mazeIsland = new MazeIsland(this);
                _mazeIsland.Terraform();
                LoadItemLocs();
                ShuffleSpells();
                ShuffleItems();
                ShufflePalaces();
                LoadItemLocs();
                ShuffleTowns();

                int x = 0;
                while (!EverythingReachable2() && x < 50)
                {

                    foreach (Location l in _westHyrule.AllLocations)
                    {
                        l.Reachable = false;
                    }

                    foreach (Location l in _eastHyrule.AllLocations)
                    {
                        l.Reachable = false;
                    }

                    foreach (Location l in _mazeIsland.AllLocations)
                    {
                        l.Reachable = false;
                    }

                    foreach (Location l in _deathMountain.AllLocations)
                    {
                        l.Reachable = false;
                    }
                    _eastHyrule._newKasuto2.Reachable = false;
                    _eastHyrule._palace4.Reachable = false;
                    _westHyrule.Reset();
                    _eastHyrule.Reset();
                    _mazeIsland.Reset();
                    LoadItemLocs();
                    _deathMountain.Reset();
                    _westHyrule.SetStart();
                    ShuffleSpells();
                    ShuffleItems();
                    ShufflePalaces();
                    LoadItemLocs();

                    x++;
                }
                int west = 0;
                if (x != 50)
                {
                    break;
                }
                foreach (Location l in _westHyrule.AllLocations)
                {
                    if (l.Reachable)
                    {
                        west++;
                    }
                }

                int east = 0;
                foreach (Location l in _eastHyrule.AllLocations)
                {
                    if (l.Reachable)
                    {
                        east++;
                    }
                }

                int maze = 0;
                foreach (Location l in _mazeIsland.AllLocations)
                {
                    if (l.Reachable)
                    {
                        maze++;
                    }
                }

                int dm = 0;
                foreach (Location l in _deathMountain.AllLocations)
                {
                    if (l.Reachable)
                    {
                        dm++;
                    }
                }

                Console.WriteLine("wr: " + west);
                Console.WriteLine("er: " + east);
                Console.WriteLine("dm: " + dm);
                Console.WriteLine("maze: " + maze);
            } while (!EverythingReachable2());

            _worlds.Add(_westHyrule);
            _worlds.Add(_eastHyrule);
            _worlds.Add(_deathMountain);
            _worlds.Add(_mazeIsland);

            if (_props.ShuffleOverworldEnemies)
            {
                foreach (World w in _worlds)
                {
                    w.ShuffleE();
                }
            }
        }

        private void ShuffleTowns()
        {
            _westHyrule._shieldTown.TownNum = 1;
            _westHyrule._jump.TownNum = 2;
            _westHyrule._lifeNorth.TownNum = 3;
            _westHyrule._lifeSouth.TownNum = 4;
            _westHyrule._fairy.TownNum = 5;
            _eastHyrule._fireTown.TownNum = 6;
            _eastHyrule._darunia.TownNum = 7;
            _eastHyrule._newKasuto.TownNum = 8;
            _eastHyrule._newKasuto2.TownNum = 9;
            _eastHyrule._oldKasuto.TownNum = 10;
        }

        private void ShufflePalaces()
        {

            if (_props.AllowPalacesToSwapContinents)
            {

                List<Location> pals = new List<Location> { _westHyrule._palaceOne, _westHyrule._palaceTwo, _westHyrule._palaceThree, _mazeIsland._palace4, _eastHyrule._palace5, _eastHyrule._palace6 };

                if (_props.IncludeGreatPalaceInShuffle)
                {
                    pals.Add(_eastHyrule._gp);
                }

                for (int i = 0; i < pals.Count; i++)
                {
                    int swapp = R.Next(i, pals.Count);
                    Swap(pals[i], pals[swapp]);
                }

                _westHyrule._palaceOne.World &= 0xFC;
                _westHyrule._palaceTwo.World &= 0xFC;
                _westHyrule._palaceThree.World &= 0xFC;

                _mazeIsland._palace4.World &= 0xFC;
                _mazeIsland._palace4.World |= 0x01;

                _eastHyrule._palace5.World &= 0xFC;
                _eastHyrule._palace5.World |= 0x02;

                _eastHyrule._palace6.World &= 0xFC;
                _eastHyrule._palace6.World |= 0x02;

                if (_props.IncludeGreatPalaceInShuffle)
                {
                    _eastHyrule._gp.World &= 0xFC;
                    _eastHyrule._gp.World |= 0x02;
                }

                /*
                subroutine start bf60(13f70)

                instruction: 20 60 bf

                subroutine:
                    load 22 into accumulator    A9 22
                    xor with $561               4D 61 05
                    return                      60


                Gooma / helmet head fix (CHECK THESE):
                    13c96 = d0--hitbox / exp / hp
                    13d88 = d0--sprite info
                    13ad6 = d0--behavior
                    11b2d = d0(don't need?)
                    */

                //write subroutine
                RomData.Put(0x13f70, 0xA9);
                RomData.Put(0x13f71, 0x22);
                RomData.Put(0x13f72, 0x4D);
                RomData.Put(0x13f73, 0x61);
                RomData.Put(0x13f74, 0x05);
                RomData.Put(0x13f75, 0x60);

                //jump to subroutine
                RomData.Put(0x13c93, 0x20);
                RomData.Put(0x13c94, 0x60);
                RomData.Put(0x13c95, 0xBF);

                RomData.Put(0x13d85, 0x20);
                RomData.Put(0x13d86, 0x60);
                RomData.Put(0x13d87, 0xBF);

                RomData.Put(0x13ad3, 0x20);
                RomData.Put(0x13ad4, 0x60);
                RomData.Put(0x13ad5, 0xBF);

                //fix for key glitch
                RomData.Put(0x11b37, 0xea);
                RomData.Put(0x11b38, 0xea);
                RomData.Put(0x11b39, 0xea);
            }

        }

        private void Swap(Location p1, Location p2)
        {
            int tempw = p1.World;
            p1.World = p2.World;
            p2.World = tempw;

            tempw = p1.Map;
            p1.Map = p2.Map;
            p2.Map = tempw;

            tempw = p1.PalNum;
            p1.PalNum = p2.PalNum;
            p2.PalNum = tempw;

            tempw = p1.TownNum;
            p1.TownNum = p2.TownNum;
            p2.TownNum = tempw;

            Items i = p1._item;
            p1._item = p2._item;
            p2._item = i;
        }

        private void LoadItemLocs()
        {
            _itemLocs = new List<Location>();
            if (_westHyrule._palaceOne.PalNum != 7)
            {
                _itemLocs.Add(_westHyrule._palaceOne);
            }
            if (_westHyrule._palaceTwo.PalNum != 7)
            {
                _itemLocs.Add(_westHyrule._palaceTwo);
            }
            if (_westHyrule._palaceThree.PalNum != 7)
            {
                _itemLocs.Add(_westHyrule._palaceThree);
            }
            if (_mazeIsland._palace4.PalNum != 7)
            {
                _itemLocs.Add(_mazeIsland._palace4);
            }
            if (_eastHyrule._palace5.PalNum != 7)
            {
                _itemLocs.Add(_eastHyrule._palace5);
            }
            if (_eastHyrule._palace6.PalNum != 7)
            {
                _itemLocs.Add(_eastHyrule._palace6);
            }
            if (_eastHyrule._gp.PalNum != 7)
            {
                _itemLocs.Add(_eastHyrule._gp);
            }
            _itemLocs.Add(_westHyrule._heartOne);
            _itemLocs.Add(_westHyrule._heartTwo);
            _itemLocs.Add(_westHyrule._jar);
            _itemLocs.Add(_westHyrule._medicineCave);
            _itemLocs.Add(_westHyrule._trophyCave);
            _itemLocs.Add(_eastHyrule._heart1);
            _itemLocs.Add(_eastHyrule._heart2);
            _itemLocs.Add(_eastHyrule._newKasuto);
            _itemLocs.Add(_eastHyrule._newKasuto2);
            _itemLocs.Add(_deathMountain._magicCave);
            _itemLocs.Add(_deathMountain._hammerCave);
            _itemLocs.Add(_mazeIsland._kid);
            _itemLocs.Add(_mazeIsland._magic);


            if (_props.IncludePbagCavesInItemShuffle)
            {
                _itemLocs.Add(_westHyrule._pbagCave);
                _itemLocs.Add(_eastHyrule._pbagCave1);
                _itemLocs.Add(_eastHyrule._pbagCave2);
            }
        }

        private void ShuffleSpells()
        {
            _spellMap = new Dictionary<Spells, Spells>();
            List<int> shuffleThis = new List<int> { 0, 1, 2, 3, 4, 5, 6, 7 };
            for (int i = 0; i < _spellGet.Count(); i++)
            {
                _spellGet[i] = false;
            }
            if (_props.ShuffleSpellLocations)
            {
                for (int i = 0; i < shuffleThis.Count; i++)
                {

                    int s = R.Next(i, shuffleThis.Count);
                    int sl = shuffleThis[s];
                    shuffleThis[s] = shuffleThis[i];
                    shuffleThis[i] = sl;
                }
            }
            for (int i = 0; i < shuffleThis.Count; i++)
            {
                _spellMap.Add((Spells)i, (Spells)shuffleThis[i]);
            }
            _spellMap.Add(Spells.Upstab, Spells.Upstab);
            _spellMap.Add(Spells.Downstab, Spells.Downstab);

            if (_props.ShuffleStartingSpells)
            {
                for (int i = 0; i < 8; i++)
                {
                    bool hasSpell = R.NextDouble() > .75;
                    RomData.Put(0x17AF7 + i, hasSpell ? (byte)1 : (byte)0);
                    _spellGet[(int)_spellMap[(Spells)i]] = hasSpell;
                }
            }
            else
            {
                RomData.Put(0x17AF7 + _spellMap.Values.ToList().IndexOf(Spells.Shield), _props.StartWithShield ? (byte)1 : (byte)0);
                _spellGet[(int)Spells.Shield] = _props.StartWithShield;
                RomData.Put(0x17AF7 + _spellMap.Values.ToList().IndexOf(Spells.Jump), _props.StartWithJump ? (byte)1 : (byte)0);
                _spellGet[(int)Spells.Jump] = _props.StartWithJump;
                RomData.Put(0x17AF7 + _spellMap.Values.ToList().IndexOf(Spells.Life), _props.StartWithLife ? (byte)1 : (byte)0);
                _spellGet[(int)Spells.Life] = _props.StartWithLife;
                RomData.Put(0x17AF7 + _spellMap.Values.ToList().IndexOf(Spells.Fairy), _props.StartWithFairy ? (byte)1 : (byte)0);
                _spellGet[(int)Spells.Fairy] = _props.StartWithFairy;
                RomData.Put(0x17AF7 + _spellMap.Values.ToList().IndexOf(Spells.Fire), _props.StartWithFire ? (byte)1 : (byte)0);
                _spellGet[(int)Spells.Fire] = _props.StartWithFire;
                RomData.Put(0x17AF7 + _spellMap.Values.ToList().IndexOf(Spells.Reflect), _props.StartWithReflect ? (byte)1 : (byte)0);
                _spellGet[(int)Spells.Reflect] = _props.StartWithReflect;
                RomData.Put(0x17AF7 + _spellMap.Values.ToList().IndexOf(Spells.Spell), _props.StartWithSpell ? (byte)1 : (byte)0);
                _spellGet[(int)Spells.Spell] = _props.StartWithSpell;
                RomData.Put(0x17AF7 + _spellMap.Values.ToList().IndexOf(Spells.Thunder), _props.StartWithThunder ? (byte)1 : (byte)0);
                _spellGet[(int)Spells.Thunder] = _props.StartWithThunder;
            }

            if (_props.CombineFireWithRandomSpell)
            {
                int newFire = R.Next(7);
                if (newFire > 3)
                {
                    newFire++;
                }
                byte newnewFire = (byte)(0x10 | RomData.GetByte(0xDCB + newFire));
                RomData.Put(0xDCF, newnewFire);
            }
        }

        private void ShuffleExp(int start)
        {
            int[] exp = new int[8];

            for (int i = 0; i < exp.Length; i++)
            {
                exp[i] = RomData.GetByte(start + i) * 256;
                exp[i] = exp[i] + RomData.GetByte(start + 24 + i);
            }

            for (int i = 0; i < exp.Length; i++)
            {
                int nextMin = (int)(exp[i] - exp[i] * 0.25);
                int nextMax = (int)(exp[i] + exp[i] * 0.25);
                if (i == 0)
                {
                    exp[i] = R.Next(Math.Max(10, nextMin), nextMax);
                }
                else
                {
                    exp[i] = R.Next(Math.Max(exp[i - 1], nextMin), Math.Min(nextMax, 9990));
                }
            }

            for (int i = 0; i < exp.Length; i++)
            {
                exp[i] = exp[i] / 10 * 10;
            }

            for (int i = 0; i < exp.Length; i++)
            {
                RomData.Put(start + i, (byte)(exp[i] / 256));
                RomData.Put(start + 24 + i, (byte)(exp[i] % 256));
            }

            for (int i = 0; i < exp.Length; i++)
            {

                RomData.Put(start + 2057 + i, IntToText(exp[i] / 1000));
                exp[i] = exp[i] - ((exp[i] / 1000) * 1000);
                RomData.Put(start + 2033 + i, IntToText(exp[i] / 100));
                exp[i] = exp[i] - ((exp[i] / 100) * 100);
                RomData.Put(start + 2009 + i, IntToText(exp[i] / 10));
            }
        }

        private void ShuffleBits(List<int> addr, bool fire)
        {
            int mask = 0x10;
            int notMask = 0xEF;
            if (fire)
            {
                mask = 0x20;
                notMask = 0xDF;
            }

            double count = 0;
            foreach (int i in addr)
            {
                if ((RomData.GetByte(i) & mask) > 0)
                {
                    count++;
                }
            }

            double fraction = count / addr.Count;

            foreach (int i in addr)
            {
                int part1 = 0;
                int part2 = RomData.GetByte(i) & notMask;
                bool havethis = R.NextDouble() <= fraction;
                if (havethis)
                {
                    part1 = mask;
                }
                RomData.Put(i, (byte)(part1 + part2));
            }
        }

        private void ShuffleEnemyExp(List<int> addr)
        {
            foreach (int i in addr)
            {
                byte exp = RomData.GetByte(i);
                int high = exp & 0xF0;
                int low = exp & 0x0F;

                low = R.Next(low - 2, low + 3);
                if (low < 0)
                {
                    low = 0;
                }
                else if (low > 15)
                {
                    low = 15;
                }
                RomData.Put(i, (byte)(high + low));
            }
        }

        private void ShuffleEncounters(List<int> addr)
        {
            for (int i = 0; i < addr.Count; i++)
            {
                int swap = R.Next(i, addr.Count);
                byte temp = RomData.GetByte(addr[i]);
                RomData.Put(addr[i], RomData.GetByte(addr[swap]));
                RomData.Put(addr[swap], temp);
            }
        }
        private void RandomizeStartingValues()
        {
            if (_props.RemoveSpellItems)
            {
                RomData.Put(0xF584, 0xA9);
                RomData.Put(0xF585, 0x01);
                RomData.Put(0xF586, 0xEA);
            }
            UpdateSprites();

            Dictionary<string, int> colorMap = new Dictionary<string, int> { { "Green", 0x2A }, { "Dark Green", 0x0A }, { "Aqua", 0x3C }, { "Dark Blue", 0x02 }, { "Purple", 0x04 }, { "Pink", 0x24 }, { "Red", 0x16 }, { "Orange", 0x27 }, { "Turd", 0x18 } };

            /*colors to include
                Green (2A)
                Dark Green (0A)
                Aqua (3C)
                Dark Blue (02)
                Purple (04)
                Pink (24)
                Red (16)
                Orange (27)
                Turd (08)
            */
            int c2 = 0;
            int c1 = 0;

            if (_props.TunicColor.Equals("Default"))
            {
                if (_props.CharacterSprite.Equals("Link"))
                {
                    c2 = colorMap["Green"];
                }
                else if (_props.CharacterSprite.Equals("Iron Knuckle"))
                {
                    c2 = colorMap["Dark Blue"];
                }
                else if (_props.CharacterSprite.Equals("Error"))
                {
                    c2 = 0x13;
                }
                else if (_props.CharacterSprite.Equals("Samus"))
                {
                    c2 = 0x27;
                }
                else if (_props.CharacterSprite.Equals("Simon"))
                {
                    c2 = 0x27;
                }
                else if (_props.CharacterSprite.Equals("Stalfos"))
                {
                    c2 = colorMap["Red"];
                }
                else if (_props.CharacterSprite.Equals("Vase Lady"))
                {
                    c2 = 0x13;
                }
                else if (_props.CharacterSprite.Equals("Ruto"))
                {
                    c2 = 0x30;
                }
            }
            else if (!_props.TunicColor.Equals("Random"))
            {
                c2 = colorMap[_props.TunicColor];
            }

            if (_props.ShieldTunicColor.Equals("Default"))
            {
                if (_props.CharacterSprite.Equals("Link"))
                {
                    c1 = colorMap["Red"];
                }
                else if (_props.CharacterSprite.Equals("Iron Knuckle"))
                {
                    c1 = colorMap["Red"];
                }
                else if (_props.CharacterSprite.Equals("Error"))
                {
                    c1 = colorMap["Red"];
                }
                else if (_props.CharacterSprite.Equals("Samus"))
                {
                    c1 = 0x37;
                }
                else if (_props.CharacterSprite.Equals("Simon"))
                {
                    c1 = 0x16;
                }
                else if (_props.CharacterSprite.Equals("Stalfos"))
                {
                    c1 = colorMap["Dark Blue"];
                }
                else if (_props.CharacterSprite.Equals("Vase Lady"))
                {
                    c1 = colorMap["Red"];
                }
                else if (_props.CharacterSprite.Equals("Ruto"))
                {
                    c1 = 0x3c;
                }

            }
            else if (!_props.ShieldTunicColor.Equals("Random"))
            {
                c1 = colorMap[_props.ShieldTunicColor];
            }
            if (_props.TunicColor.Equals("Random"))
            {
                Random r2 = new Random();

                int c2P1 = r2.Next(3);
                int c2P2 = r2.Next(1, 13);
                c2 = c2P1 * 16 + c2P2;

                while (c1 == c2)
                {
                    c2P1 = r2.Next(3);
                    c2P2 = r2.Next(1, 13);
                    c2 = c2P1 * 16 + c2P2;
                }
            }

            if (_props.ShieldTunicColor.Equals("Random"))
            {
                Random r2 = new Random();

                int c1P1 = r2.Next(3);
                int c1P2 = r2.Next(1, 13);

                c1 = c1P1 * 16 + c1P2;

                while (c1 == c2)
                {
                    c1P1 = r2.Next(3);
                    c1P2 = r2.Next(1, 13);
                    c1 = c1P1 * 16 + c1P2;
                }
            }

            int[] tunicLocs = { 0x285C, 0x40b1, 0x40c1, 0x40d1, 0x80e1, 0x80b1, 0x80c1, 0x80d1, 0x80e1, 0xc0b1, 0xc0c1, 0xc0d1, 0xc0e1, 0x100b1, 0x100c1, 0x100d1, 0x100e1, 0x140b1, 0x140c1, 0x140d1, 0x140e1, 0x17c1b, 0x1c466, 0x1c47e };

            foreach (int l in tunicLocs)
            {
                RomData.Put(0x10ea, (byte)c2);
                if (_props.CharacterSprite.Equals("Iron Knuckle"))
                {
                    RomData.Put(0x10ea, 0x30);
                    RomData.Put(0x2a0a, 0x0D);
                    RomData.Put(0x2a10, (byte)c2);
                    RomData.Put(l, 0x20);
                    RomData.Put(l - 1, (byte)c2);
                    RomData.Put(l - 2, 0x0D);
                }
                else if (_props.CharacterSprite.Equals("Samus"))
                {
                    RomData.Put(0x2a0a, 0x16);
                    RomData.Put(0x2a10, 0x1a);
                    RomData.Put(l, (byte)c2);
                    RomData.Put(l - 1, 0x1a);
                    RomData.Put(l - 2, 0x16);
                }
                else if (_props.CharacterSprite.Equals("Error") || _props.CharacterSprite.Equals("Vase Lady"))
                {
                    RomData.Put(0x2a0a, 0x0F);
                    RomData.Put(l, (byte)c2);
                    RomData.Put(l - 2, 0x0F);
                }
                else if (_props.CharacterSprite.Equals("Simon"))
                {
                    RomData.Put(0x2a0a, 0x07);
                    RomData.Put(0x2a10, 0x37);
                    RomData.Put(l, (byte)c2);
                    RomData.Put(l - 1, 0x37);
                    RomData.Put(l - 2, 0x07);
                }
                else if (_props.CharacterSprite.Equals("Stalfos"))
                {
                    RomData.Put(0x2a0a, 0x08);
                    RomData.Put(0x2a10, 0x20);
                    RomData.Put(l, (byte)c2);
                    RomData.Put(l - 1, 0x20);
                    RomData.Put(l - 2, 0x08);
                }
                else if (_props.CharacterSprite.Equals("Ruto"))
                {
                    RomData.Put(0x2a0a, 0x0c);
                    RomData.Put(0x2a10, 0x1c);
                    RomData.Put(l, (byte)c2);
                    RomData.Put(l - 1, 0x1c);
                    RomData.Put(l - 2, 0x0c);
                }
                else
                {
                    RomData.Put(0x10ea, (byte)c2);
                    RomData.Put(l, (byte)c2);
                }
            }

            RomData.Put(0xe9e, (byte)c1);



            int beamType = -1;
            if (_props.BeamSprite.Equals("Random"))
            {

                Random r2 = new Random();
                beamType = r2.Next(6);
            }
            else if (_props.BeamSprite.Equals("Fire"))
            {
                beamType = 0;
            }
            else if (_props.BeamSprite.Equals("Bubble"))
            {
                beamType = 1;
            }
            else if (_props.BeamSprite.Equals("Rock"))
            {
                beamType = 2;
            }
            else if (_props.BeamSprite.Equals("Axe"))
            {
                beamType = 3;
            }
            else if (_props.BeamSprite.Equals("Hammer"))
            {
                beamType = 4;
            }
            else if (_props.BeamSprite.Equals("Wizzrobe Beam"))
            {
                beamType = 5;
            }
            byte[] newSprite = new byte[32];

            if (beamType == 0 || beamType == 3 || beamType == 4)
            {
                RomData.Put(0x18f5, 0xa9);
                RomData.Put(0x18f6, 0x00);
                RomData.Put(0x18f7, 0xea);
            }
            else if (beamType != -1)
            {
                RomData.Put(0X18FB, 0x84);
            }

            if (beamType == 1)//bubbles
            {
                for (int i = 0; i < 32; i++)
                {
                    byte next = RomData.GetByte(0x20ab0 + i);
                    newSprite[i] = next;
                }
            }

            if (beamType == 2)//rocks
            {
                for (int i = 0; i < 32; i++)
                {
                    byte next = RomData.GetByte(0x22af0 + i);
                    newSprite[i] = next;
                }
            }

            if (beamType == 3)//axes
            {
                for (int i = 0; i < 32; i++)
                {
                    byte next = RomData.GetByte(0x22fb0 + i);
                    newSprite[i] = next;
                }
            }

            if (beamType == 4)//hammers
            {
                for (int i = 0; i < 32; i++)
                {
                    byte next = RomData.GetByte(0x32ef0 + i);
                    newSprite[i] = next;
                }
            }

            if (beamType == 5)//wizzrobe beam
            {
                for (int i = 0; i < 32; i++)
                {
                    byte next = RomData.GetByte(0x34dd0 + i);
                    newSprite[i] = next;
                }
            }


            if (beamType != 0 && beamType != -1)
            {
                foreach (int loc in _fireLocs)
                {
                    for (int i = 0; i < 32; i++)
                    {
                        RomData.Put(loc + i, newSprite[i]);
                    }
                }
            }


            if (_props.DisableLowHealthBeep)
            {
                RomData.Put(0x1D4E4, 0xEA);
                RomData.Put(0x1D4E5, 0x38);
            }
            if (_props.ShuffleLifeRefill)
            {
                int lifeRefill = R.Next(1, 6);
                RomData.Put(0xE7A, (byte)(lifeRefill * 16));
            }

            if (_props.ShuffleAmountExpStolen)
            {
                int small = RomData.GetByte(0x1E30E);
                int big = RomData.GetByte(0x1E314);
                small = R.Next((int)(small - small * .5), (int)(small + small * .5) + 1);
                big = R.Next((int)(big - big * .5), (int)(big + big * .5) + 1);
                RomData.Put(0x1E30E, (byte)small);
                RomData.Put(0x1E314, (byte)big);
            }

            List<int> addr = new List<int>();
            for (int i = 0x54E8; i < 0x54ED; i++)
            {
                addr.Add(i);
            }
            for (int i = 0x54EF; i < 0x54F8; i++)
            {
                addr.Add(i);
            }
            for (int i = 0x54F9; i < 0x5508; i++)
            {
                addr.Add(i);
            }

            if (_props.ShuffleWhichEnemiesStealExp)
            {
                ShuffleBits(addr, false);
            }

            if (_props.ShuffleSwordImmunity)
            {
                ShuffleBits(addr, true);
            }

            if (_props.ShuffleEnemyExp)
            {
                ShuffleEnemyExp(addr);
            }
            addr = new List<int>();
            for (int i = 0x94E8; i < 0x94ED; i++)
            {
                addr.Add(i);
            }
            for (int i = 0x94EF; i < 0x94F8; i++)
            {
                addr.Add(i);
            }
            for (int i = 0x94F9; i < 0x9502; i++)
            {
                addr.Add(i);
            }
            if (_props.ShuffleWhichEnemiesStealExp)
            {
                ShuffleBits(addr, false);
            }

            if (_props.ShuffleSwordImmunity)
            {
                ShuffleBits(addr, true);
            }
            if (_props.ShuffleEnemyExp)
            {
                ShuffleEnemyExp(addr);
            }

            addr = new List<int>();
            for (int i = 0x114E8; i < 0x114EA; i++)
            {
                addr.Add(i);
            }
            for (int i = 0x114EB; i < 0x114ED; i++)
            {
                addr.Add(i);
            }
            for (int i = 0x114EF; i < 0x114F8; i++)
            {
                addr.Add(i);
            }
            for (int i = 0x114FD; i < 0x11505; i++)
            {
                addr.Add(i);
            }
            addr.Add(0x11508);

            if (_props.ShuffleWhichEnemiesStealExp)
            {
                ShuffleBits(addr, false);
            }

            if (_props.ShuffleSwordImmunity)
            {
                ShuffleBits(addr, true);
            }
            if (_props.ShuffleEnemyExp)
            {
                ShuffleEnemyExp(addr);
            }

            addr = new List<int>();
            for (int i = 0x129E8; i < 0x129EA; i++)
            {
                addr.Add(i);
            }

            for (int i = 0x129EB; i < 0x129ED; i++)
            {
                addr.Add(i);
            }

            for (int i = 0x129EF; i < 0x129F4; i++)
            {
                addr.Add(i);
            }

            for (int i = 0x129F5; i < 0x129F7; i++)
            {
                addr.Add(i);
            }

            for (int i = 0x129FD; i < 0x12A05; i++)
            {
                addr.Add(i);
            }

            addr.Add(0x12A08);

            if (_props.ShuffleWhichEnemiesStealExp)
            {
                ShuffleBits(addr, false);
            }

            if (_props.ShuffleSwordImmunity)
            {
                ShuffleBits(addr, true);
            }
            if (_props.ShuffleEnemyExp)
            {
                ShuffleEnemyExp(addr);
            }

            addr = new List<int>();
            for (int i = 0x154E9; i < 0x154ED; i++)
            {
                addr.Add(i);
            }

            for (int i = 0x154F2; i < 0x154F8; i++)
            {
                addr.Add(i);
            }

            for (int i = 0x154F9; i < 0x15500; i++)
            {
                addr.Add(i);
            }

            for (int i = 0x15502; i < 15504; i++)
            {
                addr.Add(i);
            }

            if (_props.ShuffleWhichEnemiesStealExp)
            {
                ShuffleBits(addr, false);
            }

            if (_props.ShuffleSwordImmunity)
            {
                ShuffleBits(addr, true);
            }
            if (_props.ShuffleEnemyExp)
            {
                ShuffleEnemyExp(addr);
            }

            if (_props.ShuffleBossExp)
            {
                addr = new List<int>
                {
                    0x11505,
                    0x13C88,
                    0x13C89,
                    0x12A05,
                    0x12A06,
                    0x12A07,
                    0x15507
                };
                ShuffleEnemyExp(addr);
            }

            if (_props.ShuffleEncounters)
            {
                addr = new List<int>
                {
                    0x441b,
                    0x4419,
                    0x441D,
                    0x4420,
                    0x441C,
                    0x441A,
                    0x4422,
                    0x441E
                };

                if (_props.AllowUnsafePathEncounters)
                {
                    addr.Add(0x4424);
                    addr.Add(0x4423);
                }

                ShuffleEncounters(addr);

                addr = new List<int>
                {
                    0x841B,
                    0x8419,
                    0x841D,
                    0x8422,
                    0x8420,
                    0x841A,
                    0x841E,
                    0x8426
                };

                if (_props.AllowUnsafePathEncounters)
                {
                    addr.Add(0x8423);
                    addr.Add(0x8424);
                }

                ShuffleEncounters(addr);
            }

            if (_props.JumpAlwaysOn)
            {
                RomData.Put(0x1482, RomData.GetByte(0x1480));
                RomData.Put(0x1483, RomData.GetByte(0x1481));
                RomData.Put(0x1486, RomData.GetByte(0x1484));
                RomData.Put(0x1487, RomData.GetByte(0x1485));

            }

            if (_props.DisableMagicContainerRequirements)
            {
                RomData.Put(0xF539, 0xC9);
                RomData.Put(0xF53A, 0);
            }

            if (_props.ShuffleAllExperienceNeeded)
            {
                ShuffleExp(0x1669);//atk
                ShuffleExp(0x1671);//mag
                ShuffleExp(0x1679);//life
            }
            else
            {
                if (_props.ShuffleAttackExperienceNeeded)
                {
                    ShuffleExp(0x1669);
                }

                if (_props.ShuffleMagicExperienceNeeded)
                {
                    ShuffleExp(0x1671);
                }

                if (_props.ShuffleLifeExperienceNeeded)
                {
                    ShuffleExp(0x1679);
                }
            }

            ShuffleAttackEffectiveness(false);

            ShuffleLifeEffectiveness(true);

            ShuffleLifeEffectiveness(false);

            if (_props.NumberOfPalacesToComplete.Equals("Random"))
            {
                RomData.Put(0x17B10, (byte)R.Next(0, 7));
            }
            else
            {
                RomData.Put(0x17B10, (byte)int.Parse(_props.NumberOfPalacesToComplete));
            }

            if (_props.StartingHeartContainers.Equals("Random"))
            {
                _startHearts = R.Next(1, 9);
                RomData.Put(0x17B00, (byte)_startHearts);
            }
            else
            {
                _startHearts = int.Parse(_props.StartingHeartContainers);
                RomData.Put(0x17B00, (byte)_startHearts);
            }

            if (_props.MaximumHeartContainers.Equals("Random"))
            {
                _maxHearts = R.Next(_startHearts, 9);
            }
            else
            {
                _maxHearts = int.Parse(_props.MaximumHeartContainers);
            }

            _numHContainers = _maxHearts - _startHearts;

            if (_props.RandomizeNumberOfLives)
            {
                RomData.Put(0x1C369, (byte)R.Next(2, 6));
            }

            if (_props.StartingTechs.Equals("Random"))
            {
                int swap = R.Next(7);
                if (swap <= 3)
                {
                    RomData.Put(0x17B12, 0);
                }
                else if (swap == 4)
                {
                    RomData.Put(0x17B12, 0x10);
                }
                else if (swap == 5)
                {
                    RomData.Put(0x17B12, 0x04);
                }
                else
                {
                    RomData.Put(0x17B12, 0x14);
                }
            }
            else if (_props.StartingTechs.Equals("Downstab"))
            {
                RomData.Put(0x17B12, 0x10);
            }
            else if (_props.StartingTechs.Equals("Upstab"))
            {
                RomData.Put(0x17B12, 0x04);
            }
            else if (_props.StartingTechs.Equals("Both"))
            {
                RomData.Put(0x17B12, 0x14);
            }
            else
            {
                RomData.Put(0x17B12, 0x00);
            }

            if (_props.InvincibleLifeEffectiveness)
            {
                for (int i = 0x1E2BF; i < 0x1E2BF + 56; i++)
                {
                    RomData.Put(i, 0);
                }
            }

            if (_props.OhkoLifeEffectiveness)
            {
                for (int i = 0x1E2BF; i < 0x1E2BF + 56; i++)
                {
                    RomData.Put(i, 0xFF);
                }
            }

            if (_props.FreeMagicEffectiveness)
            {
                for (int i = 0xD8B; i < 0xD8b + 64; i++)
                {
                    RomData.Put(i, 0);
                }
            }

            if (_props.ChangePalacePalettes)
            {

                int[,] bSprites = new int[7, 32];
                int[,] binSprites = new int[7, 32];
                for (int i = 0; i < 7; i++)
                {
                    for (int j = 0; j < 32; j++)
                    {
                        bSprites[i, j] = RomData.GetByte(_brickSprites[i] + j);
                        binSprites[i, j] = RomData.GetByte(_inBrickSprites[i] + j);
                    }
                }
                for (int i = 0; i < 7; i++)
                {
                    int group = R.Next(3);
                    int[] bricks = new int[3];
                    int[] curtains = new int[3];
                    if (group == 0)
                    {
                        int brickRow = R.Next(_brickgroup0.GetLength(0));
                        bricks[0] = _brickgroup0[brickRow, 0];
                        bricks[1] = _brickgroup0[brickRow, 1];
                        bricks[2] = _brickgroup0[brickRow, 2];
                        int curtainRow = R.Next(_curtaingroup0.GetLength(0));
                        curtains[0] = _curtaingroup0[curtainRow, 0];
                        curtains[1] = _curtaingroup0[curtainRow, 1];
                        curtains[2] = _curtaingroup0[curtainRow, 2];

                    }
                    else if (group == 1)
                    {
                        int brickRow = R.Next(_brickgroup1.GetLength(0));
                        bricks[0] = _brickgroup1[brickRow, 0];
                        bricks[1] = _brickgroup1[brickRow, 1];
                        bricks[2] = _brickgroup1[brickRow, 2];
                        int curtainRow = R.Next(_curtaingroup1.GetLength(0));
                        curtains[0] = _curtaingroup1[curtainRow, 0];
                        curtains[1] = _curtaingroup1[curtainRow, 1];
                        curtains[2] = _curtaingroup1[curtainRow, 2];
                    }
                    else
                    {
                        int brickRow = R.Next(_brickgroup2.GetLength(0));
                        bricks[0] = _brickgroup2[brickRow, 0];
                        bricks[1] = _brickgroup2[brickRow, 1];
                        bricks[2] = _brickgroup2[brickRow, 2];
                        int curtainRow = R.Next(_curtaingroup2.GetLength(0));
                        curtains[0] = _curtaingroup2[curtainRow, 0];
                        curtains[1] = _curtaingroup2[curtainRow, 1];
                        curtains[2] = _curtaingroup2[curtainRow, 2];
                    }
                    for (int j = 0; j < 3; j++)
                    {
                        RomData.Put(_outBricks[i] + j, (byte)bricks[j]);
                        RomData.Put(_inBricks[i] + j, (byte)bricks[j]);
                        RomData.Put(_inCurtains[i] + j, (byte)curtains[j]);
                        if (j == 0)
                        {
                            RomData.Put(_inWindows[i] + j, (byte)bricks[j]);
                        }
                    }
                    int bRow = R.Next(7);
                    int binRow = R.Next(7);
                    for (int j = 0; j < 32; j++)
                    {
                        RomData.Put(_brickSprites[i] + j, (byte)bSprites[bRow, j]);
                        RomData.Put(_inBrickSprites[i] + j, (byte)binSprites[binRow, j]);
                    }
                }
            }

            if (_props.ShuffleItemDropFrequency)
            {
                int drop = R.Next(5) + 4;
                RomData.Put(0x1E8B0, (byte)drop);
            }

            char[] randoby = ToGameText("RANDO BY  ");
            for (int i = 0; i < randoby.Length; i++)
            {
                RomData.Put(0x15377 + i, (byte)randoby[i]);
            }

            char[] digshake = ToGameText("DIGSHAKE ");
            for (int i = 0; i < digshake.Length; i++)
            {
                RomData.Put(0x15384 + i, (byte)digshake[i]);
            }
        }

        private byte IntToText(int x)
        {
            switch (x)
            {
                case 0:
                    return 0xD0;
                case 1:
                    return 0xD1;
                case 2:
                    return 0xD2;
                case 3:
                    return 0xD3;
                case 4:
                    return 0xD4;
                case 5:
                    return 0xD5;
                case 6:
                    return 0xD6;
                case 7:
                    return 0xD7;
                case 8:
                    return 0xD8;
                default:
                    return 0xD9;
            }
        }

        private void LoadPalaces()
        {
            for (int i = 1; i < 8; i++)
            {
                Palace p = new Palace(i, _palaceAddr[i], _palaceConnectionLocs[i], this);
                if (i == 7 && _props.ShortenGreatPalace)
                {
                    p.Shorten();
                }
                if (_props.ShufflePalaceRooms)
                {
                    p.ShuffleRooms();
                }
                while (!p.AllReachable() || (i == 7 && (_props.ThunderbirdRequired && !p.RequiresThunderbird())) || p.HasDeadEnd())
                {
                    p = new Palace(i, _palaceAddr[i], _palaceConnectionLocs[i], this);
                    if (i == 7 && _props.ShortenGreatPalace)
                    {
                        p.Shorten();
                    }
                    if (_props.ShufflePalaceRooms)
                    {
                        p.ShuffleRooms();
                    }
                }
                _palaces.Add(p);
            }
            if (_props.ShufflePalaceEnemies)
            {
                ShuffleE(_enemyPtr1, _enemyAddr1, _enemies1, _generators1, _shorties1, _tallGuys1, _flyingEnemies1, false);
                ShuffleE(_enemyPtr2, _enemyAddr1, _enemies2, _generators2, _shorties2, _tallGuys2, _flyingEnemies2, false);
                ShuffleE(_enemyPtr3, _enemyAddr2, _enemies3, _generators3, _shorties3, _tallGuys3, _flyingEnemies3, true);
            }
            if (_props.ShuffleSmallItems || _props.PalacesContainsExtraKeys)
            {
                _palaces[0].ShuffleSmallItems(4, true);
                _palaces[1].ShuffleSmallItems(4, true);
                _palaces[2].ShuffleSmallItems(4, false);
                _palaces[3].ShuffleSmallItems(4, false);
                _palaces[4].ShuffleSmallItems(4, true);
                _palaces[5].ShuffleSmallItems(4, false);
                _palaces[6].ShuffleSmallItems(5, true);
            }
            _palaces[1].NeedJumpOrFairy = !_palaces[1].CheckBlocks(new List<int> { 32 * 4 }).Contains(80);
            _palaces[1].NeedGlove = !_palaces[1].CheckBlocks(new List<int> { 26 * 4 }).Contains(80);
            _palaces[2].NeedDstab = !_palaces[2].CheckBlocks(new List<int> { 52 }).Contains(44);
            _palaces[2].NeedGlove = !_palaces[2].CheckBlocks(new List<int> { 40, 52 }).Contains(44);
            _palaces[3].NeedFairy = !_palaces[2].CheckBlocks(new List<int> { 96 }).Contains(124);
            _palaces[4].NeedFairy = !_palaces[4].CheckBlocks(new List<int> { 148 }).Contains(244);
            _palaces[5].NeedFairy = !_palaces[5].CheckBlocks(new List<int> { 204, 228 }).Contains(176);
            _palaces[5].NeedGlove = !_palaces[5].CheckBlocks(new List<int> { 172, 188, 196 }).Contains(176);
        }

        private void UpdateRom()
        {
            foreach (World w in _worlds)
            {
                List<Location> locs = w.AllLocations;
                foreach (Location l in locs)
                {
                    l.UpdateBytes();
                    RomData.Put(l.MemAddress, l.LocationBytes[0]);
                    RomData.Put(l.MemAddress + _overworldXOff, l.LocationBytes[1]);
                    RomData.Put(l.MemAddress + _overworldMapOff, l.LocationBytes[2]);
                    RomData.Put(l.MemAddress + _overworldWorldOff, l.LocationBytes[3]);
                }
            }

            foreach (Palace p in _palaces)
            {
                p.UpdateRom();
            }
            Location medicineLoc = null;
            Location trophyLoc = null;
            Location kidLoc = null;
            foreach (Location l in _itemLocs)
            {
                if (l._item == Items.Medicine)
                {
                    medicineLoc = l;
                }
                if (l._item == Items.Trophy)
                {
                    trophyLoc = l;
                }
                if (l._item == Items.Kid)
                {
                    kidLoc = l;
                }
            }

            byte[] medSprite = new byte[32];
            byte[] trophySprite = new byte[32];
            byte[] kidSprite = new byte[32];

            for (int i = 0; i < 32; i++)
            {
                medSprite[i] = RomData.GetByte(0x23310 + i);
                trophySprite[i] = RomData.GetByte(0x232f0 + i);
                kidSprite[i] = RomData.GetByte(0x25310 + i);
            }
            bool medEast = (_eastHyrule.AllLocations.Contains(medicineLoc) || _mazeIsland.AllLocations.Contains(medicineLoc));
            bool trophyEast = (_eastHyrule.AllLocations.Contains(trophyLoc) || _mazeIsland.AllLocations.Contains(trophyLoc));
            bool kidWest = (_westHyrule.AllLocations.Contains(kidLoc) || _deathMountain.AllLocations.Contains(kidLoc));
            Dictionary<int, int> palaceMems = new Dictionary<int, int>
            {
                { 1, 0x29AD0 },
                { 2, 0x2BAD0 },
                { 3, 0x33AD0 },
                { 4, 0x35AD0 },
                { 5, 0x37AD0 },
                { 6, 0x39AD0 }
            };

            if (medEast && _eastHyrule._palace5._item != Items.Medicine && _eastHyrule._palace6._item != Items.Medicine && _mazeIsland._palace4._item != Items.Medicine)
            {
                for (int i = 0; i < 32; i++)
                {
                    RomData.Put(0x25430 + i, medSprite[i]);
                }
                RomData.Put(0x1eeb9, 0x43);
                RomData.Put(0x1eeba, 0x43);
            }

            if (trophyEast)
            {
                for (int i = 0; i < 32; i++)
                {
                    RomData.Put(0x25410 + i, trophySprite[i]);
                }
                RomData.Put(0x1eeb7, 0x41);
                RomData.Put(0x1eeb8, 0x41);
            }

            if (kidWest && _westHyrule._palaceOne._item != Items.Kid && _westHyrule._palaceTwo._item != Items.Kid && _westHyrule._palaceThree._item != Items.Kid)
            {
                for (int i = 0; i < 32; i++)
                {
                    RomData.Put(0x23570 + i, kidSprite[i]);
                }
                RomData.Put(0x1eeb5, 0x57);
                RomData.Put(0x1eeb6, 0x57);
            }

            if (_eastHyrule._newKasuto._item == Items.Trophy || _eastHyrule._newKasuto2._item == Items.Trophy)
            {
                for (int i = 0; i < 32; i++)
                {
                    RomData.Put(0x27210 + i, trophySprite[i]);
                }
                RomData.Put(0x1eeb7, 0x21);
                RomData.Put(0x1eeb8, 0x21);
            }

            if (_eastHyrule._newKasuto._item == Items.Medicine || _eastHyrule._newKasuto2._item == Items.Medicine)
            {
                for (int i = 0; i < 32; i++)
                {
                    RomData.Put(0x27230 + i, medSprite[i]);
                }
                RomData.Put(0x1eeb9, 0x23);
                RomData.Put(0x1eeba, 0x23);
            }

            if (_eastHyrule._newKasuto._item == Items.Kid || _eastHyrule._newKasuto2._item == Items.Kid)
            {
                for (int i = 0; i < 32; i++)
                {
                    RomData.Put(0x27250 + i, kidSprite[i]);
                }
                RomData.Put(0x1eeb5, 0x25);
                RomData.Put(0x1eeb6, 0x25);
            }

            if (_westHyrule._palaceOne._item == Items.Trophy)
            {
                for (int i = 0; i < 32; i++)
                {
                    RomData.Put(palaceMems[_westHyrule._palaceOne.PalNum] + i, trophySprite[i]);
                }
                RomData.Put(0x1eeb7, 0xAD);
                RomData.Put(0x1eeb8, 0xAD);
            }
            if (_westHyrule._palaceTwo._item == Items.Trophy)
            {
                for (int i = 0; i < 32; i++)
                {
                    RomData.Put(palaceMems[_westHyrule._palaceTwo.PalNum] + i, trophySprite[i]);
                }
                RomData.Put(0x1eeb7, 0xAD);
                RomData.Put(0x1eeb8, 0xAD);
            }
            if (_westHyrule._palaceThree._item == Items.Trophy)
            {
                for (int i = 0; i < 32; i++)
                {
                    RomData.Put(palaceMems[_westHyrule._palaceThree.PalNum] + i, trophySprite[i]);
                }
                RomData.Put(0x1eeb7, 0xAD);
                RomData.Put(0x1eeb8, 0xAD);
            }
            if (_mazeIsland._palace4._item == Items.Trophy)
            {
                for (int i = 0; i < 32; i++)
                {
                    RomData.Put(palaceMems[_mazeIsland._palace4.PalNum] + i, trophySprite[i]);
                }
                RomData.Put(0x1eeb7, 0xAD);
                RomData.Put(0x1eeb8, 0xAD);
            }
            if (_eastHyrule._palace5._item == Items.Trophy)
            {
                for (int i = 0; i < 32; i++)
                {
                    RomData.Put(palaceMems[_eastHyrule._palace5.PalNum] + i, trophySprite[i]);
                }
                RomData.Put(0x1eeb7, 0xAD);
                RomData.Put(0x1eeb8, 0xAD);
            }
            if (_eastHyrule._palace6._item == Items.Trophy)
            {
                for (int i = 0; i < 32; i++)
                {
                    RomData.Put(palaceMems[_eastHyrule._palace6.PalNum] + i, trophySprite[i]);
                }
                RomData.Put(0x1eeb7, 0xAD);
                RomData.Put(0x1eeb8, 0xAD);
            }
            if (_eastHyrule._gp._item == Items.Trophy)
            {
                for (int i = 0; i < 32; i++)
                {
                    RomData.Put(palaceMems[_eastHyrule._gp.PalNum] + i, trophySprite[i]);
                }
                RomData.Put(0x1eeb7, 0xAD);
                RomData.Put(0x1eeb8, 0xAD);
            }

            if (_westHyrule._palaceOne._item == Items.Medicine)
            {
                for (int i = 0; i < 32; i++)
                {
                    RomData.Put(palaceMems[_westHyrule._palaceOne.PalNum] + i, medSprite[i]);
                }
                RomData.Put(0x1eeb9, 0xAD);
                RomData.Put(0x1eeba, 0xAD);
            }
            if (_westHyrule._palaceTwo._item == Items.Medicine)
            {
                for (int i = 0; i < 32; i++)
                {
                    RomData.Put(palaceMems[_westHyrule._palaceTwo.PalNum] + i, medSprite[i]);
                }
                RomData.Put(0x1eeb9, 0xAD);
                RomData.Put(0x1eeba, 0xAD);
            }
            if (_westHyrule._palaceThree._item == Items.Medicine)
            {
                for (int i = 0; i < 32; i++)
                {
                    RomData.Put(palaceMems[_westHyrule._palaceThree.PalNum] + i, medSprite[i]);
                }
                RomData.Put(0x1eeb9, 0xAD);
                RomData.Put(0x1eeba, 0xAD);
            }
            if (_mazeIsland._palace4._item == Items.Medicine)
            {
                for (int i = 0; i < 32; i++)
                {
                    RomData.Put(palaceMems[_mazeIsland._palace4.PalNum] + i, medSprite[i]);
                }
                RomData.Put(0x1eeb9, 0xAD);
                RomData.Put(0x1eeba, 0xAD);
            }
            if (_eastHyrule._palace5._item == Items.Medicine)
            {
                for (int i = 0; i < 32; i++)
                {
                    RomData.Put(palaceMems[_eastHyrule._palace5.PalNum] + i, medSprite[i]);
                }
                RomData.Put(0x1eeb9, 0xAD);
                RomData.Put(0x1eeba, 0xAD);
            }
            if (_eastHyrule._palace6._item == Items.Medicine)
            {
                for (int i = 0; i < 32; i++)
                {
                    RomData.Put(palaceMems[_eastHyrule._palace6.PalNum] + i, medSprite[i]);
                }
                RomData.Put(0x1eeb9, 0xAD);
                RomData.Put(0x1eeba, 0xAD);
            }
            if (_eastHyrule._gp._item == Items.Medicine)
            {
                for (int i = 0; i < 32; i++)
                {
                    RomData.Put(palaceMems[_eastHyrule._gp.PalNum] + i, medSprite[i]);
                }
                RomData.Put(0x1eeb9, 0xAD);
                RomData.Put(0x1eeba, 0xAD);
            }

            if (_westHyrule._palaceOne._item == Items.Kid)
            {
                for (int i = 0; i < 32; i++)
                {
                    RomData.Put(palaceMems[_westHyrule._palaceOne.PalNum] + i, kidSprite[i]);
                }
                RomData.Put(0x1eeb5, 0xAD);
                RomData.Put(0x1eeb6, 0xAD);
            }
            if (_westHyrule._palaceTwo._item == Items.Kid)
            {
                for (int i = 0; i < 32; i++)
                {
                    RomData.Put(palaceMems[_westHyrule._palaceTwo.PalNum] + i, kidSprite[i]);
                }
                RomData.Put(0x1eeb5, 0xAD);
                RomData.Put(0x1eeb6, 0xAD);
            }
            if (_westHyrule._palaceThree._item == Items.Kid)
            {
                for (int i = 0; i < 32; i++)
                {
                    RomData.Put(palaceMems[_westHyrule._palaceThree.PalNum] + i, kidSprite[i]);
                }
                RomData.Put(0x1eeb5, 0xAD);
                RomData.Put(0x1eeb6, 0xAD);
            }
            if (_mazeIsland._palace4._item == Items.Kid)
            {
                for (int i = 0; i < 32; i++)
                {
                    RomData.Put(palaceMems[_mazeIsland._palace4.PalNum] + i, kidSprite[i]);
                }
                RomData.Put(0x1eeb5, 0xAD);
                RomData.Put(0x1eeb6, 0xAD);
            }
            if (_eastHyrule._palace5._item == Items.Kid)
            {
                for (int i = 0; i < 32; i++)
                {
                    RomData.Put(palaceMems[_eastHyrule._palace5.PalNum] + i, kidSprite[i]);
                }
                RomData.Put(0x1eeb5, 0xAD);
                RomData.Put(0x1eeb6, 0xAD);
            }
            if (_eastHyrule._palace6._item == Items.Kid)
            {
                for (int i = 0; i < 32; i++)
                {
                    RomData.Put(palaceMems[_eastHyrule._palace6.PalNum] + i, kidSprite[i]);
                }
                RomData.Put(0x1eeb5, 0xAD);
                RomData.Put(0x1eeb6, 0xAD);
            }
            if (_eastHyrule._gp._item == Items.Kid)
            {
                for (int i = 0; i < 32; i++)
                {
                    RomData.Put(palaceMems[_eastHyrule._gp.PalNum] + i, kidSprite[i]);
                }
                RomData.Put(0x1eeb5, 0xAD);
                RomData.Put(0x1eeb6, 0xAD);
            }


            RomData.Put(0x1CD3A, (byte)_palGraphics[_westHyrule._palaceOne.PalNum]);


            RomData.Put(0x1CD3B, (byte)_palGraphics[_westHyrule._palaceTwo.PalNum]);


            RomData.Put(0x1CD3C, (byte)_palGraphics[_westHyrule._palaceThree.PalNum]);


            RomData.Put(0x1CD3E, (byte)_palGraphics[_mazeIsland._palace4.PalNum]);


            RomData.Put(0x1CD42, (byte)_palGraphics[_eastHyrule._palace5.PalNum]);

            RomData.Put(0x1CD43, (byte)_palGraphics[_eastHyrule._palace6.PalNum]);
            RomData.Put(0x1CD44, (byte)_palGraphics[_eastHyrule._gp.PalNum]);


            RomData.Put(0x1CD45, (byte)_palPalettes[_westHyrule._palaceOne.PalNum]);

            RomData.Put(0x1CD46, (byte)_palPalettes[_westHyrule._palaceTwo.PalNum]);

            RomData.Put(0x1CD47, (byte)_palPalettes[_westHyrule._palaceThree.PalNum]);

            RomData.Put(0x1CD49, (byte)_palPalettes[_mazeIsland._palace4.PalNum]);

            RomData.Put(0x1CD4D, (byte)_palPalettes[_eastHyrule._palace5.PalNum]);

            RomData.Put(0x1CD4E, (byte)_palPalettes[_eastHyrule._palace6.PalNum]);

            RomData.Put(0x1CD4F, (byte)_palPalettes[_eastHyrule._gp.PalNum]);

            if (_props.ShuffleDripperEnemies)
            {
                RomData.Put(0x11927, (byte)_enemies1[R.Next(_enemies1.Count)]);
            }

            if (_props.ShuffleSpritePallate)
            {
                List<int> doubleLocs = new List<int> { 0x40b4, 0x80b4, 0x100b4, 0x100b8, 0x100bc, 0x140b4, 0x140b8, 0x140bc };
                List<int> singleLocs = new List<int> { 0x40b8, 0x40bc, 0x80b8, 0x80bc };

                foreach (int i in doubleLocs)
                {
                    int low = R.Next(12) + 1;
                    int high = (R.Next(2) + 1) * 16;
                    int color = high + low;
                    RomData.Put(i, (byte)color);
                    RomData.Put(i + 16, (byte)color);
                    RomData.Put(i - 1, (byte)(color - 15));
                    RomData.Put(i + 16 - 1, (byte)(color - 15));
                }
                foreach (int i in singleLocs)
                {
                    int low = R.Next(13);
                    int high = (R.Next(3)) * 16;
                    int color = high + low;
                    RomData.Put(i, (byte)color);
                    RomData.Put(i + 16, (byte)color);
                    RomData.Put(i + 16 - 1, (byte)(color - 15));
                }

                for (int i = 0x54e5; i < 0x5508; i++)
                {
                    int b = RomData.GetByte(i);
                    int p = b & 0x3F;
                    int n = R.Next(4);
                    n <<= 6;
                    RomData.Put(i, (byte)(n + p));
                }

                for (int i = 0x94e5; i < 0x9508; i++)
                {
                    int b = RomData.GetByte(i);
                    int p = b & 0x3F;
                    int n = R.Next(4);
                    n <<= 6;
                    RomData.Put(i, (byte)(n + p));
                }
                for (int i = 0x114e5; i < 0x11508; i++)
                {
                    int b = RomData.GetByte(i);
                    int p = b & 0x3F;
                    int n = R.Next(4);
                    n <<= 6;
                    RomData.Put(i, (byte)(n + p));
                }
                for (int i = 0x129e5; i < 0x12a09; i++)
                {
                    int b = RomData.GetByte(i);
                    int p = b & 0x3F;
                    int n = R.Next(4);
                    n <<= 6;
                    RomData.Put(i, (byte)(n + p));
                }
                for (int i = 0x154e5; i < 0x15508; i++)
                {
                    int b = RomData.GetByte(i);
                    int p = b & 0x3F;
                    int n = R.Next(4);
                    n <<= 6;
                    RomData.Put(i, (byte)(n + p));
                }
            }

            Console.WriteLine("Here");
            RomData.Put(0x4DEA, (byte)_westHyrule._trophyCave._item);
            RomData.Put(0x502A, (byte)_westHyrule._jar._item);
            RomData.Put(0x4DD7, (byte)_westHyrule._heartTwo._item);

            int[] itemLocs2 = { 0x10E91, 0x10E9A, 0x1252D, 0x12538, 0x10EA3, 0x12774 };


            RomData.Put(0x5069, (byte)_westHyrule._medicineCave._item);
            RomData.Put(0x4ff5, (byte)_westHyrule._heartOne._item);
            if (_westHyrule._palaceOne.PalNum != 7)
            {
                RomData.Put(itemLocs2[_westHyrule._palaceOne.PalNum - 1], (byte)_westHyrule._palaceOne._item);
            }
            if (_westHyrule._palaceTwo.PalNum != 7)
            {
                RomData.Put(itemLocs2[_westHyrule._palaceTwo.PalNum - 1], (byte)_westHyrule._palaceTwo._item);
            }
            if (_westHyrule._palaceThree.PalNum != 7)
            {
                RomData.Put(itemLocs2[_westHyrule._palaceThree.PalNum - 1], (byte)_westHyrule._palaceThree._item);
            }
            RomData.Put(0x65C3, (byte)_deathMountain._magicCave._item);
            RomData.Put(0x6512, (byte)_deathMountain._hammerCave._item);
            RomData.Put(0x8FAA, (byte)_eastHyrule._heart1._item);
            RomData.Put(0x9011, (byte)_eastHyrule._heart2._item);

            if (_eastHyrule._palace5.PalNum != 7)
            {
                RomData.Put(itemLocs2[_eastHyrule._palace5.PalNum - 1], (byte)_eastHyrule._palace5._item);
            }
            if (_eastHyrule._palace6.PalNum != 7)
            {
                RomData.Put(itemLocs2[_eastHyrule._palace6.PalNum - 1], (byte)_eastHyrule._palace6._item);
            }
            RomData.Put(0xDB95, (byte)_eastHyrule._newKasuto2._item); //map 47

            RomData.Put(0xDB8C, (byte)_eastHyrule._newKasuto._item); //map 46

            RomData.Put(0xA5A8, (byte)_mazeIsland._magic._item);
            RomData.Put(0xA58B, (byte)_mazeIsland._kid._item);
            if (_mazeIsland._palace4.PalNum != 7)
            {
                RomData.Put(itemLocs2[_mazeIsland._palace4.PalNum - 1], (byte)_mazeIsland._palace4._item);
            }

            if (_eastHyrule._gp.PalNum != 7)
            {
                RomData.Put(itemLocs2[_eastHyrule._gp.PalNum - 1], (byte)_eastHyrule._gp._item);
            }
            if (_props.IncludePbagCavesInItemShuffle)
            {
                RomData.Put(0x4FE2, (byte)_westHyrule._pbagCave._item);
                RomData.Put(0x8ECC, (byte)_eastHyrule._pbagCave1._item);
                RomData.Put(0x8FB3, (byte)_eastHyrule._pbagCave2._item);

            }

            foreach (Location l in _pbagHearts)
            {
                if (l == _westHyrule._pbagCave)
                {
                    RomData.Put(0x4FE2, (byte)_westHyrule._pbagCave._item);
                }

                if (l == _eastHyrule._pbagCave1)
                {
                    RomData.Put(0x8ECC, (byte)_eastHyrule._pbagCave1._item);
                }
                if (l == _eastHyrule._pbagCave2)
                {
                    RomData.Put(0x8FB3, (byte)_eastHyrule._pbagCave2._item);
                }
            }

            //Update raft animation
            RomData.Put(0x538, (byte)_westHyrule._raftSpot.XPos);
            RomData.Put(0x53A, (byte)_westHyrule._raftSpot.YPos);
            RomData.Put(0x539, (byte)_eastHyrule._start.XPos);
            RomData.Put(0x53B, (byte)_eastHyrule._start.YPos);

            //Fix Maze Island Bridge music bug
            RomData.Put(0x565, (byte)_eastHyrule._palace4.XPos);
            RomData.Put(0x567, (byte)_eastHyrule._palace4.YPos);
            RomData.Put(0x564, (byte)_mazeIsland._start.XPos);
            RomData.Put(0x566, (byte)_mazeIsland._start.YPos);

            //Update world check for p7
            if (_westHyrule._palaceOne.PalNum == 7 || _westHyrule._palaceTwo.PalNum == 7 || _westHyrule._palaceThree.PalNum == 7)
            {
                RomData.Put(0x1dd3b, 0x05);
            }

            if (_mazeIsland._palace4.PalNum == 7)
            {
                RomData.Put(0x1dd3b, 0x0a);
            }

            Console.WriteLine("Here");

            int spellNameBase = 0x1c3a, effectBase = 0x00e58, spellCostBase = 0xd8b, functionBase = 0xdcb;

            int[,] magLevels = new int[8, 8];
            int[,] magNames = new int[8, 7];
            int[] magEffects = new int[16];
            int[] magFunction = new int[8];

            int[,] textPointers = new int[8, 2];
            for (int i = 0; i < _spellTextPointers.Length; i++)
            {
                textPointers[i, 0] = RomData.GetByte(_spellTextPointers[i]);
                textPointers[i, 1] = RomData.GetByte(_spellTextPointers[i] + 1);
            }

            for (int i = 0; i < _spellTextPointers.Length; i++)
            {
                RomData.Put(_spellTextPointers[i], (byte)textPointers[(int)_spellMap[(Spells)i], 0]);
                RomData.Put(_spellTextPointers[i] + 1, (byte)textPointers[(int)_spellMap[(Spells)i], 1]);
            }

            for (int i = 0; i < magFunction.Count(); i++)
            {
                magFunction[i] = RomData.GetByte(functionBase + (int)_spellMap[(Spells)i]);
            }

            for (int i = 0; i < magEffects.Count(); i += 2)
            {
                magEffects[i] = RomData.GetByte(effectBase + (int)_spellMap[(Spells)(i / 2)] * 2);
                magEffects[i + 1] = RomData.GetByte(effectBase + (int)_spellMap[(Spells)(i / 2)] * 2 + 1);
            }

            for (int i = 0; i < 8; i++)
            {
                for (int j = 0; j < 8; j++)
                {
                    magLevels[i, j] = RomData.GetByte(spellCostBase + ((int)_spellMap[(Spells)i] * 8 + j));
                }

                for (int j = 0; j < 7; j++)
                {
                    magNames[i, j] = RomData.GetByte(spellNameBase + ((int)_spellMap[(Spells)i] * 0xe + j));
                }
            }

            for (int i = 0; i < magFunction.Count(); i++)
            {
                RomData.Put(functionBase + i, (byte)magFunction[i]);
            }

            for (int i = 0; i < magEffects.Count(); i += 2)
            {
                RomData.Put(effectBase + i, (byte)magEffects[i]);
                RomData.Put(effectBase + i + 1, (byte)magEffects[i + 1]);
            }

            for (int i = 0; i < 8; i++)
            {
                for (int j = 0; j < 8; j++)
                {
                    RomData.Put(spellCostBase + (i * 8) + j, (byte)magLevels[i, j]);
                }

                for (int j = 0; j < 7; j++)
                {
                    RomData.Put(spellNameBase + (i * 0xe) + j, (byte)magNames[i, j]);
                }
            }

            //fix for rope graphical glitch
            for (int i = 0; i < 16; i++)
            {
                RomData.Put(0x32CD0 + i, RomData.GetByte(0x34CD0 + i));
            }

            if (_hiddenPalace)
            {
                RomData.Put(0x8664, 0);
            }

            if (_hiddenKasuto)
            {
                RomData.Put(0x8660, 0);
            }
        }

        private void UpdateSprites()
        {
            int[] sprite = null;
            int[] s1Up = null;
            int[] sOw = null;
            int[] sTitle = null;
            int[] sleeper = null;
            int[] end1 = null;
            int[] end2 = null;
            int[] end3 = null;
            int[] head = null;
            int[] raft = null;
            int[] beam = null;

            if (_props.CharacterSprite.Equals("Zelda"))
            {
                sprite = _zeldaSprite;
                s1Up = _zelda1Up;
                sOw = _zeldaOw;
                sTitle = _zeldaTitle;
                sleeper = _zeldaSleeper;
                end1 = _zeldaEnd1;
                end2 = _zeldaEnd2;
                head = _zeldaHead;
                end3 = _zeldaEnd3;
                raft = _zeldaRaft;
                beam = _zeldaBeam;
            }

            if (_props.CharacterSprite.Equals("Iron Knuckle"))
            {
                sprite = _dksprite;
                s1Up = _dk1Up;
                sOw = _dkOw;
                sTitle = _dkTitle;
                sleeper = _dkSleeper;
                end1 = _dkEnd1;
                end2 = _dkEnd2;
                head = _dkHead;
                end3 = _dkEnd3;
                raft = _dkRaft;
                beam = _dkBeam;
            }

            if (_props.CharacterSprite.Equals("Error"))
            {
                sprite = _errorsprite;
                s1Up = _error1Up;
                sOw = _errorOw;
                sTitle = _errorTitle;
                sleeper = _errorSleeper;
                end1 = _errorEnd1;
                end2 = _errorEnd2;
                head = _errorHead;
                end3 = _errorEnd3;
                raft = _errorRaft;
                beam = _errorBeam;
            }

            if (_props.CharacterSprite.Equals("Samus"))
            {
                sprite = _samussprite;
                s1Up = _samus1Up;
                sOw = _samusOw;
                sTitle = _samusTitle;
                sleeper = _samusSleeper;
                end1 = _samusEnd1;
                end2 = _samusEnd2;
                head = _samusHead;
                end3 = _samusEnd3;
                raft = _samusRaft;
                beam = _samusBeam;
            }

            if (_props.CharacterSprite.Equals("Simon"))
            {
                sprite = _simonsprite;
                s1Up = _simon1Up;
                sOw = _simonOw;
                sTitle = _simonTitle;
                sleeper = _simonSleeper;
                end1 = _simonEnd1;
                end2 = _simonEnd2;
                head = _simonHead;
                end3 = _simonEnd3;
                raft = _simonRaft;
                beam = _simonBeam;
            }

            if (_props.CharacterSprite.Equals("Stalfos"))
            {
                sprite = _stalfossprite;
                s1Up = _stalfos1Up;
                sOw = _stalfosOw;
                sTitle = _stalfosTitle;
                sleeper = _stalfosSleeper;
                end1 = _stalfosEnd1;
                end2 = _stalfosEnd2;
                head = _stalfosHead;
                end3 = _stalfosEnd3;
                raft = _stalfosRaft;
                beam = _stalfosBeam;
            }

            if (_props.CharacterSprite.Equals("Vase Lady"))
            {
                sprite = _vasesprite;
                s1Up = _vase1Up;
                sOw = _vaseOw;
                sTitle = _vaseTitle;
                sleeper = _vaseSleeper;
                end1 = _vaseEnd1;
                end2 = _vaseEnd2;
                head = _vaseHead;
                end3 = _vaseEnd3;
                raft = _vaseRaft;
                beam = _vaseBeam;
            }

            if (_props.CharacterSprite.Equals("Ruto"))
            {
                sprite = _rutosprite;
                s1Up = _ruto1Up;
                sOw = _rutoOw;
                sTitle = _rutoTitle;
                sleeper = _rutoSleeper;
                end1 = _rutoEnd1;
                end2 = _rutoEnd2;
                head = _rutoHead;
                end3 = _rutoEnd3;
                raft = _rutoRaft;
                beam = _rutoBeam;
            }

            if (sprite != null)
            {
                for (int i = 0; i < sprite.Count() * 3 / 8; i++)
                {
                    RomData.Put(0x20010 + i, (byte)sprite[i]);
                    RomData.Put(0x22010 + i, (byte)sprite[i]);
                    RomData.Put(0x24010 + i, (byte)sprite[i]);
                    RomData.Put(0x26010 + i, (byte)sprite[i]);
                    RomData.Put(0x28010 + i, (byte)sprite[i]);
                    RomData.Put(0x2a010 + i, (byte)sprite[i]);
                    RomData.Put(0x2c010 + i, (byte)sprite[i]);
                    RomData.Put(0x2e010 + i, (byte)sprite[i]);
                    RomData.Put(0x30010 + i, (byte)sprite[i]);
                    RomData.Put(0x32010 + i, (byte)sprite[i]);
                    RomData.Put(0x34010 + i, (byte)sprite[i]);
                    if (i < 0x4E0 || i >= 0x520)
                    {
                        RomData.Put(0x36010 + i, (byte)sprite[i]);
                    }
                    RomData.Put(0x38010 + i, (byte)sprite[i]);

                }

                for (int i = 0; i < 0x20; i++)
                {
                    RomData.Put(0x206d0 + i, (byte)sprite[0x6c0 + i]);
                    RomData.Put(0x2e6d0 + i, (byte)sprite[0x6c0 + i]);
                    RomData.Put(0x306d0 + i, (byte)sprite[0x6c0 + i]);
                }

                for (int i = 0; i < s1Up.Count(); i++)
                {
                    RomData.Put(0x20a90 + i, (byte)s1Up[i]);
                    RomData.Put(0x22a90 + i, (byte)s1Up[i]);
                    RomData.Put(0x24a90 + i, (byte)s1Up[i]);
                    RomData.Put(0x26a90 + i, (byte)s1Up[i]);
                    RomData.Put(0x28a90 + i, (byte)s1Up[i]);
                    RomData.Put(0x2aa90 + i, (byte)s1Up[i]);
                    RomData.Put(0x2ca90 + i, (byte)s1Up[i]);
                    RomData.Put(0x2ea90 + i, (byte)s1Up[i]);
                    RomData.Put(0x30a90 + i, (byte)s1Up[i]);
                    RomData.Put(0x32a90 + i, (byte)s1Up[i]);
                    RomData.Put(0x34a90 + i, (byte)s1Up[i]);
                    RomData.Put(0x36a90 + i, (byte)s1Up[i]);
                    RomData.Put(0x38a90 + i, (byte)s1Up[i]);


                }

                for (int i = 0; i < sOw.Count(); i++)
                {
                    RomData.Put(0x31750 + i, (byte)sOw[i]);
                }

                for (int i = 0; i < sTitle.Count(); i++)
                {
                    RomData.Put(0x20D10 + i, (byte)sTitle[i]);
                    RomData.Put(0x2ED10 + i, (byte)sTitle[i]);

                }

                for (int i = 0; i < sleeper.Count(); i++)
                {
                    RomData.Put(0x21010 + i, (byte)sleeper[i]);
                    if (i > 31)
                    {
                        RomData.Put(0x23270 + i, (byte)sleeper[i]);
                    }
                }

                for (int i = 0; i < end1.Count(); i++)
                {
                    RomData.Put(0x2ed90 + i, (byte)end1[i]);
                }

                for (int i = 0; i < end2.Count(); i++)
                {
                    RomData.Put(0x2f010 + i, (byte)end2[i]);
                }

                for (int i = 0; i < end3.Count(); i++)
                {
                    RomData.Put(0x2d010 + i, (byte)end3[i]);
                }

                for (int i = 0; i < head.Count(); i++)
                {
                    RomData.Put(0x21970 + i, (byte)head[i]);
                    RomData.Put(0x23970 + i, (byte)head[i]);
                    RomData.Put(0x25970 + i, (byte)head[i]);
                    RomData.Put(0x27970 + i, (byte)head[i]);
                    RomData.Put(0x29970 + i, (byte)head[i]);
                    RomData.Put(0x2B970 + i, (byte)head[i]);
                    RomData.Put(0x2D970 + i, (byte)head[i]);
                    RomData.Put(0x2F970 + i, (byte)head[i]);
                    RomData.Put(0x31970 + i, (byte)head[i]);
                    RomData.Put(0x33970 + i, (byte)head[i]);
                    RomData.Put(0x35970 + i, (byte)head[i]);
                    RomData.Put(0x37970 + i, (byte)head[i]);
                    RomData.Put(0x39970 + i, (byte)head[i]);
                }

                for (int i = 0; i < raft.Count(); i++)
                {
                    RomData.Put(0x31450 + i, (byte)raft[i]);
                }
            }
        }

        public void ShuffleE(int enemyPtr, int enemyAddr, List<int> enemies, List<int> generators, List<int> shorties, List<int> tallGuys, List<int> flyingEnemies, bool p7)
        {
            for (int i = enemyPtr; i < enemyPtr + 126; i += 2)
            {
                int low = RomData.GetByte(i);
                int high = RomData.GetByte(i + 1);
                high <<= 8;
                high &= 0x0FFF;
                _ = high + low + enemyAddr;
                ShuffleEnemies(high + low + enemyAddr, enemies, generators, shorties, tallGuys, flyingEnemies, p7);
            }
        }

        public void ShuffleEnemies(int addr, List<int> enemies, List<int> generators, List<int> shorties, List<int> tallGuys, List<int> flyingEnemies, bool p7)
        {
            if (!_visitedEnemies.Contains(addr))
            {
                int numBytes = RomData.GetByte(addr);
                for (int j = addr + 2; j < addr + numBytes; j += 2)
                {
                    int enemy = RomData.GetByte(j) & 0x3F;
                    int highPart = RomData.GetByte(j) & 0xC0;
                    if (_props.MixLargeAndSmallEnemies)
                    {
                        if (enemies.Contains(enemy))
                        {
                            int swap = enemies[R.Next(0, enemies.Count)];
                            int ypos = RomData.GetByte(j - 1) & 0xF0;
                            int xpos = RomData.GetByte(j - 1) & 0x0F;
                            if (shorties.Contains(enemy) && tallGuys.Contains(swap))
                            {
                                ypos -= 16;
                                while (swap == 0x1D && ypos != 0x70 && !p7)
                                {
                                    swap = tallGuys[R.Next(0, tallGuys.Count)];
                                }
                            }
                            else
                            {
                                while (swap == 0x1D && ypos != 0x70 && !p7)
                                {
                                    swap = enemies[R.Next(0, enemies.Count)];
                                }
                            }


                            RomData.Put(j - 1, (byte)(ypos + xpos));
                            RomData.Put(j, (byte)(swap + highPart));
                        }
                    }
                    else
                    {
                        if (tallGuys.Contains(enemy))
                        {
                            int swap = R.Next(0, tallGuys.Count);
                            int ypos = RomData.GetByte(j - 1) & 0xF0;
                            while (tallGuys[swap] == 0x1D && ypos != 0x70 && !p7)
                            {
                                swap = R.Next(0, tallGuys.Count);
                            }
                            RomData.Put(j, (byte)(tallGuys[swap] + highPart));
                        }

                        if (shorties.Contains(enemy))
                        {
                            int swap = R.Next(0, shorties.Count);
                            RomData.Put(j, (byte)(shorties[swap] + highPart));
                        }
                    }


                    if (flyingEnemies.Contains(enemy))
                    {
                        int swap = R.Next(0, flyingEnemies.Count);
                        while (enemy == 0x07 && (flyingEnemies[swap] == 0x06 || flyingEnemies[swap] == 0x0E))
                        {
                            swap = R.Next(0, flyingEnemies.Count);
                        }
                        RomData.Put(j, (byte)(flyingEnemies[swap] + highPart));
                    }

                    if (generators.Contains(enemy))
                    {
                        int swap = R.Next(0, generators.Count);
                        RomData.Put(j, (byte)(generators[swap] + highPart));
                    }

                    if (enemy == 0x0B)
                    {
                        int swap = R.Next(0, generators.Count + 1);
                        if (swap != generators.Count)
                        {
                            RomData.Put(j, (byte)(generators[swap] + highPart));
                        }
                    }
                }
                _visitedEnemies.Add(addr);
            }

        }
        public void ShuffleSmallItems(int world, bool first)
        {
            Console.WriteLine("World: " + world);
            List<int> addresses = new List<int>();
            List<int> items = new List<int>();
            int startAddr;
            if (first)
            {
                startAddr = 0x8523 - 0x8000 + (world * 0x4000) + 0x10;
            }
            else
            {
                startAddr = 0xA000 - 0x8000 + (world * 0x4000) + 0x10;
            }
            int map = 0;
            for (int i = startAddr; i < startAddr + 126; i += 2)
            {

                map++;
                int low = RomData.GetByte(i);
                int hi = RomData.GetByte(i + 1) * 256;
                int numBytes = RomData.GetByte(hi + low + 16 - 0x8000 + (world * 0x4000));
                for (int j = 4; j < numBytes; j += 2)
                {
                    int yPos = RomData.GetByte(hi + low + j + 16 - 0x8000 + (world * 0x4000)) & 0xF0;
                    yPos >>= 4;
                    if (RomData.GetByte(hi + low + j + 1 + 16 - 0x8000 + (world * 0x4000)) == 0x0F && yPos < 13)
                    {
                        int addr = hi + low + j + 2 + 16 - 0x8000 + (world * 0x4000);
                        int item = RomData.GetByte(addr);
                        if (item == 8 || (item > 9 && item < 14) || (item > 15 && item < 19) && !addresses.Contains(addr))
                        {
                            Console.WriteLine("Map: " + map);
                            Console.WriteLine("Item: " + item);
                            Console.WriteLine("Address: {0:X}", addr);
                            addresses.Add(addr);
                            items.Add(item);
                        }
                        j++;
                    }
                }
            }


            for (int i = 0; i < items.Count; i++)
            {
                int swap = R.Next(i, items.Count);
                int temp = items[swap];
                items[swap] = items[i];
                items[i] = temp;
            }
            for (int i = 0; i < addresses.Count; i++)
            {
                RomData.Put(addresses[i], (byte)items[i]);
            }
        }

        private char[] ToGameText(string s2)
        {
            s2 = s2.ToUpper();
            char[] s = s2.ToCharArray();
            for (int i = 0; i < s.Length; i++)
            {
                if (s[i] >= '0' && s[i] <= '9')
                    s[i] += (char)(0xd0 - '0');
                else if (s[i] >= 'A' && s[i] <= 'Z')
                    s[i] += (char)(0xda - 'A');
                else if (s[i] == '.')
                    s[i] = (char)0xcf;
                else if (s[i] == '/')
                    s[i] = (char)0xce;
                else if (s[i] == ',')
                    s[i] = (char)0x9c;
                else if (s[i] == '!')
                    s[i] = (char)0x36;
                else if (s[i] == '?')
                    s[i] = (char)0x34;
                else if (s[i] == '*')
                    s[i] = (char)0x32;
                else if (s[i] == ' ')
                    s[i] = (char)0xf4;
                else if (s[i] == '\n')
                    s[i] = (char)0xfd;
                else if (s[i] == '$')
                    s[i] = (char)0xfd;
            }

            return s;
        }
    }
}
